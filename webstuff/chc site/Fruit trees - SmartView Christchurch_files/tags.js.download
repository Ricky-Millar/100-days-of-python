"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

riot.tag2('community-main', '<pulse-box each="{nodes}"></pulse-box>', 'community-main { display: flex; align-content: flex-start; flex-direction: row; flex-wrap: wrap; }', 'class="pulse-page"', function (opts) {
  var nodes = [];
  this.on("mount", function () {
    this.update();
  });
  this.on("update", function () {
    this.nodes = app.pages.community.nodes;
  });
});
riot.tag2('current-date', '<span class="date f-p1 b-dark">{date} <span class="month">{month}</span></span>', '', '', function (opts) {
  this.on("mount", function () {
    this.date = moment().format("ddd D");
    this.month = moment().format("MMM");
    this.update();
  });
  setInterval(function () {
    this.date = moment().format("ddd D");
    this.month = moment().format("MMM");
    this.update();
  }.bind(this), 1000 * 60);
});
riot.tag2('date', '<p id="date" class="right_align date" title="{time}">{date}</p>', '', '', function (opts) {
  this.date = "";
  var self = this;
  this.on('mount', function () {
    var days = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
    var shortdays = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

    var updateDateAndTime = function updateDateAndTime() {
      var d = new Date();
      var day;

      if (_lib && _lib.isSmallDesktop() && !_lib.isMobile()) {
        day = shortdays[d.getDay()];
      } else {
        day = days[d.getDay()];
      }

      var daymonth = d.getDate();
      var month = months[d.getMonth()];
      var current_date = day + " " + daymonth + " " + month;
      var h = d.getHours();
      var m = d.getMinutes();
      var s = d.getSeconds();
      var time = (h < 10 ? "0" : "") + h + ":" + (m < 10 ? "0" : "") + m + ":" + (s < 10 ? "0" : "") + s;
      self.update({
        date: current_date,
        time: time
      });
    };

    updateDateAndTime();
    setInterval(updateDateAndTime, 1000);
  });
});
riot.tag2('detail', '<filter ref="filter" if="{showFilter}" hide="{!showFilter}" data="{filterData}" return="{filteredData}"></filter> <loading if="{loading}"></loading> <article ref="article" hide="{loading||showFilter}" if="{detail}" class="{detail&&detail.options&&detail.options.tag?detail.options.tag:\'detail-default\'}" data-is="{detail&&detail.options&&detail.options.tag?detail.options.tag:\'detail-default\'}" data-detail="{detail}"> </article>', 'detail { display: flex; flex-basis: 100%; flex-direction: row; flex-wrap: wrap; background-color: #e6e7e8; padding-bottom: 80px; position: relative; } detail.parent-filter,[data-is="detail"].parent-filter{ padding: 0px; display: block; } detail .image-100,[data-is="detail"] .image-100{ margin-bottom: 20px; } detail .article.detail-header-table,[data-is="detail"] .article.detail-header-table{ padding-left: 0px; padding-top: 0px; padding-bottom: 0px; } detail .margin-top,[data-is="detail"] .margin-top{ margin-top: 10px; } detail pulse-box article,[data-is="detail"] pulse-box article{ padding: 0; } detail .f-h2,[data-is="detail"] .f-h2{ font-size: 200%; } detail .header span,[data-is="detail"] .header span{ font-size: 80%; display: block; } detail .header h3,[data-is="detail"] .header h3{ margin-top: 20px; } detail .image,[data-is="detail"] .image{ flex-basis: 50%; align-self: center; overflow: hidden; background-size: cover; background-position: center; border-top-left-radius: 6px; height: 100%; } detail pulse-box .image,[data-is="detail"] pulse-box .image{ padding-bottom: inherit; flex-basis: inherit; align-self: inherit; } detail .image.smaller_image,[data-is="detail"] .image.smaller_image{ flex-basis: 15%; } detail .table-block td,[data-is="detail"] .table-block td{ display: block; } detail .table-block td:first-child,[data-is="detail"] .table-block td:first-child{ font-weight: bold; border-left: none !important; } detail .table-block td:last-child,[data-is="detail"] .table-block td:last-child{ text-align: left; } detail img,[data-is="detail"] img{ max-width: 100%; display: block; } detail .controls,[data-is="detail"] .controls{ flex-basis: 100%; display: flex; justify-content: space-between; } detail .header,[data-is="detail"] .header{ flex-basis: 50%; padding-bottom: 20px; } detail header,[data-is="detail"] header{ flex-basis: 100%; display: flex; } detail p,[data-is="detail"] p{ margin: 0 } detail strong.date,[data-is="detail"] strong.date{ height: 30px; flex-basis: 50%; } detail div.filterMain,[data-is="detail"] div.filterMain{ height: 30px; flex-basis: 100%; text-align: left; } detail .filterLabel,[data-is="detail"] .filterLabel{ text-align: center; padding: 5px; border: 2px solid transparent; line-height: 17px; } detail .long-description,[data-is="detail"] .long-description{ border-top: 2px solid white; margin-bottom: 10px; padding-top: 10px; width: 100%; } detail .long-description p,[data-is="detail"] .long-description p{ margin: 5px 0px; } detail div.description,[data-is="detail"] div.description{ flex-basis: 70%; padding-bottom: 10px; align-items: center; align-content: right; flex-direction: column; flex-grow: 1; } detail div.description>*,[data-is="detail"] div.description>*{ flex-grow: 1; } detail h3,[data-is="detail"] h3{ margin: 0; } detail table,[data-is="detail"] table{ width: 100%; flex-basis: 100%; } detail th,[data-is="detail"] th{ font-size: 75%; text-transform: uppercase; color: #888; } detail td:not(:last-child),[data-is="detail"] td:not(:last-child){ padding: 0; padding-right: 2px; } detail .nowrap td:first-child,[data-is="detail"] .nowrap td:first-child{ white-space: nowrap; } detail .wrapper:not(.mtbgallery) .items tr,[data-is="detail"] .wrapper:not(.mtbgallery) .items tr{ border-bottom: 2px solid #ccc; border-top: 2px solid #ccc } detail .items tr:first-child,[data-is="detail"] .items tr:first-child{ border-top: none; } detail tbody.tr2 tr,[data-is="detail"] tbody.tr2 tr{ border: none; } detail tbody.tr2 tr:first-child,[data-is="detail"] tbody.tr2 tr:first-child{ border-top: 2px solid white } detail tbody.tr2 tr:last-child,[data-is="detail"] tbody.tr2 tr:last-child{ border-bottom: 2px solid white; } detail td:last-child,[data-is="detail"] td:last-child{ text-align: right } detail td p,[data-is="detail"] td p{ margin: 5px 0px; } detail .news td:last-child,[data-is="detail"] .news td:last-child{ text-align: left } detail .right,[data-is="detail"] .right{ float: right } detail .left,[data-is="detail"] .left{ float: left } detail .view-type,[data-is="detail"] .view-type{ display: flex; place-items: flex-end; padding-bottom: 4px; width: 55px; } detail button.icon,[data-is="detail"] button.icon{ height: 16px; width: 16px; outline: none; border: none; background-repeat: no-repeat; background-size: contain; background-position: center; background-color: transparent; } detail .icon.list-button,[data-is="detail"] .icon.list-button{ background-image: url("/assets/publica/sets/Find_View_List_Off.svg"); } detail .icon.list-button.active,[data-is="detail"] .icon.list-button.active{ background-image: url("/assets/publica/sets/Find_View_List_On.svg"); } detail .icon.grid-button,[data-is="detail"] .icon.grid-button{ background-image: url("/assets/publica/sets/Find_View_Tiles_Off.svg"); } detail .icon.grid-button.active,[data-is="detail"] .icon.grid-button.active{ background-image: url("/assets/publica/sets/Find_View_Tiles_On.svg"); } detail th.left,[data-is="detail"] th.left{ float: none; text-align: left; } detail .wrapper,[data-is="detail"] .wrapper{ display: flex; width: 100%; flex-basis: 100%; flex-wrap: inherit; flex-grow: 1; } detail .popup,[data-is="detail"] .popup{ position: absolute; left: 0px; top: 0px; padding: 20px; z-index: 1; } detail .popup.bottom,[data-is="detail"] .popup.bottom{ bottom: 0px; top: auto; } detail .popup h4,[data-is="detail"] .popup h4{ margin: 0px 0 10px 0; } detail .popup close div,[data-is="detail"] .popup close div{ top: 20px; } detail b,[data-is="detail"] b{ font-weight: bold; } detail .items .buttons,[data-is="detail"] .items .buttons{ align-items: center; } detail .mtbgallery>.detail-section,[data-is="detail"] .mtbgallery>.detail-section{ background-color: transparent; } detail .dot,[data-is="detail"] .dot{ display: inline-block; position: relative; width: 0.5em; height: 1em; margin-right: 3px; background-image: url(""); } detail .dot:before,[data-is="detail"] .dot:before{ content: " "; position: absolute; border: 2px solid black; border-radius: 50%; height: 4px; width: 4px; top: 50%; background: black; left: -3px; margin-top: -2px; } detail .dot.green:before,[data-is="detail"] .dot.green:before{ border-color: green; background: green; } detail .dot.red:before,[data-is="detail"] .dot.red:before{ border-color: red; background: red; } detail .dot.orange:before,[data-is="detail"] .dot.orange:before{ border-color: orange; background: orange; }', 'class="{parent-filter:showFilter}"', function (opts) {
  var _this = this;

  this.tag2unmount = false;
  this.filterData = [];
  this.filteredData = {
    data: [],
    set: function set(newdata) {
      this.data = newdata;
    }
  };
  this.on("mount", function () {
    return _this.update();
  });
  this.on("update", function () {
    if (_this.loading && _this.refs.article_virtual) {
      _this.refs.article_virtual.update();
    }

    if (_this.opts.detail) {
      _this.detail = _this.opts.detail;
    }

    if (_this.filterData.length == 0 && _this.detail && _this.detail.list) {
      app.trigger("list/filter-data/" + _this.module, _this.filterData, _this.detail);
    }
  });
  this.on("list/filter", function () {
    var _this2 = this;

    this.filteredData.data.forEach(function (a) {
      _this2.filterData.filter(function (b) {
        return b.name == a.name;
      }).forEach(function (b) {
        a.list.forEach(function (c) {
          b.list.filter(function (d) {
            return d.name == c.name;
          }).forEach(function (d) {
            return d.checked = c.checked;
          });
        });
      });
    });
    this.filter();
  });

  this.filter = function (e) {
    var _this3 = this;

    app.trigger("list/filter/apply/" + this.module, {
      list: this.detail.list,
      filters: this.filterData,
      finished: function finished() {
        _this3.update();
      }
    });
  };
});
riot.tag2('environment-main', '<pulse-box each="{nodes}"></pulse-box>', 'environment-main { display: flex; align-content: flex-start; flex-direction: row; flex-wrap: wrap; }', 'class="pulse-page"', function (opts) {
  var nodes = [];
  this.on("mount", function () {
    this.update();
  });
  this.on("update", function () {
    this.nodes = app.pages.environment.nodes;
  });
});
riot.tag2('events', '<filter ref="filter" if="{showFilter}" hide="{!showFilter}" data="{filterData}" return="{filteredData}"></filter> <div hide="{showFilter}"> <div class="mainContent b-light" hide="{!s.events}"> <loading if="{loading}"></loading> <event if="{!loading}" each="{events}"></event> <div if="{events.length==0 && !loading}"> {app.conf.texts.filterZero} </div> </div> </div>', 'events .checked,[data-is="events"] .checked{ background: #ddd; } events .mainContent,[data-is="events"] .mainContent{ padding: 20px; flex-wrap: wrap; flex-basis: 100%; align-content: flex-start; }', '', function (opts) {
  this.googleSignedIn = false;
  this.s = {
    events: true
  };
  this.filteredData = {
    data: [],
    set: function set(newdata) {
      this.data = newdata;
    }
  };
  this.loading = false;
  this.events = [];
  this.cats = [{
    name: "Free"
  }];
  this.wheres = [{
    name: "500m radius",
    distance: 500
  }, {
    name: "1km radius",
    distance: 1000
  }, {
    name: "3km radius",
    distance: 3000
  }];
  this.whens = [{
    name: "Today"
  }, {
    name: "Tomorrow"
  }, {
    name: "This weekend"
  }, {
    name: "Next week"
  }, {
    name: "Next weekend"
  }, {
    name: "Date range",
    dateRange: true,
    to: {
      label: "To",
      date: moment(),
      min: moment(),
      max: moment('2050-01-01')
    },
    from: {
      label: "From",
      date: moment(),
      min: moment(),
      max: moment('2050-01-01')
    }
  }];
  this.filterData = [{
    label: "Categories",
    name: "Categories",
    list: this.cats
  }, {
    label: "Where",
    name: "Where",
    list: this.wheres
  }, {
    label: "When",
    name: "When",
    list: this.whens
  }];

  function eventsSort(a, b) {
    if (a.time_from == b.time_from) {
      if (a.distance < b.distance) return -1;
      if (a.distance == b.distance) return 0;
      if (a.distance > b.distance) return 1;
    } else return moment(a.time_from).diff(b.time_from);
  }

  this.on("events/filter", function () {
    var _this4 = this;

    this.filteredData.data.forEach(function (a) {
      _this4.filterData.filter(function (b) {
        return b.name == a.name;
      }).forEach(function (b) {
        a.list.forEach(function (c) {
          b.list.filter(function (d) {
            return d.name == c.name;
          }).forEach(function (d) {
            return d.checked = c.checked;
          });
        });
      });
    });
    this.filter();
  });
  this.on("update", function () {
    this.refs.filter && this.refs.filter.update({
      groups: this.filterData
    });

    if (this.setFilters) {
      if (this.setFilters.when) {
        this.whens.forEach(function (item) {
          if (item.name == "From" || item.name == "To") {
            item.checked = true;
            item.from.date = moment(this.setFilters.when);
          } else {
            item.checked = false;
          }
        }.bind(this));
        this.setFilters.when = false;
      }

      if (this.setFilters.cat) {
        this.cats.reduce(function (a, item) {
          if (item.id == this.setFilters.cat) {
            item.checked = true;
            return true;
          } else {
            item.checked = false;
            return a;
          }
        }.bind(this), false) && (this.setFilters.cat = false);
      }

      this.wheres.forEach(function (a) {
        a.checked = false;
      });

      if (!Object.keys(this.setFilters).reduce(function (a, item) {
        return this.setFilters[item] || a;
      }.bind(this), false)) {
        this.setFilters = false;
        this.filter();
      }
    }
  });

  this.filter = function (e) {
    var data = {
      geo: app.lastPosition
    };
    data.cats = this.cats.filter(function (a) {
      return a.checked;
    });
    data.when = this.whens.filter(function (a) {
      return a.checked;
    });
    data.where = this.wheres.filter(function (a) {
      return a.checked;
    });
    this.loading = true;

    _lib.ajax.$json("/app/router/event.php?filter=json", data, function (res) {
      this.loading = false;
      var data = {
        data: JSON.parse(res)
      };
      var self = this;
      this.events = Object.keys(data.data).reduce(function (b, a) {
        var item = data.data[a];
        item.point = JSON.parse(item.point);

        if (app.lastPosition && app.lastPosition.lat) {
          item.distance = _maps.distance(item.point.coordinates[1], item.point.coordinates[0], app.lastPosition.lat, app.lastPosition.lng);
        } else {
          (function (item) {
            var _int = setInterval(function () {
              if (app.lastPosition && app.lastPosition.lat) {
                item.distance = _maps.distance(item.point.coordinates[1], item.point.coordinates[0], app.lastPosition.lat, app.lastPosition.lng);
                clearInterval(_int);
                self.update();
              }
            }, 1000);
          })(item);
        }

        return b.concat([item]);
      }, []).sort(eventsSort);
      this.update();
    }.bind(this));

    this.s = {
      events: true
    };
    this.update();
  };

  this.on("mount", function () {
    var _this5 = this;

    this.loading = true;

    var updateSigninStatus = function updateSigninStatus(isSignedIn) {
      if (isSignedIn) {
        _this5.googleSignedIn = true;
        app.trigger("google/calendar/singed");
      } else {
        _this5.googleSignedIn = false;
      }
    };

    var script = document.createElement('script');
    script.setAttribute('id', "googleevents");
    script.type = 'text/javascript';
    script.async = "async";
    script.defer = "defer";
    script.src = 'https://apis.google.com/js/api.js';

    script.onload = function () {
      gapi.load('client:auth2', function initClient() {
        gapi.client.init({
          apiKey: app.googleApiKey,
          clientId: app.googleClientId,
          discoveryDocs: ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"],
          scope: "https://www.googleapis.com/auth/calendar"
        }).then(function () {
          gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);
          updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
        });
      });
    };

    document.body.appendChild(script);

    _lib.ajax.$get("/app/router/event.php?category-list", function (data) {
      this.cats = this.cats.concat(JSON.parse(data));
      this.filterData[0] = {
        label: "Categories",
        name: "Categories",
        list: this.cats
      };
    }.bind(this));

    _lib.ajax.$get("/app/router/shared.php?suburbs", function (data) {
      data = JSON.parse(data);
      data = data.map(function (x) {
        x.name = x.Suburb;
        x.id = x.DimSuburbKey;
        return x;
      });
      this.wheres = this.wheres.concat(data);
      this.filterData[1] = {
        label: "Where",
        name: "Where",
        list: this.wheres
      };
    }.bind(this));

    _lib.ajax.$get("/app/router/event.php?time-this-week", function (data) {
      var _this6 = this;

      this.loading = false;
      data = JSON.parse(data);
      this.events = Object.keys(data.data).reduce(function (b, a) {
        var item = data.data[a];
        item.point = JSON.parse(item.point);

        if (app.lastPosition) {
          item.distance = _maps.distance(item.point.coordinates[1], item.point.coordinates[0], app.lastPosition.lat, app.lastPosition.lng);
        }

        return b.concat([item]);
      }, []).sort(eventsSort);
      console.log(this.events);

      if (!app.lastPosition) {
        app.promise.location().then(function () {
          _this6.events.forEach(function (item) {
            if (app.lastPosition) item.distance = _maps.distance(item.point.coordinates[1], item.point.coordinates[0], app.lastPosition.lat, app.lastPosition.lng);
          });

          _this6.events.sort(eventsSort);

          _this6.update();
        });
      }

      this.update();
    }.bind(this));
  });
});
riot.tag2('event', '<header class="article" onclick="{gotourl}"> <div class="header"> <h3 class="clampMe"> {name_short} </h3> <em class="f-p5 distance" if="{distance}">Distance {_maps.distanceRoundFormat(distance)}</em> <em class="f-p5 free" if="{free && free==1}">Free</em> </div> <div class="image"> <img riot-src="{image}"> </div> </header> <div class="content"> <p class="bold">{date} <span class="calendaradd buttons"> <button class="calendar google" click="{showcalendars}"></button> <span hide="{!calendars}" class="calendarmenu b-dark"> <span class="plus {plusrotate:googleplus, added:googleadded}" click="{calendar}">Google Calendar</span> <a href="{getUrl()}" class="plus {plusrotate:icsplus}" click="{ics}">Outlook, iCal, etc.</a> </span> </span> </p> <p> <raw content="{description}"></raw> </p> </div> <div class="buttons"> <button class="location" click="{mapview}"></button> <button class="journey" click="{journey}"></button> </div> <div class="clear"></div>', 'event,[data-is="event"]{ padding-bottom: 20px; padding-top: 20px; border-bottom: 2px solid white; display: block; } event:first-child,[data-is="event"]:first-child{ padding-top: 0px; } event:last-child,[data-is="event"]:last-child{ border-bottom: none; } event .calendarmenu,[data-is="event"] .calendarmenu{ position: absolute; top: 100%; right: 0; padding: 10px; white-space: nowrap; cursor: default; } event .plus,[data-is="event"] .plus{ position: relative; display: block; color: white; text-decoration: none; } event .plus:after,[data-is="event"] .plus:after{ content: "+"; font-size: 200%; display: inline-block; margin: 0px 0 0 5px; line-height: 0; position: relative; top: 5px; transition: all 0.5s; cursor: pointer; } event .plus.added:after,[data-is="event"] .plus.added:after{ content: "✓" } event .plus.plusrotate:after,[data-is="event"] .plus.plusrotate:after{ transform: rotate(360deg); } event .plus:first-child:after,[data-is="event"] .plus:first-child:after{ margin-left: 12px; } event .calendaradd,[data-is="event"] .calendaradd{ position: relative; } event .calendar.google,[data-is="event"] .calendar.google{ background-image: url("/assets/my/calendar-add.svg"); } event header,[data-is="event"] header{ display: flex; margin-bottom: 15px; background: rgb(123, 203, 191); } event h3,[data-is="event"] h3{ margin: 0; } event header .image,[data-is="event"] header .image{ align-self: flex-start; padding: 0px; } event header img,[data-is="event"] header img{ display: block; max-height: 125px; max-width: 46vw; } event header .header,[data-is="event"] header .header{ padding: 10px 15px; background-color: rgb(123, 203, 191); position: relative; min-height: 85px; flex-grow: 1; } event header em,[data-is="event"] header em{ font-style: normal; position: absolute; bottom: 10px; left: 10px; } event header em.free,[data-is="event"] header em.free{ right: 15px; text-align: right; } event .button,[data-is="event"] .button{ background: transparent; } event .content p,[data-is="event"] .content p{ margin: 10px 0px; }', '', function (opts) {
  this.calendars = false;
  this.googleplus = false;
  this.googleadded = false;
  this.googlecalurl = "";
  this.icsplus = false;
  var self = this;

  this.getUrl = function () {
    var ua = navigator.userAgent.toLowerCase();
    var isAndroid = ua.indexOf("android") > -1;

    var use = function use() {
      var e = !1,
          t = window.navigator.userAgent.toLowerCase(),
          a = /CriOS/i.test(navigator.userAgent),
          n = /instagram/.test(t),
          o = /iphone|ipod|ipad/.test(t),
          d = /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(navigator.userAgent);
      return (o && d || o && a || o && n) && (e = !0), e;
    };

    if (use()) {
      var url = location.origin.replace("http", "webcal");
    } else {
      var url = location.origin;
    }

    return url + "/app/router/event.php?ics=" + this.id;
  };

  this.showcalendars = function (e) {
    this.calendars = !this.calendars;
    this.googleplus = false;
    this.icsplus = false;
  }.bind(this);

  this.gotourl = function (e) {
    window.location = this.eventfinda_url;
  }.bind(this);

  this.on("mount", function () {
    this.update();
  });
  this.on("update", function () {});

  this.ics = function (e) {
    var o = e.item;
    self.calendars = false;
  }.bind(this);

  this.calendar = function (e) {
    if (self.googleadded) {
      window.open(self.googlecalurl);
      self.calendars = false;
      return;
    }

    console.log(e, self);
    self.googleplus = true;
    self.icsplus = false;

    if (self.parent.googleSignedIn) {
      addEvent(e.item);
    } else {
      gapi.auth2.getAuthInstance().signIn();
      app.one("google/calendar/singed", addEvent);
    }

    function addEvent(o) {
      var _start, _end;

      var tf = o.time_from.split(" ");
      var tt = o.time_to.split(" ");
      var tfday = 'dateTime',
          ttday = 'dateTime';

      if (tf[1] == "00:00:00") {
        tf = tf[0];
        tfday = 'date';
      } else {
        tf = o.time_from;
      }

      if (tt[1] == "00:00:00") {
        tt = tt[0];
        ttday = 'date';
      } else {
        tt = o.time_to;
      }

      var event = {
        'summary': o.name_long,
        'location': o.location + " " + o.address + " Christchurch, New Zealand",
        'description': o.description,
        'start': (_start = {}, _defineProperty(_start, tfday, tf), _defineProperty(_start, 'timeZone', 'Pacific/Auckland'), _start),
        'end': (_end = {}, _defineProperty(_end, ttday, tt), _defineProperty(_end, 'timeZone', 'Pacific/Auckland'), _end),
        'reminders': {
          'useDefault': false
        },
        'source': {
          'title': 'SmartView Christchurch',
          'url': 'https://smartview.ccc.govt.nz'
        },
        'id': o.id + 'svchch' + moment().unix()
      };
      console.log(event, o);
      var request = gapi.client.calendar.events.insert({
        'calendarId': 'primary',
        'resource': event
      });
      request.execute(function (event) {
        if (typeof event.htmlLink != "undefined") {
          console.log('Event created: ' + event.htmlLink);
          self.googlecalurl = event.htmlLink;
        } else {
          console.log('Event failed:  ', event);
        }

        self.calendars = false;
        self.googleplus = false;
        self.googleadded = true;
        self.update();
      });
    }
  }.bind(this);

  this.journey = function (e) {
    route("journey", {
      location: {
        lat: this.point.coordinates[1],
        lng: this.point.coordinates[0]
      },
      title: this.address,
      event: e.item
    });
  }.bind(this);

  this.mapview = function (e) {
    route("map/event", {
      location: this.point.coordinates,
      detail: 'events',
      clear: true,
      map: {
        center: this.point.coordinates,
        zoom: 17
      },
      event: e.item
    });
  }.bind(this);
});
riot.tag2('feature-list', '<div class="maindiv"> <table if="{this.list.length>0}"> <tr each="{list}" click="{showOnMap}"> <td><img if="{icon}" riot-src="{icon}"></td> <td> <span if="{name}" class="name">{name}</span> <img if="{img}" class="img" riot-src="{img}"> </td> <td class="right"> {desc} </td> </tr> </table> <div class="message" if="{this.list.length==0}"> {app.conf.texts.noListView} </div> </div>', 'feature-list .maindiv,[data-is="feature-list"] .maindiv{ height: 100%; overflow-y: scroll; display: flex; } feature-list .message,[data-is="feature-list"] .message{ padding: 20px; } feature-list .right,[data-is="feature-list"] .right{ padding-left: 10px; text-align: right; } feature-list table,[data-is="feature-list"] table{ list-style: none; margin-left: 20px; margin-right: 20px; flex-grow: 1; width: calc(-40px + 100%); } feature-list tr,[data-is="feature-list"] tr{ position: relative; border-bottom: 1px solid black; } feature-list td,[data-is="feature-list"] td{ padding: 7px 0px; } feature-list td img,[data-is="feature-list"] td img{ height: 30px; } feature-list td img.img,[data-is="feature-list"] td img.img{ height: 60px; } feature-list,[data-is="feature-list"]{ display: block; padding-top: 15px; position: absolute; left: 0; top: 0; right: 0; bottom: 0px; background: rgba(255, 255, 255, 1); }', '', function (opts) {
  var _this7 = this;

  this.list = [];
  var self = this;
  this.on("mount", function () {
    getList();

    _this7.update();
  });
  this.on("update", function () {});

  this.showOnMap = function (e) {
    if (e.item.feat) {
      history.back();
      app.trigger("map/setcenter", _maps.getCenter(e.item.feat.getGeometry()));
      app.trigger("map/recenter");
      var endsize = app.conf.mapIconSizeActive();
      var t = 1;
      var r = 4;
      var maxt = 1000;
      var mint = 20;
      var old = $mn.isMap().data.getStyle()(e.item.feat);

      if (old.icon && old.icon.scaledSize) {
        var oh = old.icon.scaledSize.height;
        var ow = old.icon.scaledSize.width;
        $mn.isMap().data.revertStyle();
      }

      var tstep = mint;
      var endt = maxt / tstep;
      var step = (endsize.height - oh) * r / endt;
      var nh = oh;
      var nw = ow;
      var interval = setInterval(function () {
        nh = nh + step;
        nw = nw + step;

        if (nh >= endsize.height || nh <= oh) {
          step *= -1;
        }

        t++;

        if (old.icon && old.icon.scaledSize) {
          old.icon.scaledSize.height = nh;
          old.icon.scaledSize.width = nw;
          $mn.isMap().data.overrideStyle(e.item.feat, old);
        }

        if (t >= endt) {
          $mn.isMap().data.revertStyle();
          clearInterval(interval);
        }
      }, tstep);
    }
  }.bind(this);

  var getList = function getList() {
    self.list = [];
    app.trigger("map/features/list/callback", {
      list: $mn.layers.flatten(),
      cb: function cb(list) {
        self.list = self.list.concat(list);
        self.update();
      }
    });
  };

  $mn.on("layer/change", function () {
    getList();
  });
});
riot.tag2('feelme-main', '<content-box params="{params}"> <div class="thumbs"> <button click="{parent.thumbsfeedbackup}" class="thumbsup {active:parent.activeup}"></button> <button click="{parent.thumbsfeedbackdown}" class="thumbsdown {active:parent.activedown}"></button> <div class="message {feedbackdownposition:parent.activedown}" if="{!parent.fieldDisabled&&(parent.activeup||parent.activedown)}"> <p if="{parent.activeup}">I like SmartView.</p> <p if="{parent.activedown}">SmartView could be better.</p> </div> </div> <form submit="{parent.sendcomment}" class="feedback"> <label class="title">My comments & suggestions</label> <textarea input="{parent.inputed}" ref="comment" placeholder="Comments and suggestions"></textarea> <label class="title">My email address</label> <input input="{parent.inputed}" name="email" ref="email" placeholder="Email address" autocomplete="email" type="email"> <p class="note">I would like to get a response to my feedback and/or updates on future releases.</p> <button ref="submit" type="submit" class="button">Submit</button> </form> </content-box>', 'feelme-main,[data-is="feelme-main"]{ display: flex; flex-wrap: wrap; align-content: flex-start; flex-direction: row; } feelme-main .title,[data-is="feelme-main"] .title{ text-transform: uppercase; font-size: 80%; } feelme-main input[type=email],[data-is="feelme-main"] input[type=email]{ padding: 8px; } feelme-main p.note,[data-is="feelme-main"] p.note{ margin-bottom: 2px; color: #666; } feelme-main .message p,[data-is="feelme-main"] .message p{ margin-bottom: 0; } feelme-main .message,[data-is="feelme-main"] .message{ position: absolute; left: calc(100% / 3 - 75px); bottom: 0px; } feelme-main .message.feedbackdownposition,[data-is="feelme-main"] .message.feedbackdownposition{ left: calc(200% / 3 - 75px); } feelme-main .feedback,[data-is="feelme-main"] .feedback{ flex-basis: 100%; width: 100%; margin-top: 20px; padding-bottom: 30px; } feelme-main .feedback textarea,[data-is="feelme-main"] .feedback textarea{ height: 100px; width: calc(100% - 20px); padding: 8px; } feelme-main .feedback input,[data-is="feelme-main"] .feedback input{ width: 100%; box-sizing: border-box; } feelme-main .thumbs,[data-is="feelme-main"] .thumbs{ flex-basis: 100%; width: 100%; display: flex; align-items: stretch; justify-content: space-evenly; position: relative; padding-bottom: 20px; } feelme-main .thumbs>button,[data-is="feelme-main"] .thumbs>button{ width: 100px; height: 100px; background-position: center; background-color: transparent; border-radius: 50%; } feelme-main .thumbs>button.active,[data-is="feelme-main"] .thumbs>button.active{ } feelme-main .thumbsup,[data-is="feelme-main"] .thumbsup{ background-image: url("/assets/publica/sets/Feedback_Like_Off.svg"); } feelme-main .thumbsup.active,[data-is="feelme-main"] .thumbsup.active{ background-image: url("/assets/publica/sets/Feedback_Like_On.svg"); } feelme-main .thumbsdown,[data-is="feelme-main"] .thumbsdown{ background-image: url("/assets/publica/sets/Feedback_Disklike_Off.svg"); } feelme-main .thumbsdown.active,[data-is="feelme-main"] .thumbsdown.active{ background-image: url("/assets/publica/sets/Feedback_Dislike_On.svg"); }', 'class="pulse-page fill-page b-light"', function (opts) {
  this.activeup = false;
  this.activedown = false;
  this.fieldDisabled = false;
  this.dbid = 0;
  this.params = {
    label: "We'd love to hear your feedback",
    sub: "Let us know about your experience and provide any comments or suggestions to help us improve.",
    "yield": true
  };

  this.postfeedback = function (notclear) {
    var _this8 = this;

    var refs = this.tags["content-box"].refs;

    _lib.ajax.$json("/app/router/feedback.php", {
      id: this.dbid,
      thumbsup: this.activeup,
      thumbsdown: this.activedown,
      comment: refs.comment.value,
      contact: refs.email.value,
      routed: app.routed,
      mapkeys: app.mapkeys.getChecked(),
      historyState: window.history.state,
      location: app.lastPosition,
      locationName: app.lastLocationName
    }, function (res) {
      if (!notclear) {
        refs.comment.disabled = false;
        refs.comment.value = "";
        refs.submit.disabled = true;
        refs.email.disabled = false;
        _this8.fieldDisabled = false;
      }

      _this8.dbid = +parseInt(res) || 0;
    });
  };

  this.inputed = function (e) {
    var refs = this.tags["content-box"].refs;
    refs.comment.disabled = false;
    refs.submit.disabled = false;
    refs.email.disabled = false;
    this.fieldDisabled = false;
    refs.submit.value = "Submit";
  }.bind(this);

  this.sendcomment = function (e) {
    var refs = this.tags["content-box"].refs;
    e.preventDefault();
    this.postfeedback();
    refs.comment.disabled = true;
    refs.submit.disabled = true;
    refs.email.disabled = true;
    this.fieldDisabled = true;
    refs.submit.value = "Thanks for feedback.";
  }.bind(this);

  this.thumbsfeedbackup = function (e) {
    this.activeup = !this.activeup;
    this.activedown = false;
    this.postfeedback(true);
  }.bind(this);

  this.thumbsfeedbackdown = function (e) {
    this.activeup = false;
    this.activedown = !this.activedown;
    this.postfeedback(true);
  }.bind(this);
});
riot.tag2('feelme-main-old', '<div class="smile"> <div class="face"> <div class="lefteye"></div> <div class="righteye"></div> <div class="mouth"></div> </div> </div> <div class="rating"> <div class="rating_desc"> <p>Today\'s City Pulse is</p> <h2>GREAT</h2> </div> </div> <div class="pulses"> <pulse-box each="{nodes}"></pulse-box> </div> <h2>Coming soon</h2>', 'feelme-main-old .pulses,[data-is="feelme-main-old"] .pulses{ display: flex; align-content: flex-start; flex-direction: row; flex-wrap: wrap; position: relative; overflow: scroll; height: 200px; } feelme-main-old .smile,[data-is="feelme-main-old"] .smile{ height: 220px; flex-basis: 100%; } feelme-main-old .rating,[data-is="feelme-main-old"] .rating{ flex-basis: 100%; height: 100px; margin-bottom: 10px; } feelme-main-old .rating_desc,[data-is="feelme-main-old"] .rating_desc{ text-align: center; width: 200px; margin: auto; border: 1px solid #7dc4c3; padding-bottom: 10px; } feelme-main-old .rating_desc h2,[data-is="feelme-main-old"] .rating_desc h2{ margin: 0px 0px; } feelme-main-old .face,[data-is="feelme-main-old"] .face{ position: absolute; top: 20px; left: 50%; margin-left: -100px; width: 200px; height: 200px; border-radius: 50%; border: 3px solid #7DC4C3; } feelme-main-old .mouth,[data-is="feelme-main-old"] .mouth{ position: absolute; bottom: 50px; left: 50px; width: 100px; height: 65px; border-radius: 0 0 50% 50%; border: 13px solid #7dc4c3; border-top: none; border-right: none; border-left: none; } feelme-main-old .lefteye,[data-is="feelme-main-old"] .lefteye{ position: absolute; top: 50px; left: 50px; width: 5px; height: 5px; border-radius: 50%; border: 3px solid #7dc4c3; background-color: #7dc4c3; } feelme-main-old .righteye,[data-is="feelme-main-old"] .righteye{ position: absolute; top: 50px; right: 50px; width: 5px; height: 5px; border-radius: 50%; border: 3px solid #7dc4c3; background-color: #7dc4c3; } feelme-main-old h2,[data-is="feelme-main-old"] h2{ text-align: center; margin: auto; } feelme-main-old feelme-main,[data-is="feelme-main-old"] feelme-main{ display: flex; align-content: flex-start; flex-direction: row; flex-wrap: wrap; position: relative; height: 100%; }', '', function (opts) {
  var nodes = [];
  this.on("mount", function () {
    this.update();
  });
  this.on("update", function () {
    this.nodes = app.pages.environment.nodes;
  });
});
riot.tag2('filter', '<div class="panel b-gray f-p4"> <button class="filter_all" click="{setAll}">All</button> <button class="filter_clear" click="{setClear}">Clear</button> </div> <filter-group each="{groups}"></filter-group>', '', '', function (opts) {
  var _this9 = this;

  this.groups = [];
  this.tempkeys = {};
  this.noupdate = false;

  this.setAll = function () {
    Array.prototype.forEach.call(this.root.querySelectorAll("input[type=checkbox]"), function (a) {
      a.checked = true;
    });
    this.groups.forEach(function (a) {
      return a.list.forEach(function (b) {
        return b.checked = true;
      });
    });
  }.bind(this);

  this.setClear = function () {
    Array.prototype.forEach.call(this.root.querySelectorAll("input[type=checkbox]"), function (a) {
      a.checked = false;
    });
    this.groups.forEach(function (a) {
      return a.list.forEach(function (b) {
        return b.checked = false;
      });
    });
  }.bind(this);

  this.on("mount", function () {
    return _this9.update();
  });
  this.on("update", function () {
    if (!_this9.noupdate) {
      if (_this9.opts.data) {
        _this9.groups = _this9.opts.data;
      }

      _this9.tempkeys = _this9.groups.reduce(function (r, a) {
        r[a.name] = a.list.reduce(function (s, b) {
          if (b.checked) {
            s[b.name] = true;
          }

          return s;
        }, {});
        return r;
      }, {});
    }

    _this9.noupdate = false;
    var x = _this9.tempkeys;
    Object.keys(x).forEach(function (a) {
      Object.keys(x[a]).forEach(function (b) {
        _this9.groups.filter(function (c) {
          return c.label == a;
        }).forEach(function (d) {
          return d.list.forEach(function (e) {
            return e.checked = x[a][e.name];
          });
        });
      });
    });
  });
});
riot.tag2('filter-group', '<wg-expandable icon="{icon}" filtered="{filtered}" count="{count}" label="{label}"> <filter-item each="{parent.checks}" oncheck="{parent.parent.check}"></filter-item> </wg-expandable>', 'filter-group .filtered,[data-is="filter-group"] .filtered{ background-image: url(/assets/filter.png); height: 11px; display: inline-block; background-position: center; width: 20px; background-color: transparent; background-size: contain; margin-left: 10px; margin-right: 10px; } filter-group .filter-label,[data-is="filter-group"] .filter-label{ line-height: 39px; border-bottom: 1px solid white; position: relative; padding-left: 46px; display: block; } filter-group input[type="checkbox"],[data-is="filter-group"] input[type="checkbox"]{ height: 0px; width: 0px; border: none; outline: none; padding: 0; margin: 0; } filter-group input[type="checkbox"]:before,[data-is="filter-group"] input[type="checkbox"]:before{ content: ""; display: block; height: 24px; width: 24px; background-color: white; top: 7px; left: 20px; position: absolute; } filter-group input[type="checkbox"]:checked:after,[data-is="filter-group"] input[type="checkbox"]:checked:after{ content: \'\'; position: absolute; left: 23px; top: 11px; transform: rotate(-45deg); width: 17px; height: 8px; border-bottom: 1px solid black; border-left: 1Px solid black; } filter-group .boxlabel,[data-is="filter-group"] .boxlabel{ display: inline-block; margin-left: 5px; }', '', function (opts) {
  var _this11 = this;

  this.filtered = false;

  this.check = function (e) {
    var _this10 = this;

    e.item.checked = e.currentTarget.checked;
    this.parent.tempkeys[this.name][e.item.name] = e.currentTarget.checked;
    this.filtered = Object.keys(this.parent.tempkeys[this.name]).some(function (a) {
      return _this10.parent.tempkeys[_this10.name][a];
    });
    this.count = Object.keys(this.parent.tempkeys[this.name]).filter(function (a) {
      return _this10.parent.tempkeys[_this10.name][a];
    }).length;
    this.parent.noupdate = true;
    this.update();
  }.bind(this);

  this.on("mount", function () {
    return _this11.update();
  });
  this.on("update", function () {
    var _this12 = this;

    if (!this.parent.noupdate) {
      this.checks = this.parent.groups.reduce(function (r, a) {
        if (_this12.name == a.name) {
          return a.list;
        } else {
          return r;
        }
      }, []);
      this.filtered = this.checks.some(function (a) {
        return a.checked;
      });
      this.count = this.checks.filter(function (a) {
        return a.checked;
      }).length;
    }
  });
});
riot.tag2('filter-item', '<div class="{classes}"><label><input change="{check2}" type="checkbox" checked="{checked}"><span class="boxlabel">{name}</span></label> <rg-date ref="rgdatefrom" if="{from}" date="{from}" class="date"></rg-date> <rg-date ref="rgdateto" if="{to}" date="{to}" class="date"></rg-date> </div>', 'filter-item,[data-is="filter-item"]{ position: relative; } filter-item label,[data-is="filter-item"] label{ display: inline-block; width: 100%; } filter-item .large,[data-is="filter-item"] .large{ display: flex; flex-wrap: wrap; height: auto; } filter-item rg-date,[data-is="filter-item"] rg-date{ flex-basis: 100%; width: 100%; } filter-item .large rg-date,[data-is="filter-item"] .large rg-date{ top: 0px; line-height: initial; } filter-item rg-date .field,[data-is="filter-item"] rg-date .field{ background-color: transparent; border: none; outline: none; display: none; }', 'each="{checks}"', function (opts) {
  var _this13 = this;

  this.classes = {
    "b-dark": false,
    "filter-label": true,
    "large": false
  };

  this.check2 = function (e) {
    this.opts.oncheck(e);
  }.bind(this);

  this.on("mount", function () {
    _this13.classes["large"] = !!_this13.dateRange;

    if (_this13.classes.large) {
      _this13.refs.rgdatefrom.on("open", function () {
        _this13.refs.rgdateto.close();

        _this13.refs.rgdateto.update();
      });

      _this13.refs.rgdateto.on("open", function () {
        _this13.refs.rgdatefrom.close();

        _this13.refs.rgdatefrom.update();
      });
    }

    _this13.update();
  });
  this.on("update", function () {
    _this13.classes["b-dark"] = _this13.checked;
  });
});
riot.tag2('footer-main', '<footer> <button class="journey {active:journey}" click="{journeyPlanner}">{app.conf.buttons.journeyPlanner||⁗Journey planner⁗}</button> <button class="smartview {active:smartview}" click="{map}">Map View</button> <button class="events {active:events}" click="{what}">What\'s On</button> </footer>', 'footer-main footer,[data-is="footer-main"] footer{ border-top: 1px solid black } footer-main footer button:first-child,[data-is="footer-main"] footer button:first-child{ border-left: 0px; } footer-main footer button,[data-is="footer-main"] footer button{ cursor: pointer; } footer-main .active,[data-is="footer-main"] .active{ background-color: black; color: white; } footer-main .journey,[data-is="footer-main"] .journey{ background-image: url("/assets/icons3/plan_my_trip.svg"); } footer-main .smartview,[data-is="footer-main"] .smartview{ background-image: url("/assets/c/mapicon.svg"); } footer-main .events,[data-is="footer-main"] .events{ background-image: url("/assets/icons3/whats_on.svg"); } footer-main .journey.active,[data-is="footer-main"] .journey.active{ background-image: url("/assets/icons3/plan_my_trip-white.svg"); } footer-main .smartview.active,[data-is="footer-main"] .smartview.active{ background-image: url("/assets/c/mapicon-white.svg"); } footer-main .events.active,[data-is="footer-main"] .events.active{ background-image: url("/assets/icons3/whats_on-white.svg"); }', '', function (opts) {
  this.smartview = false;
  this.journey = false;
  this.events = false;
  this.on("update", function () {
    this.smartview = false;
    this.journey = false;
    this.events = false;
    this[this.button] = true;
  });
  this.on("mount", function () {
    app.tags.footer = this;
  });

  this.map = function () {
    if (!this.smartview) {
      if (app.routed.page && app.routed.page.length >= 2 && Array.isArray(app.routed.page)) {
        var pulse = app.pages[app.routed.page[0]].nodes.filter(function (a) {
          return a.name == app.routed.page[1];
        }).pop();

        if (!app.pulseRoute(pulse, false, true)) {
          route("smartmap", false, this.journey || this.events);
        }
      } else {
        route("smartmap", false, this.journey || this.events);
      }
    } else {
      history.back();
    }
  }.bind(this);

  this.what = function () {
    if (!this.events) {
      route("events", false, this.journey || this.smartview);
    } else {
      history.back();
    }
  }.bind(this);

  this.journeyPlanner = function () {
    if (!this.journey) {
      route("journey", false, this.events || this.smartview);
    } else {
      history.back();
    }
  }.bind(this);
});
riot.tag2('gallery', '<filter ref="filter" if="{showFilter}" hide="{!showFilter}" data="{filterData}" return="{filteredData}"></filter> <loading if="{loading}"></loading> <div class="items"> <gallery-item hide="{loading||showFilter}" each="{filteredList()}" hide="{hide||hideMain}"></gallery-item> <div if="{filteredList().length==0 && !loading && !showFilter}"> {app.conf.texts.filterZero} </div> </div>', 'gallery.parent-filter,[data-is="gallery"].parent-filter{ padding: 0px; display: block; } gallery,[data-is="gallery"]{ padding: 20px; } gallery,[data-is="gallery"],gallery .items,[data-is="gallery"] .items{ display: flex; flex-wrap: wrap; } gallery .panel,[data-is="gallery"] .panel{ width: 100%; flex-basis: 100%; padding: 10px 0; }', 'class="b-gray {parent-filter:showFilter}"', function (opts) {
  var _this14 = this;

  this.list = [];
  this.loading = false;
  this.filterData = [];
  this.filteredData = {
    data: [],
    set: function set(newdata) {
      this.data = newdata;
    }
  };

  this.doFilter = function (e) {
    e.item.checked = e.target.checked;

    if (e.item.checked) {
      this.filterPanel.filter(function (a) {
        return a != e.item && (!a.options.radio || a.options.radio == e.item.options.radio);
      }).forEach(function (a) {
        a.checked = false;
      });
    }

    this.list.forEach(function (b) {
      b.hide = false;
    });
    this.filterPanel.filter(function (a) {
      return a.checked;
    }).forEach(function (a) {
      this.list.forEach(function (b) {
        if (b.values.every(function (c) {
          return c != a.value;
        })) {
          b.hide = true;
        }
      });
    }.bind(this));
  }.bind(this);

  this.showMapLayer = function (e) {
    var data = {
      detail: this.pulse['map-layer'],
      clear: true
    };
    route("map", data);
  }.bind(this);

  this.filteredList = function () {
    return _this14.list.filter(function (a) {
      return !a.hide || a.show;
    });
  };

  this.on("mount", function () {});
  this.on("update", function () {
    if (app.pages[app.page] && app.pages[app.page].nodes) {
      _this14.pulse = app.pages[app.page].nodes.filter(function (a) {
        return a.name == _this14.module;
      }).pop();
    }

    app.trigger("list/update/" + _this14.module, _this14.list);

    if (_this14.filterData.length == 0) {
      app.trigger("list/filter-data/" + _this14.module, _this14.filterData);
    }

    console.log(_this14);
  });
  this.on("list/filter", function () {
    var _this15 = this;

    this.filteredData.data.forEach(function (a) {
      _this15.filterData.filter(function (b) {
        return b.name == a.name;
      }).forEach(function (b) {
        a.list.forEach(function (c) {
          b.list.filter(function (d) {
            return d.name == c.name;
          }).forEach(function (d) {
            return d.checked = c.checked;
          });
        });
      });
    });
    this.filter();
  });

  this.filter = function (e) {
    var _this16 = this;

    app.trigger("list/filter/apply/" + this.module, {
      list: this.list,
      filters: this.filterData,
      finished: function finished() {
        _this16.update();
      }
    });
  };
});
riot.tag2('gallery-item', '<div class="label" click="{detail}"><img riot-src="{label}"></div>', 'gallery-item.detail { position: absolute; transition: all 1s; opacity: 0.9; z-index: 100; } gallery-item img,[data-is="gallery-item"] img{ width: 100%; display: block; } gallery-item { flex-basis: 50%; flex-shrink: 1; box-sizing: border-box; padding: 10px 10px 0px 0px; position: relative; } gallery-item.large { flex-basis: 100%; } gallery-item:nth-child(2n) { padding-right: 0px; padding-left: 5px; } gallery-item:nth-child(2n+1) { padding-left: 0px; padding-right: 5px; } gallery-item .link,[data-is="gallery-item"] .link{ border-top: 2px solid black; border-right: 2px solid black; transform: rotate(45deg); height: 20px; width: 20px; margin: 0px 10px; }', 'riot-style="{style}" class="b-gray {large: data.large}"', function (opts) {
  var _this17 = this;

  this.test = function (e) {
    var self = this;
    console.log(this.root.offsetTop, this.root.offsetLeft, this.root);
    var bk = {
      top: this.root.offsetTop,
      left: this.root.offsetLeft,
      height: this.root.offsetHeight,
      width: this.root.offsetWidth
    };

    if (self.root.classList.toggle("detail")) {
      self.root.style.top = bk.top + "px";
      self.root.style.left = bk.left + "px";
      self.root.style.width = bk.width + "px";
      self.root.style.height = bk.height + "px";
      setTimeout(function () {
        self.root.style.top = "50px";
        self.root.style.left = "0px";
        self.root.style.width = "100%";
        self.root.style.height = "auto";
      }, 0);
    }
  }.bind(this);

  this.detail = function (e) {
    app.trigger("list/click/" + this.parent.module, e.item);
  }.bind(this);

  this.on("mount", function () {
    return _this17.update();
  });
  this.on("update", function () {});
});
riot.tag2('header-main', '<div class="headerdiv b-gray"> <header-page></header-page> <location onclick="{locationclick}"></location> </div>', 'header-main>div,[data-is="header-main"]>div{ position: relative; } header-main .change_label,[data-is="header-main"] .change_label{ margin-bottom: 5px; display: block; } header-main .location-menu li.bookmark,[data-is="header-main"] .location-menu li.bookmark{ padding-left: 33px; background-image: url(assets/location_1_wh.svg); background-position: -4px center; background-size: auto 80%; } header-main .removex,[data-is="header-main"] .removex{ float: right; padding: 3px; margin: 0; width: 16px; height: 16px; margin-right: 20px; position: relative; } header-main .removex:after,[data-is="header-main"] .removex:after{ content: " "; position: absolute; top: 6px; left: 2px; width: 12px; height: 4px; background: white; } header-main .location-menu,[data-is="header-main"] .location-menu{ cursor: default; user-select: none; } header-main .location-menu ul,[data-is="header-main"] .location-menu ul{ margin: 0; } header-main .location-menu li,[data-is="header-main"] .location-menu li{ padding: 7px 0px; position: relative; } header-main .location-menu li:after,[data-is="header-main"] .location-menu li:after{ content: " "; position: absolute; bottom: 0px; left: -40px; width: calc(100% + 40px); height: 2px; background: white; } header-main .location-menu li:last-child:after,[data-is="header-main"] .location-menu li:last-child:after{ height: 0px; } header-main .location-menu li:first-child:before,[data-is="header-main"] .location-menu li:first-child:before{ content: " "; position: absolute; top: 0px; left: -40px; width: calc(100% + 40px); height: 1px; background: black; } header-main input#change-location-search,[data-is="header-main"] input#change-location-search{ flex-grow: 1; padding: 6px 4px; box-sizing: border-box; border: 1px solid black; } header-main .change-location-form,[data-is="header-main"] .change-location-form{ display: flex; padding-right: 20px; } header-main .change-location-form input,[data-is="header-main"] .change-location-form input{ margin-right: 5px; } header-main .button,[data-is="header-main"] .button{ margin-top: 0px; border: 1px solid var(--bg-color-dark); position: relative; padding: 1px 5px 2px 5px; background-color: var(--bg-color-dark); } header-main .change-location-form input:last-child,[data-is="header-main"] .change-location-form input:last-child{ margin-right: 0px; } header-main current-date,[data-is="header-main"] current-date{ padding-left: 10px; } header-main .location-menu,[data-is="header-main"] .location-menu{ position: absolute; top: 100%; right: 0; z-index: 999; width: 100%; } header-main ul,[data-is="header-main"] ul{ list-style: none; } header-main .search,[data-is="header-main"] .search{ background-position: center; background-size: auto 60%; height: 100%; width: 50px; position: absolute; top: 0px; right: 85px; border-left: 1px solid black; } header-main .search span,[data-is="header-main"] .search span{ background-image: url("/assets/icons3/search_light.svg"); background-position: center; display: block; font-size: 34px; position: relative; height: 32px; width: 34px; } header-main .search.active span,[data-is="header-main"] .search.active span{ background-image: url("/assets/icons3/search_light-white.svg"); }', '', function (opts) {
  this.submenu = false;
  this.activeSub = null;
  this.search = false;
  this.locationMenu = {
    showForm: false,
    autocompleteList: [],
    current: false,
    showMenu: false
  };

  this.showform = function (e) {
    this.locationMenu.showForm = true;
  }.bind(this);

  this.hideform = function (e) {
    this.locationMenu.showForm = false;
  }.bind(this);

  this.fromremember = function (e) {
    if (app.location.lastGoogleAjax) app.location.lastGoogleAjax.abort();
    app.location.geoStop();
    app.location.current.change(e.item);
    var ret = {};
    ret.name = e.item.title;
    ret.obj = e.item;
    ret.point = e.item.point;
    ret.longName = e.item.titleLong;
    app.trigger("geolocation/found", ret);
    this.locationMenu.showMenu = false;
  }.bind(this);

  this.removeremember = function (e) {
    app.location.remember = app.location.remember.filter(function (a) {
      return e.item.titleLong != a.titleLong;
    });
    app.storage.set({
      stored_locations: app.location.remember
    });
    e.stopPropagation();
  }.bind(this);

  this.rememberlocation = function (e) {
    app.location.remember.push(app.location.current.get());
    app.storage.set({
      stored_locations: app.location.remember
    });
  }.bind(this);

  this.changelocation = function (e) {
    this.locationMenu.current.getMore(this.locationMenu.current, function (data) {
      var ret = {};
      ret.name = data.address_components[1].long_name;
      ret.obj = data;
      ret.point = data.geometry.location;
      ret.longName = [data.address_components[0].long_name, data.address_components[1].long_name].join(" ");
      app.trigger("geolocation/found", ret);
      app.location.current.change({
        point: ret.point,
        title: ret.name,
        titleLong: ret.longName,
        source: "search"
      });
      app.location.geoStop();

      if (app) {
        app.lastPosition = ret.point;
      }

      app.trigger("geolocation/changed", app.location.current);
    });
    this.hideform(e);
    this.locationMenu.showMenu = false;
  }.bind(this);

  this.findlocation = function (e) {
    app.location.geocode(this.update, true);
    this.locationMenu.showMenu = false;
  }.bind(this);

  this.locationclick = function (e) {
    this.locationMenu.showMenu = !this.locationMenu.showMenu;
  }.bind(this);

  this.headerclick = function (e) {}.bind(this);

  this.on("mount", function () {
    app.tags.nav = this;
    app.tags.title = this.refs.maintitle;
    this.update();
  });
  this.on("update", function () {});
});
riot.tag2('header-page', '<div onclick="{goback}" class="title-wrapper {\'back-wrapper\':back}"> <h1 ref="maintitle">{title?title:\'SmartView\'}</h1> <button if="{back}" class="back f-p4">Back</button> <button if="{icon}" riot-style="background-image:url({icon})" class="titleicon roundcorner"></button> </div>', 'header-page .title-wrapper,[data-is="header-page"] .title-wrapper{ position: relative; } header-page button,[data-is="header-page"] button{ position: absolute; left: 0px; top: 0px; display: block; background-position: left center; margin: 0; } header-page .done,[data-is="header-page"] .done,header-page .filterbutton,[data-is="header-page"] .filterbutton{ right: 20px; left: auto; padding: 0; } header-page .title-wrapper .back,[data-is="header-page"] .title-wrapper .back{ height: 0px; width: 0px; top: 0px; left: 0px; background-size: 25px; background-color: transparent; } header-page .title-wrapper .back,[data-is="header-page"] .title-wrapper .back,header-page .title-wrapper .titleicon,[data-is="header-page"] .title-wrapper .titleicon{ padding: 0; position: absolute; text-indent: -9999px; border: none; outline: none; } header-page h2,[data-is="header-page"] h2{ text-align: center; margin: 0; text-transform: capitalize; }', 'class="b-white "', function (opts) {
  this.title = "SmartView";
  this.description = "Realtime information in your pocket.";
  this.back = false;
  this.close = false;
  this.done = false;
  this.filter = false;
  this.filterOpen = false;
  this.mapkey = false;
  this.icon = "";

  this.home = function () {
    route("");
  }.bind(this);

  this.goback = function (e) {
    if (this.back) {
      if (typeof this.back === "function") {
        this.back();
      } else {
        window.history.back();
      }
    }
  }.bind(this);

  this.goclose = function (e) {
    if (typeof this.close === "function") {
      this.close();
    } else {
      window.history.back();
    }
  }.bind(this);

  this.godone = function (e) {
    if (typeof this.done === "function") {
      this.done();
    } else {
      window.history.back();
    }
  }.bind(this);

  this.on("mount", function () {
    app.tags.header = this;
  });

  this.shouldUpdate = function (newData, newOpts) {
    if (newData && typeof newData.filter == "undefined") {
      this.filter = false;
    }

    if (newData && typeof newData.mapkey == "undefined") {
      this.mapkey = false;
    }

    return true;
  }.bind(this);

  this.on("update", function () {
    if (this.back) {
      this.close = false;
      this.done = false;
    }

    var menuitem = app.menu.filter(function (a) {
      return a.name == app.page;
    }).pop();
    this.icon = menuitem && menuitem.icon ? menuitem.icon : "";
    app.header.setTitle(this.title);
    app.header.setDescription(this.description);
  });
});
riot.tag2('header-top', '<menu-burger></menu-burger> <current-date></current-date> <search-tag></search-tag>', '', '', function (opts) {});
riot.tag2('journey-planner', '<div class="box-filter"> <input onchange="{changemode}" checked="{modes.walking}" type="checkbox" id="walking"><label class="f-p4" for="walking">Walk</label> <input onchange="{changemode}" checked="{modes.bicycling}" type="checkbox" id="bicycling"><label class="f-p4" for="bicycling">Cycle</label> <input onchange="{changemode}" checked="{modes.bus}" type="checkbox" id="bus"><label class="f-p4" for="bus">Bus</label> <input onchange="{changemode}" checked="{modes.driving}" type="checkbox" id="driving"><label class="f-p4" for="driving">Drive</label> </div> <section class="content b-light"> <form submit="{plan}"> <div class="input-group"> <label>From</label> <div class="input"> <input class="f-p4" id="journey-input-from" slist="journey-input-from-list" input="{inputForm}" type="text" name="from" ref="from" riot-value="{from}" change="{changeFrom}"> <datalist id="journey-input-from-list"></datalist> </div> </div> <div class="input-group"> <label>To</label> <div class="input"> <input class="f-p4" id="journey-input-to" xautocomplete="address-line1" slist="journey-input-to-list" input="{inputForm}" type="text" name="to" ref="to" riot-value="{to}" change="{changeTo}"> <datalist id="journey-input-to-list"></datalist> </div> </div> <button type="submit" class="submit button">Plan my trip</button> </form> <journey-results class="results" if="{results}"></journey-results> </section>', 'journey-planner { width: 100%; background-color: white; } journey-planner .box-filter,[data-is="journey-planner"] .box-filter{ margin-top: 50px; } journey-planner .box-filter label,[data-is="journey-planner"] .box-filter label{ background-position: left center; box-sizing: border-box; border: 3px solid white; border-right-width: 0px; color: black; background-color: orange; padding: 4px 0px 10px 44px; display: inline-block; background-size: 30px 30px; } @media all and (max-width: 600px) { journey-planner .box-filter label,[data-is="journey-planner"] .box-filter label{ } } journey-planner .box-filter label:last-child,[data-is="journey-planner"] .box-filter label:last-child{ border-right-width: 3px; } journey-planner .box-filter :checked+label,[data-is="journey-planner"] .box-filter :checked+label{ color: white; } journey-planner #bus+label,[data-is="journey-planner"] #bus+label{ background-image: url("/assets/icons3/bus.svg"); } journey-planner #walking+label,[data-is="journey-planner"] #walking+label{ background-image: url("/assets/icons2/svg/onthego_black.svg"); } journey-planner #driving+label,[data-is="journey-planner"] #driving+label{ background-image: url("/assets/icons3/car.svg"); } journey-planner #bicycling+label,[data-is="journey-planner"] #bicycling+label{ background-image: url("/assets/icons3/on_the_go.svg"); } journey-planner #bus:checked+label,[data-is="journey-planner"] #bus:checked+label{ background-image: url("/assets/icons3/bus-white.svg"); } journey-planner #walking:checked+label,[data-is="journey-planner"] #walking:checked+label{ background-image: url("/assets/icons2/svg/onthego_white.svg"); } journey-planner #driving:checked+label,[data-is="journey-planner"] #driving:checked+label{ background-image: url("/assets/icons3/car-white.svg"); } journey-planner #bicycling:checked+label,[data-is="journey-planner"] #bicycling:checked+label{ background-image: url("/assets/icons3/on_the_go-white.svg"); } journey-planner .content,[data-is="journey-planner"] .content{ padding: 20px; overflow: hidden; } journey-planner .input,[data-is="journey-planner"] .input{ padding: 10px 0px; } journey-planner input[type="text"],[data-is="journey-planner"] input[type="text"]{ width: 100%; padding: 6px 4px; box-sizing: border-box; border: 1px solid black; } journey-planner .input-group,[data-is="journey-planner"] .input-group{ margin-bottom: 10px; } journey-planner journey-results>div,[data-is="journey-planner"] journey-results>div{ border-top: 1px solid white; padding: 10px 0px; } journey-planner journey-results button,[data-is="journey-planner"] journey-results button{ float: right; padding: 5px; border: 1px solid black; } journey-planner journey-results button:hover,[data-is="journey-planner"] journey-results button:hover{ background: black; color: white; } journey-planner button.submit,[data-is="journey-planner"] button.submit{ margin: 10px 0px; float: right; width: 100%; } journey-planner strong,[data-is="journey-planner"] strong{ display: block; }', '', function (opts) {
  var _this18 = this;

  this.modes = {
    walking: false,
    bicycling: false,
    bus: false,
    driving: false
  };
  var self = this;
  var autorun = false;
  var fromLocationChanged = false;
  this.on("mount", function () {
    _lib.scrollByMouse(_this18.root.querySelector(".box-filter"));

    var autoOptions = {
      selector: "#journey-input-to",
      source: function source(t, r) {
        _maps.service(t, function (a) {
          r(a.reduce(function (r, i) {
            return r.concat(r, [i.text]);
          }, []).filter(function (item, pos, self) {
            return self.indexOf(item) == pos;
          }));
        });
      },
      onSelect: function onSelect() {
        if (_this18.refs.from.value.length > 0 && _this18.refs.to.value.length > 0) {
          _this18.plan();
        }
      }
    };
    _this18.toAuto = new autoComplete(autoOptions);
    autoOptions.selector = "#journey-input-from";
    _this18.fromAuto = new autoComplete(autoOptions);
    app.on("geolocation/changed", function (data) {
      if (!fromLocationChanged) {
        app.location.geocode(function (d2) {
          _this18.from = app.location.current.titleLong;
          _this18.fromLocation = app.location.current.point;

          _this18.update();
        });
      }
    });
    app.on("geolocation/found", function (data) {
      if (!fromLocationChanged) {
        _this18.from = app.location.current.titleLong;
        _this18.fromLocation = app.location.current.point;

        _this18.update();
      }
    });
  });

  this.isfromdatalist = function (e) {}.bind(this);

  this.inputForm = function (e) {}.bind(this);

  this.changemode = function (e) {
    this.modes[e.target.id] = e.target.checked;
    this.plan();
  }.bind(this);

  this.plan = function (e) {
    if (e) {
      e.preventDefault();
      e.preventUpdate = true;
    }

    if (this.refs.from.value.length > 0 && this.refs.to.value.length > 0) {
      this.results = [];
      var none = !Object.keys(this.modes).reduce(function (ret, a) {
        return ret || this.modes[a];
      }.bind(this), false);
      Object.keys(this.modes).forEach(function (a) {
        if (this.modes[a] || none) {
          if (a == "bus") metroPlanner();else googlePlanner(a);
        }
      }.bind(this));
    } else return;
  }.bind(this);

  this.changeFrom = function (e) {
    this.fromLocation = false;
    fromLocationChanged = true;
  }.bind(this);

  this.changeTo = function (e) {
    this.toLocation = false;
  }.bind(this);

  this.on("update", function () {
    if (!this.from) {
      this.from = app.location.current.titleLong;
      this.fromLocation = app.location.current.point;
    }

    if (this.from == "null") {
      this.from = "";
      this.fromLocation = false;
    }

    if (this.fromLocation && this.toLocation && this.autorun) {
      this.autorun = false;
      this.plan();
    }

    if (this.scroll) {
      this.scroll = false;

      _lib.animateScroll(document.querySelector("html"), "vertical", 280, 20);
    }

    if (this.results) this.results.forEach(function (a) {
      if (a.text) {
        a.text = a.text.charAt(0).toUpperCase() + a.text.slice(1);
      }
    });
  });

  var googlePlanner = function googlePlanner(type) {
    type = type || "driving";
    var fromQuery = self.fromLocation ? self.fromLocation : self.refs.from.value + ", Canterbury";
    var toQuery = self.toLocation ? self.toLocation : self.refs.to.value + ", Canterbury";
    app.promise.directions().then(function (directions) {
      _maps.directionsService.route({
        language: "en",
        origin: fromQuery,
        destination: toQuery,
        travelMode: google.maps.TravelMode[type.toUpperCase()]
      }, function (response, status) {
        for (var i in response.routes) {
          var route = {
            mode: type,
            label: "",
            text: "",
            distance: "",
            duration: "",
            legs: [],
            line: response.routes[i].overview_path,
            data: response
          };
          var firstleg;
          var lastleg;

          for (var j in response.routes[i].legs) {
            var leg = response.routes[i].legs[j];
            if (j == 0) firstleg = leg;
            if (j == response.routes[i].legs.length - 1) lastleg = leg;
            route.distance = leg.distance.text;
            route.duration = leg.duration.text;
            route.legs.push(leg);
          }

          route.text = firstleg.start_address.split(",")[0] + " - " + response.routes[i].summary + ' - ' + lastleg.end_address.split(",")[0];
          self.results.push(route);
        }

        self.update({
          scroll: true
        });
      });
    });
  };

  var metroPlanner = function metroPlanner() {
    var findJourney = function findJourney(from, to) {
      _lib.ajax("get", "/app/router/journey.php?bus&from=" + from + "&to=" + to, null, function (data) {
        var json = JSON.parse(data);

        if (json.Status && json.Status.Details && json.Status.Details.length > 0 && json.Status.Details[0].Code == 7) {} else {
          json.Journeys.forEach(function (jrn, i) {
            var route = {
              mode: "bus",
              label: "",
              text: "",
              distance: "",
              time: "",
              duration: "",
              legs: [],
              line: ""
            };
            var leghtml = "";
            var buslist = [];
            var lis = [];
            var polyline = [];
            jrn.Legs.forEach(function (leg) {
              var type = leg.__type.split(":")[0];

              polyline.push(leg.Polyline);

              switch (type) {
                case "WalkLeg":
                  var polylineobj = [];
                  var coo = leg.Polyline.split(";");

                  for (var ii in coo) {
                    var x = coo[ii].split(",");
                    polylineobj.push(new google.maps.LatLng({
                      lat: parseFloat(x[0]),
                      lng: parseFloat(x[1])
                    }));
                  }

                  var len = google.maps.geometry.spherical.computeLength(polylineobj) / 1000;
                  len = Math.round(len * 10) / 10;
                  leghtml = "walk " + leg.DurationMinutes + " mins";
                  if (leg.DestinationLocationDescription) leghtml += " to " + leg.DestinationLocationDescription;
                  leghtml += " distance traveled " + len + "km";
                  break;

                case "TripLeg":
                  var polylineobj = [];
                  var coo = leg.Polyline.split(";");

                  for (var ii in coo) {
                    var x = coo[ii].split(",");
                    polylineobj.push(new google.maps.LatLng({
                      lat: parseFloat(x[0]),
                      lng: parseFloat(x[1])
                    }));
                  }

                  var len = google.maps.geometry.spherical.computeLength(polylineobj) / 1000;
                  len = Math.round(len * 10) / 10;
                  leghtml = "bus " + leg.RouteName + " " + leg.DurationMinutes + " mins to " + leg.DestinationLocationDescription + " distance traveled " + len + "km";
                  buslist.push(leg.RouteCode);
                  break;
              }

              lis.push(leghtml);
              route.legs.push(leg);
            });
            var polylineobj = [];
            var coo = polyline.join(";").split(";");

            for (var ii in coo) {
              var x = coo[ii].split(",");
              polylineobj.push({
                lat: parseFloat(x[0]),
                lng: parseFloat(x[1])
              });
            }

            route.line = polylineobj;
            route.text = lis.join(" <br> ");
            route.label = buslist.join(" - ");
            route.duration = jrn.DurationMinutes + " mins";
            route.time = jrn.DepartTime.split("T").pop();
            self.results.push(route);
          });
          self.update({
            scroll: true
          });
        }
      });
    };

    if (self.fromLocation) {
      var json = self.fromLocation;

      if (self.toLocation) {
        findJourney(JSON.stringify(self.fromLocation), JSON.stringify(self.toLocation));
      } else {
        app.trigger("reverselocation", function (loc) {
          self.toLocation = loc;
          findJourney(JSON.stringify(self.fromLocation), JSON.stringify(self.toLocation));
        }, self.refs.to.value);
      }
    } else {
      app.trigger("reverselocation", function (loc) {
        self.fromLocation = loc;

        if (self.toLocation) {
          findJourney(JSON.stringify(self.fromLocation), JSON.stringify(self.toLocation));
        } else {
          app.trigger("reverselocation", function (loc) {
            self.toLocation = loc;
            findJourney(JSON.stringify(self.fromLocation), JSON.stringify(self.toLocation));
          }, self.refs.to.value);
        }
      }, self.refs.from.value);
    }
  };
});
riot.tag2('journey-results', '<div each="{parent.results}"> <span class="buttons"><button class="location" click="{mapview}"></button></span> <div class="info"> <span class="mode {mode}"></span> <div if="{time}">Time: {time}</div> <div if="{distance}">Distance: {distance}</div> <div if="{duration}">Duration: {duration}</div> <div if="{label}">Bus lines: {label}</div> </div> <div style="clear:both"> <raw content="{text}"></raw> </div> </div>', 'journey-results .bus,[data-is="journey-results"] .bus{ background-image: url("/assets/icons3/bus.svg"); } journey-results .walking,[data-is="journey-results"] .walking{ background-image: url("/assets/icons2/svg/onthego_black.svg"); } journey-results .driving,[data-is="journey-results"] .driving{ background-image: url("/assets/icons3/car.svg"); } journey-results .bicycling,[data-is="journey-results"] .bicycling{ background-image: url("/assets/icons3/on_the_go.svg"); ; } journey-results .buttons button,[data-is="journey-results"] .buttons button{ width: 32px; height: 32px; } journey-results .buttons,[data-is="journey-results"] .buttons{ display: block; float: right; } journey-results .mode,[data-is="journey-results"] .mode{ text-transform: capitalize; display: block; height: 34px; width: 34px; background-size: contain; float: left; margin: 5px 5px 5px 0px; }', '', function (opts) {
  var self = this;
  this.journies = [];
  this.modes = {
    "walking": "Walk",
    "bicycling": "Bike",
    "driving": "Drive",
    "bus": "Bus"
  };

  this.mapview = function (e) {
    app.one("route", function (a, b, c) {
      app.promise.map().then(function () {
        app.journies.clear();
        var j = app.journies.add(e.item.line, e.item);
        self.journies.push(j.poly);
        setTimeout(function () {
          app.gmap.map.fitBounds(j.bounds);
          j.animStart();
        }, 100);
      });
    });
    route("map", {
      skipRecenter: true
    });
  }.bind(this);

  this.on("update", function () {});
});
riot.tag2('legend-map', '<div class="legend" if="{app.maplegend.isActive()}"> <div if="{app.maplegend.filter || app.maplegend.doesCollapse()}" class="filter"> <button if="{app.maplegend.doesCollapse() && !filterShow}" click="{toggleLegend}">{hideButton}</button> <virtual if="{app.maplegend.filter}"> <button click="{showFilter}">{filterButton}</button> <button if="{filterShow && filterChanged}" click="{applyFilter}">Apply Filter</button> <button if="{filterUsed}" click="{cancelFilter}">Cancel Filter</button> <div if="{filterShow}" style="max-height:66vh;overflow:auto"> <table if="{filterShow}"> <tr each="{app.maplegend.filter.options}"> <th if="{heading}" colspan="{cols||1}"> {label} </th> <td if="{!heading}"> <input change="{checkFilter}" type="checkbox" checked="{checked}"> {label} </td> <td if="{value}"> {value} </td> </tr> </table> </div> </virtual> </div> <table class="legendtable" hide="{(app.maplegend.filter && filterShow) || (app.maplegend.doesCollapse() && legendHide)}"> <tr each="{app.maplegend.getList()}" hide="{hidden}"> <td> <div if="{line}" class="line" riot-style="background:{line}"></div> <div if="{icon}" class="icon" riot-style="background-image:url({icon})"></div> </td> <td> <span if="{!link}">{label}</span> <a if="{link}" href="{link}" target="_blank">{label}</a> </td> </tr> </table> </div>', 'legend-map .filter td,[data-is="legend-map"] .filter td{ padding-left: 20px; position: relative; } legend-map .filter th,[data-is="legend-map"] .filter th{ padding-top: 10px; border-bottom: 1Px solid black; text-align: left; } legend-map .filter input[type="checkbox"]:before,[data-is="legend-map"] .filter input[type="checkbox"]:before{ border: 1px solid black; } legend-map .filter input[type="checkbox"]:checked:after,[data-is="legend-map"] .filter input[type="checkbox"]:checked:after{ border-bottom: 2px solid black; border-left: 2Px solid black; } legend-map .line,[data-is="legend-map"] .line{ position: absolute; height: 6px; width: 20px; left: 0; top: calc(50% - 3px); } legend-map .icon,[data-is="legend-map"] .icon{ height: 20px; width: 20px; background-size: contain; } legend-map .legendtable td:first-child,[data-is="legend-map"] .legendtable td:first-child{ position: relative; width: 20px; } legend-map,[data-is="legend-map"]{ padding: 10px; display: block; position: absolute; z-index: 98; top: 0px; left: 0px; max-width: 600px; background: rgba(255, 255, 255, 0.88) }', 'hide="{!app.maplegend.isActive()}"', function (opts) {
  var _this19 = this;

  this.filterButton = "Show Filter";
  this.hideButton = "Show Legend";
  this.filterUsed = false;
  this.filterChanged = false;
  this.filterShow = false;
  this.legendHide = false;
  this.list = [];

  var _boundsTT;

  var self = this;

  this.legendRefresh = function () {
    clearTimeout(_boundsTT);
    _boundsTT = setTimeout(function () {
      if (app.maplegend.isActive() && app.maplegend.getList().some(function (a) {
        return a.boundaryCheck;
      })) {
        app.maplegend.getList().forEach(function (a) {
          return a.hidden = true;
        });
        $mn.layers.getVisible().forEach(function (f) {
          app.maplegend.getList().forEach(function (a) {
            return a.hidden = !(!a.hidden || a.boundaryCheck && a.boundaryCheck(f));
          });
        });
        self.update();
      }

      $mn.one('bounds/changed', self.legendRefresh);
    }, 500);
  };

  this.on("mount", function () {
    $mn.off('bounds/changed', _this19.legendRefresh);
  });
  this.on("mount", function () {
    app.tags.mapLegend = _this19;
    $mn.on('bounds/changed', _this19.legendRefresh);

    _this19.update();
  });
  this.on("update", function () {
    _this19.legendRefresh();

    _this19.hideButton = _this19.legendHide ? "Show Legend" : "Hide Legend";
  });

  this.toggleLegend = function (e) {
    this.legendHide = !this.legendHide;
    this.hideButton = this.legendHide ? "Show Legend" : "Hide Legend";
  }.bind(this);

  this.checkFilter = function (e) {
    e.item.checked = e.target.checked;
    this.filterChanged = true;
  }.bind(this);

  this.applyFilter = function (e) {
    this.filterUsed = true;
    this.filterChanged = false;
    app.maplegend.filter.callBack(app.maplegend.filter.options);
    this.toggleFilter(false);
  }.bind(this);

  this.cancelFilter = function (e) {
    this.filterUsed = false;
    this.filterChanged = false;
    app.maplegend.filter.options.forEach(function (a) {
      if (a["default"]) a.checked = a["default"];else a.checked = false;
    });
    app.maplegend.filter.callBack(false);
    this.toggleFilter(false);
  }.bind(this);

  this.toggleFilter = function (status) {
    this.filterShow = status;
    this.filterButton = this.filterShow ? "Hide Filter" : "Show Filter";
  };

  this.showFilter = function (e) {
    this.toggleFilter(!this.filterShow);
  }.bind(this);
});
riot.tag2('list', '<filter ref="filter" if="{showFilter}" hide="{!showFilter}" data="{filterData}" return="{filteredData}"></filter> <loading if="{loading}"></loading> <list-item hide="{loading||showFilter}" each="{filteredList()}"></list-item> <div if="{filteredList().length==0 && !loading && !showFilter}"> {app.conf.texts.filterZero} </div>', '', 'class="b-gray"', function (opts) {
  var _this20 = this;

  this.list = [];
  this.loading = false;
  this.filterData = [];
  this.filteredData = {
    data: [],
    set: function set(newdata) {
      this.data = newdata;
    }
  };

  this.filteredList = function () {
    return _this20.list.filter(function (a) {
      return !a.hide || a.show;
    });
  };

  this.on("mount", function () {});
  this.on("update", function () {
    app.trigger("list/update/" + _this20.module, _this20.list, _this20.update);

    if (_this20.filterData.length == 0) {
      app.trigger("list/filter-data/" + _this20.module, _this20.filterData);
    }
  });
  this.on("list/filter", function () {
    var _this21 = this;

    this.filteredData.data.forEach(function (a) {
      _this21.filterData.filter(function (b) {
        return b.name == a.name;
      }).forEach(function (b) {
        a.list.forEach(function (c) {
          b.list.filter(function (d) {
            return d.name == c.name;
          }).forEach(function (d) {
            return d.checked = c.checked;
          });
        });
      });
    });
    this.filter();
  });

  this.filter = function (e) {
    var _this22 = this;

    app.trigger("list/filter/apply/" + this.module, {
      list: this.list,
      filters: this.filterData,
      finished: function finished() {
        _this22.update();
      }
    });
  };
});
riot.tag2('list-item', '<div class="label">{label}</div> <div class="note" if="{note}">{note}</div> <button class="link"></button>', 'list-item { display: flex; height: 60px; padding: 10px 0px; margin: 0px 20px; border-bottom: #ccc 2px solid; background-position: left center; align-items: center; } list-item .link,[data-is="list-item"] .link{ border-top: 2px solid black; border-right: 2px solid black; transform: rotate(45deg); height: 20px; width: 20px; margin: 0px 10px; } list-item .label,[data-is="list-item"] .label{ padding-left: 60px; flex-grow: 1; }', 'riot-style="{style}" class="b-gray" click="{detail}"', function (opts) {
  var _this23 = this;

  this.detail = function (e) {
    app.trigger("list/click/" + this.parent.module, e.item);
  }.bind(this);

  this.on("mount", function () {
    return _this23.update();
  });
  this.on("update", function () {});
});
riot.tag2('loading', '<div class="sk-folding-cube {opts.dataClasses}"> <div class="sk-cube1 sk-cube"></div> <div class="sk-cube2 sk-cube"></div> <div class="sk-cube4 sk-cube"></div> <div class="sk-cube3 sk-cube"></div> </div>', 'loading .td-margin,[data-is="loading"] .td-margin{ margin: -20px auto !important; } loading .sk-folding-cube,[data-is="loading"] .sk-folding-cube{ margin: 20px auto; width: 40px; height: 40px; position: relative; -webkit-transform: rotateZ(45deg); transform: rotateZ(45deg); position: absolute; left: 50%; margin-left: -20px; top: 50%; } loading .sk-folding-cube .sk-cube,[data-is="loading"] .sk-folding-cube .sk-cube{ float: left; width: 50%; height: 50%; position: relative; -webkit-transform: scale(1.1); -ms-transform: scale(1.1); transform: scale(1.1); } loading .sk-folding-cube .sk-cube:before,[data-is="loading"] .sk-folding-cube .sk-cube:before{ border-radius: 2px; box-shadow: 0px 0px 5px 2px rgb(242, 92, 117) inset; background-color: #098484; content: \'\'; position: absolute; top: 0; left: 0; width: 100%; height: 100%; -webkit-animation: sk-foldCubeAngle 2.4s infinite linear both; animation: sk-foldCubeAngle 2.4s infinite linear both; -webkit-transform-origin: 100% 100%; -ms-transform-origin: 100% 100%; transform-origin: 100% 100%; } loading .sk-folding-cube .sk-cube2,[data-is="loading"] .sk-folding-cube .sk-cube2{ -webkit-transform: scale(1.1) rotateZ(90deg); transform: scale(1.1) rotateZ(90deg); } loading .sk-folding-cube .sk-cube3,[data-is="loading"] .sk-folding-cube .sk-cube3{ -webkit-transform: scale(1.1) rotateZ(180deg); transform: scale(1.1) rotateZ(180deg); } loading .sk-folding-cube .sk-cube4,[data-is="loading"] .sk-folding-cube .sk-cube4{ -webkit-transform: scale(1.1) rotateZ(270deg); transform: scale(1.1) rotateZ(270deg); } loading .sk-folding-cube .sk-cube2:before,[data-is="loading"] .sk-folding-cube .sk-cube2:before{ -webkit-animation-delay: 0.3s; animation-delay: 0.3s; } loading .sk-folding-cube .sk-cube3:before,[data-is="loading"] .sk-folding-cube .sk-cube3:before{ -webkit-animation-delay: 0.6s; animation-delay: 0.6s; } loading .sk-folding-cube .sk-cube4:before,[data-is="loading"] .sk-folding-cube .sk-cube4:before{ -webkit-animation-delay: 0.9s; animation-delay: 0.9s; } @-webkit-keyframes sk-foldCubeAngle { 0%, 10% { -webkit-transform: perspective(140px) rotateX(-180deg); transform: perspective(140px) rotateX(-180deg); opacity: 0; } 25%, 75% { -webkit-transform: perspective(140px) rotateX(0deg); transform: perspective(140px) rotateX(0deg); opacity: 1; } 90%, 100% { -webkit-transform: perspective(140px) rotateY(180deg); transform: perspective(140px) rotateY(180deg); opacity: 0; } } @keyframes sk-foldCubeAngle { 0%, 10% { -webkit-transform: perspective(140px) rotateX(-180deg); transform: perspective(140px) rotateX(-180deg); opacity: 0; } 25%, 75% { -webkit-transform: perspective(140px) rotateX(0deg); transform: perspective(140px) rotateX(0deg); opacity: 1; } 90%, 100% { -webkit-transform: perspective(140px) rotateY(180deg); transform: perspective(140px) rotateY(180deg); opacity: 0; } }', '', function (opts) {});
riot.tag2('location', '<div class="place roundcorner"> <div class="locinput"> <input id="location-search-input" onfocus="{stopchanging}" change="{changelocation}" riot-value="{place}"> <span click="{toggleSub}" class="locationburger {active:subLocation}"> </span> <div class="othercity" if="{app.conf.chchBounds.isout()&&cityalert}" style=" flex-basis: 100%; width: 100%; font-size: 80%; color: red; "> <span if="{!feedbackClicked}">Would you like SmartView in {app.location.current.city||\'your location\'}? <button style=" padding: 5px; " click="{yescity}">Yes</button><button style=" padding: 5px; margin-left: 2px; " click="{nocity}">No</button> </span> <span if="{feedbackClicked}">Thanks for your feedback</button> </div> </div> <div class="subplace" if="{subLocation}"> <div class="currentsub"> <span click="{findlocation}">Current location</span> <button click="{rememberlocation}">Save </button> <button click="{makedefault}" class="{active:!isanydefault()}">default</button> </div> <div each="{app.location.remember}"> <span click="{fromremember}">{titleLong}</span> <button click="{removeremember}">remove</button> <button click="{makedefault}" class="{active:default}">default</button> </div> </div> </div>', 'location .subplace div.currentsub,[data-is="location"] .subplace div.currentsub{ background-color: #4981ba75; padding-top: 3px; padding-bottom: 3px; } location .subplace,[data-is="location"] .subplace{ background-color: #4981ba75; border-bottom-left-radius: 6px; border-bottom-right-radius: 6px; padding: 0px 0px 10px 0px; } location .subplace div,[data-is="location"] .subplace div{ display: flex; align-items: center; padding: 0px 10px 0px 25px; } location .subplace span,[data-is="location"] .subplace span{ flex-grow: 1; white-space: nowrap; overflow: hidden; } location .subplace button,[data-is="location"] .subplace button{ font-size: 60%; margin-left: 3px; } location .locinput,[data-is="location"] .locinput{ background-image: url("/assets/publica/pin.svg"); background-size: 10px auto; background-position: 10px calc(50% - 4px); ; padding: 0px 10px 10px 25px; cursor: pointer; background-color: white; border-bottom-left-radius: 8px; border-bottom-right-radius: 8px; align-items: center; display: flex; flex-flow: wrap; } location .place,[data-is="location"] .place{ background-color: white; padding-top: 10px; padding-bottom: 0px; } location input,[data-is="location"] input{ outline: none; border: none; width: calc(100% - 32px); flex-basis: calc(100% - 32px); } location .locationburger,[data-is="location"] .locationburger{ display: inline-block; background-image: url("/assets/publica/sets/Find_View_List_Off.svg"); background-position: center; background-size: contain; height: 16px; width: 16px; } location .locationburger.active,[data-is="location"] .locationburger.active{ background-image: url("/assets/publica/sets/Find_View_List_On.svg"); }', '', function (opts) {
  this.cityalert = true;
  this.feedbackClicked = false;
  this.place = "Location not available";
  this.subLocation = false;
  this.locationMenu = {
    showForm: false,
    autocompleteList: [],
    current: false,
    showMenu: false
  };
  this.ignoreChanges = false;

  function sendFeedback($yes) {
    _lib.ajax.$json("/app/router/feedback.php", {
      city: app.location.current.city,
      yes: $yes,
      latlng: app.lastPosition
    }, function (res) {
      console.log(res);
    });
  }

  this.nocity = function (e) {
    var _this24 = this;

    this.feedbackClicked = true;
    app.storage.set({
      "other-city-alert-hide": true
    });
    sendFeedback(false);
    setTimeout(function () {
      _this24.cityalert = false;

      _this24.update();
    }, 1000);
  }.bind(this);

  this.yescity = function (e) {
    var _this25 = this;

    this.feedbackClicked = true;
    app.storage.set({
      "other-city-alert-hide": true
    });
    sendFeedback(true);
    setTimeout(function () {
      _this25.cityalert = false;

      _this25.update();
    }, 1000);
  }.bind(this);

  this.toggleSub = function () {
    this.subLocation = !this.subLocation;
  }.bind(this);

  this.meonmap = function () {
    if (app.routed.map) {
      app.trigger("map/center");
    } else {
      route("map", {
        map: {
          locate: true
        }
      });
    }
  }.bind(this);

  this.stopchanging = function (e) {
    this.ignoreChanges = true;
  }.bind(this);

  this.findlocation = function (e) {
    var _this26 = this;

    clearTimeout(app.location.googleCodeInterval);
    app.location.googleCodeMs = 100;
    app.location.geocode(function () {
      _this26.update();

      app.trigger("map/center");
    }, true);
    this.locationMenu.showMenu = false;
  }.bind(this);

  this.fromremember = function (e) {
    if (app.location.lastGoogleAjax) app.location.lastGoogleAjax.abort();
    app.location.geoStop();
    app.location.current.change(e.item);
    var ret = {
      name: e.item.title,
      obj: e.item,
      point: e.item.point,
      longName: e.item.titleLong
    };
    app.trigger("geolocation/found", ret);
    app.trigger("geolocation/changed", app.location.current);
    app.trigger("geolocation/search");
    app.trigger("map/center");
    this.locationMenu.showMenu = false;
  }.bind(this);

  this.removeremember = function (e) {
    app.location.remember = app.location.remember.filter(function (a) {
      return e.item.titleLong != a.titleLong;
    });
    app.storage.set({
      stored_locations: app.location.remember
    });
    e.stopPropagation();
  }.bind(this);

  this.rememberlocation = function (e) {
    app.location.remember.push(app.location.current.get());
    app.location.remember = app.location.remember.reduce(function (r, a) {
      if (r.some(function (b) {
        return b.titleLong == a.titleLong;
      })) {} else {
        r.push(a);
      }

      return r;
    }, []);
    app.storage.set({
      stored_locations: app.location.remember
    });
  }.bind(this);

  this.isanydefault = function () {
    return app.location.remember.some(function (a) {
      return a["default"];
    });
  };

  this.makedefault = function (e) {
    app.location.remember.forEach(function (a) {
      if (e.item) {
        if (e.item.titleLong == a.titleLong && !e.item["default"]) {
          a["default"] = true;
        } else {
          a["default"] = false;
        }
      } else {
        a["default"] = false;
      }
    });
    app.storage.set({
      stored_locations: app.location.remember
    });
    e.stopPropagation();
  }.bind(this);

  app.on("geolocation/changed", function (data) {
    app.location.geocode();
  });
  app.on("geolocation/found", function (data) {
    if (this.ignoreChanges) return;
    this.place = data.longName;
    app.lastLocationName = data.longName;
    if (this.place.length > 25) this.place = this.place.substring(0, 25) + "&hellip;";
    this.update();
  }.bind(this));

  this.changelocation = function (e) {
    this.ignoreChanges = false;

    if (e.target.value.trim() != "" && this.locationMenu.current && this.locationMenu.current.text == e.target.value) {
      app.location.geoStop();
    } else if (e.target.value.trim() == "") {
      app.location.geocode(false, true);
    }

    this.locationMenu.current && this.locationMenu.current.getMore(this.locationMenu.current, function (data) {
      var ret = {};
      ret.name = data.address_components[1].long_name;
      ret.obj = data;
      ret.point = data.geometry.location;
      ret.longName = [data.address_components[0].long_name, data.address_components[1].long_name].join(" ");

      if (app.lastPosition != ret.point) {
        app.trigger("geolocation/found", ret);
        app.location.current.change({
          point: ret.point,
          title: ret.name,
          titleLong: ret.longName,
          source: "search"
        });
        app.lastPosition = ret.point;
        app.trigger("geolocation/changed", app.location.current);
        app.trigger("geolocation/search");
        app.trigger("map/center");
      }
    });
  }.bind(this);

  this.on("mount", function () {
    var _this27 = this;

    app.location.geocode();
    var autoOptions = {
      selector: "#location-search-input",
      source: function source(t, r) {
        _maps.service(t, function (a) {
          a.forEach(function (b, i) {
            b.i = i;
          });
          _this27.locationMenu.autocompleteList = a;
          r(a);
        });
      },
      onSelect: function onSelect(e, t, item) {
        _this27.locationMenu.current = _this27.locationMenu.autocompleteList[item.dataset.id];
        var evt = document.createEvent("HTMLEvents");
        evt.initEvent("change", false, true);
        document.getElementById("location-search-input").dispatchEvent(evt);
      },
      renderItem: function renderItem(item, search) {
        search = search.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
        var re = new RegExp("(" + search.split(' ').join('|') + ")", "gi");
        return '<div class="autocomplete-suggestion" data-id="' + item.i + '" data-val="' + item.text + '">' + item.text.replace(re, "<b>$1</b>") + '</div>';
      }
    };
    this.locationAuto = new autoComplete(autoOptions);

    if (app.storage.get("other-city-alert-hide")) {
      this.cityalert = false;
      this.update();
    }
  });
});
riot.tag2('mapview', '<google-map class="{smartview:false&&parent.parent.smartview} fill-page {iphone:iphone}"></google-map>', '', '', function (opts) {
  this.iphone = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);
  this.on("mount", function () {
    app.tags.mapview = this;
    this.update();
  });
  this.on("update", function () {
    if (document.getElementsByTagName("google-map")[0].clientHeight == 0) {
      document.getElementsByTagName("google-map")[0].style.height = window.innerHeight - document.querySelector("[data-is=section-main]").offsetTop + "px";
    }
  });
});
riot.tag2('google-map', '<legend-map></legend-map> <div class="google-map"></div> <popup-map if="{popup}" data-popup="{popup}"></popup-map> <feature-list if="{featurelist}"></feature-list>', 'google-map.smartview { height: calc(100vh - 300px); } google-map .google-map,[data-is="google-map"] .google-map{ width: 100%; height: 100%; }', '', function (opts) {
  var _this28 = this;

  this.loaded = false;
  this.featurelist = false;
  var self = this;

  this.updateLegend = function (layer, list, filter) {
    var _legend = {
      legend: {
        updateOnly: true,
        list: []
      }
    };

    if (filter) {
      _legend.legend.filter = filter;
    }

    _legend.legend.list = list;
    app.tags.map.update(_legend);
    app.off('map/legend/check/' + layer);
    app.on('map/legend/check/' + layer, function (obj) {
      obj.hide = false;
    });
  };

  this.registerLegend = function (layer, list, filter, options) {
    app.on('map/legend/check/' + layer, function (obj) {
      obj.hide = false;
    });
    $mn.on("layer/loaded/" + layer, function () {
      var _legend = {
        legend: {
          list: []
        }
      };

      if (filter) {
        _legend.legend.filter = filter;
      }

      if (options) {
        if (typeof options.collapsed != "undefined") {
          _legend.legend.collapsed = options.collapsed;
        }

        if (typeof options.hide != "undefined") {
          _legend.legend.hide = options.hide;
        }
      }

      console.log(_legend.legend);
      _legend.legend.list = list;
      app.tags.map.update(_legend);
    });
  };

  app.on("map/list", function () {
    if (!_this28.featurelist) {
      var hp = location.hash.replace("#", "").split("/");
      var loc = hp.filter(function (a) {
        return a[0] == "@";
      });
      var pa = hp.filter(function (a) {
        return a[0] != "@";
      });
      pa.push("list");
      pa = pa.concat(loc);
      route(pa.join("/"));
    }
  });

  var detectNearest = function detectNearest(open) {
    if (!this.loaded) return;
    if (!open && !this.popup) return;
    if (this.popup && (this.popup.detail || this.popup.tag)) return;
    var oldp = this.popup;
    this.popup = false;

    if (!$mn.markers.getVisible().length && !$mn.layers.getVisible().length) {
      var nearest = $mn.markers.findClosest() || $mn.layers.findClosest();

      if (nearest && app.mapkeys.findByLayer(nearest.marker.$ ? nearest.marker.$.layer : nearest.marker.getProperty("feature")).length) {
        this.popup = {
          nearest: true,
          direction: "<span style=\"display:inline-block;transform:rotate(".concat(nearest.direction, "deg)\">\u21A5</span>"),
          distance: _maps.distanceRoundFormat(nearest.distance),
          layer: _lib.singlefy(app.mapkeys.findByLayer(nearest.marker.$ ? nearest.marker.$.layer : nearest.marker.getProperty("feature")).pop().label),
          address: nearest.marker.$ ? "".concat(nearest.marker.$.place.name, " ").concat(nearest.marker.$.place.vicinity) : "".concat(nearest.marker.getProperty("popup")),
          marker: nearest.marker
        };
      }
    }

    if (oldp != this.popup || this.popup) this.update({
      norefresh: true,
      popup: this.popup
    });
  };

  this.on("update", function (data) {
    if (this.opts.popup) {
      this.popup = this.opts.popup;
      this.norefresh = false;
    }

    if (this.opts.legend) {
      this.legend = this.opts.legend;
      this.norefresh = true;
    }

    if (data && data.legend) {
      this.legend = data.legend;
      this.norefresh = true;
    }

    if (data && data.featurelist) {
      this.featurelist = data.featurelist;
      if (this.featurelist) this.popup = false;
    }

    if (typeof google != "undefined" && !this.norefresh) {
      $mn.refresh();
    }
  });
  this.on("mount", function () {
    app.tags.map = this;
    app.promise.google().then(function () {
      var map = app.gmap.map = this.map = $mn.init(this.root.querySelector(".google-map"));
      _maps.directionsService = $mn.initDirectionService();

      var locateMeButton = _lib.dom["new"]({
        tag: "div",
        cls: "locate-me",
        title: "Locate me",
        click: function click() {
          app.trigger("map/center");
        }
      });

      var fullScreenButton = _lib.dom["new"]({
        tag: "div",
        cls: "full-screen-button",
        click: function click() {
          app.gmap.map.getDiv().classList.toggle("full-screen");
          app.tags.footer.root.classList.toggle("mini-footer");
          document.body.classList.toggle("max-view");
          $mn.refresh();
        }
      });

      var listMapButton = _lib.dom["new"]({
        tag: "div",
        cls: "map-list-button",
        click: function click() {
          app.trigger("map/list");
        }
      });

      var mapTypeButton = _lib.dom["new"]({
        tag: "div",
        cls: "maptype-button",
        title: "Satellite",
        click: function click() {
          $mn.isMap().setMapTypeId($mn.isMap().getMapTypeId() == "hybrid" ? "roadmap" : "hybrid");
          this.classList.toggle("toggled", $mn.isMap().getMapTypeId() == "hybrid");
        }
      });

      var mapDownloadButton = _lib.dom["new"]({
        tag: "div",
        cls: "mapdownload-button",
        title: "Download data",
        click: function click() {
          $mn.isMap().data.toGeoJson(function (b) {
            b.features.forEach(function (f) {
              return Object.entries(f.properties).forEach(function (p) {
                if (p[1] && _typeof(p[1]) == "object") {
                  if (Object.getPrototypeOf(p[1]) === Object.prototype) {
                    Object.entries(p[1]).filter(function (e) {
                      return e[1] && _typeof(e[1]) == "object" && Object.getPrototypeOf(p[1]) !== Object.prototype;
                    }).forEach(function (e2) {
                      return delete f.properties[p[0]][e[0]];
                    });
                  } else {
                    delete f.properties[p[0]];
                  }
                }
              });
            });

            _lib.saveAsJson(b, "smartview-map-data.geojson");
          });
        }
      });

      $mn.pushControl(fullScreenButton, 'RIGHT_TOP');
      $mn.pushControl(mapDownloadButton, 'RIGHT_BOTTOM');
      $mn.pushControl(mapTypeButton, 'RIGHT_BOTTOM');
      $mn.pushControl(locateMeButton, 'RIGHT_TOP');
      $mn.one("map/idle", function () {
        this.loaded = true;
        $mn.on("bounds/changed", function (e) {
          app.trigger("map/bounds/changed", this, e);
        });
        $mn.on("zoom/changed", function () {
          var zoom = $mn.zoom();
          app.trigger("map/setcenter", false, zoom);
          app.state.set({
            map: {
              zoom: zoom
            }
          });
        });
        $mn.on("center/changed", function () {
          var center = $mn.center();
          app.trigger("map/setcenter", center, false);
          app.state.set({
            map: {
              center: {
                lat: center.lat(),
                lng: center.lng()
              }
            }
          });
        });
      }.bind(this));
      $mn.on('feature/remove', function (feat) {
        app.trigger("map/feature/remove", app.gmap.map, feat);
      });
      $mn.on('feature/add', function (feat) {
        app.trigger("map/feature/add", app.gmap.map, feat);
      });
      $mn.on('feature/click', function (event) {
        app.trigger("map/feature/detail", app.gmap.map, event.feature, event);

        if (event.feature.getProperty("feature")) {
          app.trigger("map/feature/detail/" + event.feature.getProperty("feature"), app.gmap.map, event.feature, event);
        }
      });
      app.trigger("map/ready");
    }.bind(this));
    app.promise.google().then(function () {});
  });

  (function () {
    var layerchangegoing = false;
    $mn.on("center/changed", function () {
      if (!layerchangegoing) {
        clearTimeout(app.timeouts.timeout2);
        app.timeouts.timeout2 = setTimeout(function () {
          detectNearest.bind(self)(false);
        }, 200);
      }

      return true;
    });
    $mn.on("layer/change", function () {
      layerchangegoing = true;
      clearTimeout(app.timeouts.timeout);
      clearTimeout(app.timeouts.timeout2);
      app.timeouts.timeout = setTimeout(function () {
        layerchangegoing = false;
        detectNearest.bind(self)(true);
      }, 1000);
      return true;
    });
  })();

  app.gmap.on("load-traffic", function (data) {
    $mn.toggleTraffic(true);
  }.bind(this));
  app.gmap.on("remove-traffic", function (data) {
    $mn.toggleTraffic(false);
  }.bind(this));
  app.gmap.on("load-google", function (data) {
    var request = {};

    if (data.place) {
      request.types = data.place.split(",");
    }

    if (data.search) {
      request.keyword = data.search;
    }

    _maps.findPlaces(request, app.gmap.map, {
      pointer: data.pointer
    });
  }.bind(this));
  app.gmap.on("remove-google", function (data) {
    $mn.markers["delete"](data.place);
  }.bind(this));
  app.gmap.on("add-feature", function (feat) {
    var feats = $mn.layers.add(feat, feat.properties.feature);
    app.gmap.features.push({
      name: feat.properties.feature,
      data: feats
    });
    app.trigger("map/data/" + feat.properties.feature);
  });
  app.gmap.on("load-features", function (data) {
    function addGeoJson(res, feat) {
      var json = res;
      var feats = $mn.layers.add(json, feat);
      app.gmap.features.push({
        name: feat,
        data: feats
      });
      app.trigger("map/data/" + feat, feats);

      if (data.cb) {
        data.cb(feats);
      }
    }

    console.log(data);
    var feat = data.item ? data.item : data.page;
    var itemid = data.id;
    var filter = data.filter;
    var mapkey = app.mapkeys.findByLayer(feat);
    var isStorable = mapkey.every(function (a) {
      return a.data.cache;
    });

    if ($mn.layers.has(feat)) {
      if (data.cb) {
        data.cb($mn.layers.list[feat]);
      }

      return;
    }

    var stored = false;

    if (isStorable) {
      var _stored, _stored$features;

      var storedname = "map/" + feat;
      stored = _lib.keep.need(storedname);

      if (stored && !((_stored = stored) !== null && _stored !== void 0 && (_stored$features = _stored.features) !== null && _stored$features !== void 0 && _stored$features.length)) {
        stored = false;
      }
    }

    var addJ = function addJ(res, feat, doafter) {
      if (app.gmap.map) addGeoJson(res, feat);

      if (doafter) {
        doafter();
      } else {
        app.on("map/ready", function () {
          addGeoJson(res, feat);

          if (doafter) {
            doafter();
          }
        });
      }
    };

    if (stored) {
      addJ(stored, feat);
    } else {
      app.trigger("progress/start");
      app.queue.add(_lib.ajax.$get(app.api.urlFeatures(feat, {
        itemid: itemid,
        filter: filter
      }), function (res) {
        try {
          var res = JSON.parse(res);
        } catch (e) {
          console.log(e);
          alert("Error while loading data :( ");
          app.trigger("progress/stop");
          return;
        }

        if (isStorable) _lib.keep.expire(storedname, res);
        addJ(res, feat, function () {
          return app.trigger("progress/stop");
        });
      }, function (http) {
        return http.status == 200 || app.trigger("progress/stop");
      }));
    }
  }.bind(this));
  app.gmap.on("remove-features", function (data) {
    var feat = data.item ? data.item : data.page;
    $mn.layers["delete"](feat);
  });
});
riot.tag2('smartview', '<div class="smartboxes"> <smartbox class="b-light" each="{smartboxes}"></smartbox> </div>', 'smartview .smartboxes,[data-is="smartview"] .smartboxes{ display: flex; width: 100%; } smartview smartbox,[data-is="smartview"] smartbox{ display: inline-block; flex-basis: 33.33%; width: 33.33%; height: 100px; border: 3px solid white; box-sizing: border-box; text-align: center; padding-top: 29px; }', '', function (opts) {
  var _this29 = this;

  this.on("mount", function () {
    return _this29.update();
  });
  this.on("update", function () {
    this.smartboxes = function (list) {
      return Object.keys(app.pages).reduce(function (b, a) {
        return Array.prototype.concat(b, app.pages[a].nodes.filter(function (a) {
          return list.indexOf(a.name) !== -1;
        }));
      }, []).reduce(function (b, a) {
        return Array.prototype.concat(b.filter(function (c) {
          return c.name !== a.name;
        }), a);
      }, []);
    }(["wind", "uvindex", "weather"]);
  });
});
riot.tag2('smartbox', '<div class="line1">{line1}</div> <hr> <raw class="line2" content="{line2}">{line2}</div>', 'smartbox hr,[data-is="smartbox"] hr{ width: 30px; border: 1px solid black; height: 0px; margin: 5px auto; }', '', function (opts) {
  var _this30 = this;

  this.on("mount", function () {
    return _this30.update();
  });
  this.on("update", function () {
    if (_this30.text) {
      _this30.split = _this30.text.split("<br>");
      _this30.line2 = _this30.split.pop();
      _this30.line1 = _this30.split.pop();
    } else {
      _this30.line2 = _this30.label;
      _this30.line1 = "";
    }
  });
});
riot.tag2('smartlist', '<smartitem each="{app.menu}"> </smartitem>', 'smartlist .checks label,[data-is="smartlist"] .checks label{ display: block; } smartlist .icons,[data-is="smartlist"] .icons{ padding-left: 41px; background-position: top left; background-size: 32px; padding: 10px 5px 5px 45px; }', '', function (opts) {});
riot.tag2('smartitem', '<div class="expandable"> <h3 click="{toggle}" class="{icon} icons">{label}</h3> <div ref="content" class="checks content" data-is="{component}"></div> </div>', '', '', function (opts) {
  this.toggle = function (e) {
    e.target.parentNode.querySelector(".content").classList.toggle("visible");
    e.target.classList.toggle("expanded");
  }.bind(this);

  this.check = function (e) {}.bind(this);

  this.on("update", function () {
    this.component = "smart-" + this.name;
  });
});
riot.tag2('map-key', '<div class="panel b-gray f-p4"> <button class="filter_all" click="{setAll}">All</button> <button class="filter_clear" click="{setClear}">Clear</button> </div> <map-key-list each="{list}"></map-key-list>', '', '', function (opts) {
  var _this31 = this;

  var list;
  var tempkeys;
  this.noupdate = false;
  this.on("mount", function () {
    return _this31.update();
  });
  this.on("update", function () {
    _this31.noupdate = false;
    _this31.list = app.menu.filter(function (a) {
      return app.pages[a.name] && app.pages[a.name].mapkeys && app.pages[a.name].mapkeys.length > 0;
    });
    _this31.tempkeys = _this31.list.reduce(function (r, a) {
      r[a.name] = {};
      return r;
    }, {});
  });

  this.setAll = function () {
    var evt = document.createEvent("HTMLEvents");
    evt.initEvent("change", false, true);
    Array.prototype.forEach.call(this.root.querySelectorAll("input[type=checkbox]"), function (a) {
      a.checked = true;
      a.dispatchEvent(evt);
    });
  }.bind(this);

  this.setClear = function () {
    var evt = document.createEvent("HTMLEvents");
    evt.initEvent("change", false, true);
    Array.prototype.forEach.call(this.root.querySelectorAll("input[type=checkbox]"), function (a) {
      a.checked = false;
      a.dispatchEvent(evt);
    });
  }.bind(this);
});
riot.tag2('map-key-list', '<div class="expandable b-gray"> <h3 click="{toggle}" class="{icon} icons">{label} <span if="{filtered}" class="filtered"></span><span if="{filtered}">({count})</span></h3> <div class="checks content b-light"> <map-key-item each="{checks}"></map-key-item> </div> </div>', 'map-key-list .filtered,[data-is="map-key-list"] .filtered{ background-image: url(/assets/filter.png); height: 11px; display: inline-block; background-position: center; width: 20px; background-color: transparent; background-size: contain; margin-left: 10px; margin-right: 10px; } map-key-list .checks label,[data-is="map-key-list"] .checks label{ display: block; } map-key-list .checks,[data-is="map-key-list"] .checks{} map-key-list .icons,[data-is="map-key-list"] .icons{ background-position: 10px center; background-size: auto 32px; padding: 10px 10px 10px 63px; } map-key-list label,[data-is="map-key-list"] label{ line-height: 39px; border-bottom: 1px solid white; position: relative; padding-left: 85px; background-size: auto 68%; background-position: 55px center; } map-key-list input[type="checkbox"],[data-is="map-key-list"] input[type="checkbox"]{ height: 0px; width: 0px; outline: none; border: none; } map-key-list input[type="checkbox"]:before,[data-is="map-key-list"] input[type="checkbox"]:before{ content: ""; display: block; height: 24px; width: 24px; background-color: white; top: 7px; left: 20px; position: absolute; } map-key-list input[type="checkbox"]:checked:after,[data-is="map-key-list"] input[type="checkbox"]:checked:after{ content: \'\'; position: absolute; left: 23px; top: 11px; transform: rotate(-45deg); width: 17px; height: 8px; border-bottom: 1px solid black; border-left: 1Px solid black; }', '', function (opts) {
  var _this32 = this;

  this.filtered = false;
  this.on("mount", function () {
    return _this32.update();
  });

  this.toggle = function (e) {
    e.target.parentNode.querySelector(".content").classList.toggle("visible");
    e.target.classList.toggle("expanded");
  }.bind(this);

  this.check = function (e) {
    var _this33 = this;

    this.parent.tempkeys[this.name][e.item.label] = e.currentTarget.checked;
    e.item.checked = e.currentTarget.checked;
    this.filtered = Object.keys(this.parent.tempkeys[this.name]).some(function (a) {
      return _this33.parent.tempkeys[_this33.name][a];
    });
    this.parent.noupdate = true;
    this.count = Object.keys(this.parent.tempkeys[this.name]).filter(function (a) {
      return _this33.parent.tempkeys[_this33.name][a];
    }).length;
    this.update();
  }.bind(this);

  this.on("update", function () {
    var _this34 = this;

    if (!this.parent.noupdate) {
      this.checks = app.pages[this.name].mapkeys;
      this.filtered = this.checks.some(function (a) {
        return a.checked;
      });
      this.count = this.checks.filter(function (a) {
        return a.checked;
      }).length;
      this.checks.filter(function (a) {
        return a.checked;
      }).forEach(function (a) {
        _this34.parent.tempkeys[_this34.name][a.label] = true;
      });
    }
  });
});
riot.tag2('map-key-item', '<label riot-style="{style}" class="{classes}"><input change="{parent.check}" type="checkbox" checked="{checked}">{label}</label>', '', '', function (opts) {
  var _this35 = this;

  this.classes = {
    "b-dark": false,
    checked: false
  };
  this.on("mount", function () {
    return _this35.update();
  });
  this.on("update", function () {
    var black = _this35.checked ? "white" : "black";
    _this35.style = {
      "background-image": "url(/assets/icons/".concat(black, "/").concat(_this35.icon, ".png)")
    };
    _this35.classes = {
      "b-dark": _this35.checked,
      checked: _this35.checked
    };
  });
});
riot.tag2('menu-burger', '<nav class="burger {active: submenu, expanded-submenu: activeSub}"> <span class="side_menu_button" onclick="{showsubmenu}"></span> <div class="b-black menu " if="{submenu}"> <h3 onclick="{hidesubmenu}">SmartView</h3> <div class="triangle"></div> <div class="logo"></div> <menu-item each="{app.menu}"></menu-item> </div> <div class="overlay" if="{submenu}" onclick="{hidesubmenu}"></div> </nav>', 'menu-burger .overlay,[data-is="menu-burger"] .overlay{ position: fixed; top: 0px; left: 0px; right: 0px; bottom: 0px; background-color: rgba(0, 0, 0, 0.5); z-index: 9; } menu-burger .triangle,[data-is="menu-burger"] .triangle{ width: 0; height: 0; border-bottom: 100px solid #63ac9e; border-left: 100px solid transparent; position: absolute; bottom: 0px; right: 0px; } menu-burger .logo,[data-is="menu-burger"] .logo{ background-image: url("/assets/publica/logo.svg"); background-position: right 10px bottom 10px; background-size: 50px auto; position: absolute; bottom: 0px; right: 0px; z-index: 10; height: 100px; width: 100px; } menu-burger menu-item,[data-is="menu-burger"] menu-item{ position: relative; display: block; border-bottom: 1px solid #ccc; } menu-burger menu-item:last-child,[data-is="menu-burger"] menu-item:last-child{ border-bottom: none; margin-bottom: 50px; } menu-burger .expanded-submenu>.menu>menu-item:not(.b-black),[data-is="menu-burger"] .expanded-submenu>.menu>menu-item:not(.b-black){ display: none; } menu-burger .submenu menu-item,[data-is="menu-burger"] .submenu menu-item{ border: none; } menu-burger .submenu menu-item:last-child,[data-is="menu-burger"] .submenu menu-item:last-child{ border-bottom: none; margin-bottom: 0; } menu-burger .submenu menu-item .side_nav.icons,[data-is="menu-burger"] .submenu menu-item .side_nav.icons{ background-size: 0px 0px; } menu-burger .menu,[data-is="menu-burger"] .menu{ background: white; position: absolute; top: 0px; left: 0px; border: 2px solid transparent; z-index: 100; background-clip: padding-box; min-width: inherit; } menu-burger .menu>*,[data-is="menu-burger"] .menu>*{ z-index: 100; } menu-burger .menu.submenu,[data-is="menu-burger"] .menu.submenu{ border: none; } menu-burger .expanded,[data-is="menu-burger"] .expanded,menu-burger .expanded .menu,[data-is="menu-burger"] .expanded .menu{ background-color: rgb(252, 212, 172); } menu-burger .expanded,[data-is="menu-burger"] .expanded{ border-left: 3px solid #f68b1f; margin-left: -2px; } menu-burger .side_nav.icons,[data-is="menu-burger"] .side_nav.icons{ display: block; background-size: 10px auto; background-position: 19px 11px; padding: 10px 10px 10px 0px; } menu-burger .submenu .side_nav.icons,[data-is="menu-burger"] .submenu .side_nav.icons{ padding: 10px 7px 0px 0px; }', '', function (opts) {
  this.submenu = false;
  this.activeSub = null;

  this.showsubmenu = function (e) {
    this.submenu = !this.submenu;

    if (!this.submenu) {
      if (this.activeSub) {
        this.activeSub.subsOn = false;
        this.activeSub = false;
      }
    }

    if (this.search && this.submenu) {
      history.back();
    }
  }.bind(this);

  this.hidesubmenu = function (e) {
    this.submenu = false;

    if (!this.submenu) {
      if (this.activeSub) {
        this.activeSub.subsOn = false;
        this.activeSub = false;
      }
    }
  }.bind(this);
});
riot.tag2('menu-item', '<div class=" side_nav icons " riot-style="{style}"><a click="{check}" href="{window.config.hashbang}{hash||name}"> <svg if="{svgIcon}" riot-style="fill:{iconColor||color}" alt=""> <use href="/assets/symbols/src/menu/_sprite.svg#{svgIcon}"></use> </svg> {label} </a> <div class="menu submenu b-light" if="{subs}" show="{subsOn}"> <menu-item each="{subs}" sub="true"></menu-item> </div> </div>', 'menu-item .submenu,[data-is="menu-item"] .submenu{ position: relative; }', 'class="{expanded:subsOn}"', function (opts) {
  this.subsOn = false;
  this.style = {};
  this.on("mount", function () {
    if (this.image) {
      this.style["background-image"] = "url(\"".concat(this.image, "\")");
      this.update();
    }
  });

  this.check = function (e) {
    var p = this.parent.subsOn ? this.parent.parent : this.parent;

    if (this.soon && !app.debug) {
      e.preventDefault();
    } else if (this.subs) {
      e.preventDefault();

      if (p.activeSub) {
        p.activeSub.update({
          subsOn: false
        });
      }

      if (p.activeSub != this) {
        if (this.subsOn = !this.subsOn) {
          p.activeSub = this;
        }
      } else {
        p.activeSub = false;
      }
    } else if (this.opts.sub) {
      e.preventDefault();

      if (p.activeSub) {
        p.activeSub.subsOn = false;
        p.activeSub = false;
      }

      p.update({
        submenu: false
      });
      app.pulseRoute(this, true);
    } else {
      if (p.activeSub) {
        p.activeSub.subsOn = false;
        p.activeSub = false;
      }

      p.update({
        submenu: false
      });
    }
  }.bind(this);
});
riot.tag2('now-main', '<pulse-box each="{nodes}"></pulse-box>', 'now-main { display: flex; align-content: flex-start; flex-direction: row; flex-wrap: wrap; }', 'class="pulse-page"', function (opts) {
  var nodes = [];
  this.on("mount", function () {
    this.update();
  });
  this.on("update", function () {
    this.nodes = app.pages.now.nodes;
  });
});
riot.tag2('page-button', '<div click="{goLink}" class="roundcorner {no-bottom-radius:shownFavourites}" riot-style="{style}"> <span class="icon roundcorner" riot-style="background-image: url({icon});background-color: {iconColor}"></span> <div class="title-favs"> <a href="{window.config.hashbang}{hash||name}" class="icons fs_h2" riot-style="color:{labelColor||\'white\'}" click="{favs.length>0?showFavourites:check}"> {label} </a> <button if="{favs.length>0}" class="aslink fs_h2sub" click="{showFavourites}">{shownFavourites?⁗Hide⁗:⁗View⁗} favourites</button> </div> <div class="buttons " style="flex-grow: 1;justify-content: flex-end;"><button class="reverse fs_but" style=" align-items: baseline; ">See All</button></div> </div> <div class="favourite-list" if="{shownFavourites}"> <div class="favourite-item" each="{fav in favs}"> <div class="title"> <h5 class="fs_h5" riot-style="color:{iconColor}">{fav.label || fav.pulse.label}</h5> <div class="buttons"> <fav-button book="{getFavData(fav.detail)}" onoff="On" icon="{icons[color]}"></fav-button> <button class="fs_but" riot-style="background-color: {iconColor}" click="{viewDataset}">View</button> </div> </div> <div class="detail-section detail-data detail-flex flex-left"> <div each="{item in fav.data}" riot-style="background-image:url(\'{item.image||item.icon}\')" class="detail-name-val icon"> <strong class="fs_var">{item.title}</strong> <span class="fs_val"> <raw content="{item.value}"></raw> </span> </div> </div> </div> </div>', 'page-button .title-favs,[data-is="page-button"] .title-favs{ margin-top: -3px; } page-button .detail-name-val,[data-is="page-button"] .detail-name-val{ margin-top: 10px; padding-right: 5px; } page-button .favourite-star,[data-is="page-button"] .favourite-star{ background-image: url("/assets/publica/favs/Favourite_On_Environment.svg"); height: 13px; width: 13px; background-size: contain; background-position: center; margin-right: 5px; } page-button .buttons,[data-is="page-button"] .buttons{ display: flex; align-items: center; } page-button h5,[data-is="page-button"] h5{ margin: 0 } page-button .title,[data-is="page-button"] .title{ flex: 1; display: flex; justify-content: space-between; flex-grow: 1; flex-basis: 100%; align-items: baseline; width: 100%; } page-button .detail-section,[data-is="page-button"] .detail-section{ padding: 0; } page-button .favourite-list,[data-is="page-button"] .favourite-list{ background: white; flex-direction: column; max-height: none; border-bottom-left-radius: 6px; border-bottom-right-radius: 6px; padding: 0px; } page-button .favourite-item,[data-is="page-button"] .favourite-item{ flex: 1; flex-direction: column; display: flex; flex-basis: 100%; padding: 10px; border-bottom: 1px solid #ccc; } page-button .favourite-item:last-child,[data-is="page-button"] .favourite-item:last-child{ border: none; } page-button .aslink,[data-is="page-button"] .aslink{ position: relative; top: -6px; background-color: transparent; }', 'class="{name}"', function (opts) {
  var _this36 = this;

  var self = this;
  this.shownFavourites = false;
  this.favs = [];
  this.style = {};
  this.icons = {
    "#f68b1f": "OnTheGo",
    "#cadb44": "Environment",
    "#f05b72": "News",
    "#7cccbf": "Connect",
    "#61a2d8": "Find"
  };

  this.getFavsFromApp = function () {
    app.favs.getByPage(self.name, function (a) {
      if (a.length > 0) {
        a.forEach(function (d) {
          d.pulse = app.pages[d.page].nodes.filter(function (b) {
            return b.name == d.detail;
          }).pop();
          var after = moment();

          if (d.expire_after && d.expire_after.when == "tomorrow") {
            after = moment(d.update_on).add(1, "days").startOf('day').toDate();
          }

          if (d.expire_after && d.expire_after.val && d.expire_after.dim) {
            if (d.expire_after.dim == "mins") {
              d.expire_after.dim = "m";
            }

            after = moment(d.update_on).add(d.expire_after.val, d.expire_after.dim).toDate();
          }

          if (moment(after).isBefore()) {
            app.favs.ajax(d, function (res) {
              if (res.trim().length > 0) {
                var resjson = JSON.parse(res);
                d.data = [];
                if (resjson[d.detail].list) resjson[d.detail].list.forEach(function (x) {
                  d.data.push({
                    title: x.label,
                    value: x.values[0],
                    icon: x.data.icon
                  });
                });
                d.update_on = new Date();
                app.favs.add(d);
                self.update();
              }
            });
          }
        });
        self.favs = a;
        self.update({
          shownFavourites: self.shownFavourites || a.length < 3
        });
      } else {
        self.shownFavourites = false;
        self.favs = [];
        self.update();
      }
    });
  };

  this.getFavData = function (d) {
    return {
      detail: d
    };
  };

  this.on("mount", function () {
    _this36.getFavsFromApp();

    app.favs.onchange(_this36.getFavsFromApp);

    if (_this36.color) {
      _this36.style["background-color"] = _this36.color;
    }

    if (_this36.bgImage) {
      _this36.style["background-image"] = _this36.bgImage;
    }
  });

  this.viewDataset = function (e) {
    if (e.item.fav.url) {
      route(e.item.fav.url);
    } else if (e.item.fav.item) {
      route("".concat(e.item.fav.page, "/").concat(e.item.fav.detail, "/").concat(e.item.fav.item));
    } else if (e.item.fav.detail) {
      route("".concat(e.item.fav.page, "/").concat(e.item.fav.detail));
    } else {
      route("".concat(e.item.fav.page));
    }
  }.bind(this);

  this.showFavourites = function (e) {
    this.shownFavourites = !this.shownFavourites;
    e.stopPropagation();
    e.preventDefault();
  }.bind(this);

  this.goLink = function (e) {
    route("".concat(this.hash || this.name));
  }.bind(this);

  this.check = function (e) {
    if (this.soon && !app.debug) {
      e.preventDefault();
    }
  }.bind(this);
});
riot.tag2('play-main', '<pulse-box each="{nodes}"></pulse-box>', 'play-main { display: flex; align-content: flex-start; flex-direction: row; flex-wrap: wrap; }', 'class="pulse-page"', function (opts) {
  var nodes = [];
  this.on("mount", function () {
    this.update();
  });
  this.on("update", function () {
    this.nodes = app.pages.play.nodes;
  });
});
riot.tag2('popup-map', '<div class="popup "> <close click="{hidePopup}"></close> <div class="detail-section detail-header-table margin-top bottom-corners" if="{popup&&popup.nearest}"> <strong>Nearest {popup.layer} to you is:</strong> <p>{popup.address} {popup.distance} <raw content="{popup.direction}"></raw> </p> <button if="{popup&&popup.marker}" click="{showMapFeature}" class="detail-button f-p4">View location</button> <button if="{popup&&popup.detailLink}" click="{goDetail}" class="detail-button f-p4">View {detailLabel}</button> <button if="{popup&&popup.moreLink}" click="{goMore}" class="detail-button f-p4">View more</button> </div> <div class="detail-section detail-header-table margin-top bottom-corners" if="{popup&&popup.detail&&!popup.data}"> <raw if="{popup.content}" content="{popup.content}"></raw> <button if="{popup&&popup.marker}" click="{showMapFeature}" class="detail-button f-p4">View location</button> <button if="{popup&&popup.detailLink}" click="{goDetail}" class="detail-button f-p4">View {detailLabel}</button> <button if="{popup&&popup.moreLink}" click="{goMore}" class="detail-button f-p4">View more</button> </div> <div if="{popup&&popup.data}"> <content-box params="{toParam()}"></content-box> </div> <div class="detail-section detail-header-table margin-top bottom-corners" if="{popup&&popup.tag}" style="position:relative"> <virtual data-is="{popup.tag}" data-content="{popup.content}"></virtual> </div> </div>', 'popup-map .popup,[data-is="popup-map"] .popup{ padding: 10px 10px; min-height: 100px; } popup-map .popup p,[data-is="popup-map"] .popup p{ margin: 5px 0; } popup-map close div,[data-is="popup-map"] close div{ top: 0px; z-index: 9; border-radius: 6px; width: 30px; height: 30px; position: sticky; left: 100%; background-size: 55% 80%; background-position: center; }', '', function (opts) {
  var _this37 = this;

  this.detailLabel = "detail";

  this.toParam = function () {
    return {
      label: this.popup.data.title,
      sub: this.popup.data.sub,
      details: this.popup.data.details,
      content: this.popup.data.content,
      data: this.popup.data.data,
      image: this.popup.data.image,
      fav: this.popup.data.fav,
      openDetails: this.popup.openDetails,
      graph: this.popup.data.graph,
      tag: this.popup.data.tag,
      preloadDetail: this.popup.data.preloadDetail,
      buttons: this.popup.data.buttons
    };
  };

  this.on("mount", function () {
    _this37.update();
  });
  this.on("update", function () {
    _this37.popup = _this37.opts.dataPopup;

    if (_this37.popup.detailText) {
      _this37.detailLabel = _this37.popup.detailText;
    }
  });

  this.goDetail = function (e) {
    route(this.popup.detailLink);
  }.bind(this);

  this.goMore = function (e) {
    window.open(this.popup.moreLink, "ccc");
  }.bind(this);

  this.showMapFeature = function (e) {
    app.trigger("map/setcenter", this.popup.marker.$ ? this.popup.marker.getPosition() : _maps.getCenter(this.popup.marker.getGeometry()));
    app.trigger("map/recenter");
    this.hidePopup();
    $mn.triggerIcon(this.popup.marker);
  }.bind(this);

  this.hidePopup = function () {
    if (this.popup.closeBack) {
      this.popup.closeBack();
    }

    this.parent.popup = false;
    this.parent.update();
  }.bind(this);
});
riot.tag2('pulse-box', '<article class="roundcorner" riot-style="background-color:{color}"> <div class="image" riot-style="background-image:url(\'{image}\')"> </div> <div class="text"> <strong>{title}</strong> </div> </article>', 'pulse-box article,[data-is="pulse-box"] article{ min-height: 100%; background-color: rgba(255, 255, 255, 0.4); cursor: pointer; } pulse-box img { margin: auto; display: block; max-height: 55px; } pulse-box { text-align: center; flex-basis: calc(99% / 3 - (10px * 2) / 3); padding: 0px; padding-right: 10px; padding-bottom: 10px; } detail pulse-box,detail [data-is="pulse-box"]{ flex-basis: calc(79% / 3 - (10px * 2) / 3); } detail pulse-box img,detail [data-is="pulse-box"] img{ transform: none; } pulse-box:nth-of-type(3n) { padding-right: 0px; } pulse-box .text,[data-is="pulse-box"] .text{ height: 2.5em; display: table; width: 100%; } pulse-box .text strong,[data-is="pulse-box"] .text strong{ padding: 0px 5px; display: table-cell; vertical-align: middle; color: white; } pulse-box .image,[data-is="pulse-box"] .image{ padding-top: 10px; min-height: 50px; padding-top: 10px; min-height: 50px; background-size: contain; background-position: center; }', 'onclick="{detail}"', function (opts) {
  this.detail = function (e) {
    if (this.href) {
      location = this.href;
      return;
    }

    app.pulseRoute(this);
  }.bind(this);

  this.on("update", function () {
    if (_typeof(this.data) == "object") {
      console.log("Data object alert", this);
    }

    if (this.label) {
      this.title = this.label;
    } else {
      this.alt = this.text;
      var split = this.text.split("<br>");
      this.title = split[0];
      this.data = split.length > 1 ? split[1] : "";
    }

    if (this.image) {} else if (this.icon2 || this.icon) {
      this.image = this.icon2 ? this.icon2 : this.icon;
      this.image = "/assets/svg/" + this.image + "-black.svg";
    }
  });
  this.on("mount", function () {
    this.update();
  });
});
riot.tag2('raw', '<span></span>', '', '', function (opts) {
  this.on("update", function () {
    this.root.innerHTML = opts.content;
  });
  this.on("mount", function () {
    this.root.innerHTML = opts.content;
  });
});
riot.tag2('search-header', '<form submit="{search}"> <input keyup="{searchOnKey}" placeholder="Search SmartView" riot-value="{expression}" ref="searchInput" title="Search SmartView" class="location-search f-p4" type="text"> <button class="close" click="{closeSearch}"></button> </form>', 'search-header .close,[data-is="search-header"] .close{ background-image: url("/assets/publica/close.svg"); width: 30px; height: 20px; background-size: contain; background-color: transparent; border: none; outline: none; } search-header form,[data-is="search-header"] form{ display: flex; align-items: center; } search-header input.location-search,[data-is="search-header"] input.location-search{ outline: none; border: none; padding: 6px 0px; flex-grow: 1; background: #eee; } search-header button.location-search,[data-is="search-header"] button.location-search{ flex-grow: 0; margin-top: 0 } search-header input.location-search::placeholder,[data-is="search-header"] input.location-search::placeholder{ color: black; }', '', function (opts) {
  var timeout;

  this.closeSearch = function (e) {
    this.parent.update({
      showHeader: false,
      showResults: false
    });
  }.bind(this);

  this.search = function (e) {
    e.preventDefault();

    if (this.refs.searchInput.value.length >= 3) {
      app.trigger("search/go", this.refs.searchInput.value);
    }
  }.bind(this);

  this.searchOnKey = function (e) {
    var _this38 = this;

    clearTimeout(timeout);

    if (this.refs.searchInput.value.length >= 3) {
      timeout = setTimeout(function () {
        app.trigger("search/go", _this38.refs.searchInput.value);
      }, 200);
    }
  }.bind(this);

  this.on("update", function () {
    if (!this.opts.hide) {
      this.refs.searchInput.focus();
    }
  });
});
riot.tag2('search-results', '<div> <loading if="{isSearching()}"></loading> <div class="noresults" if="{!isSearching()&&types.length==0&&Object.keys(asyncCalls).length>0}">No results found, try searching something else.</div> <div class="suggestions" if="{filterResults(t).length>0}">Suggestions</div> <div each="{t in types}"> <div> <search-result each="{filterResults(t)}"> </search-result> </div> </div> </div>', 'search-results .noresults,[data-is="search-results"] .noresults{ padding-left: 20px; } search-results .toggle-type,[data-is="search-results"] .toggle-type{ text-align: left; padding: 5px; padding-left: 10px; border-bottom: 2px solid white; position: relative; } search-results .toggle-type:after,[data-is="search-results"] .toggle-type:after{ content: ""; background-image: url(/assets/right_wh.svg); background-size: contain; background-repeat: no-repeat; position: absolute; height: 30px; width: 30px; right: 0px; top: 0; transform: rotate(90deg); transition: 0.1s all; } search-results .expand .toggle-type:after,[data-is="search-results"] .expand .toggle-type:after{ transform: rotate(270deg); } search-results .result-item,[data-is="search-results"] .result-item{ display: block; } ', '', function (opts) {
  var _this40 = this;

  this.lastQuery = "";
  this.results = [];
  this.types = [];
  this.asyncCalls = [];

  this.toggleType = function (e) {
    e.target.parentNode.classList.toggle("expand");
  }.bind(this);

  this.filterResults = function (f) {
    return this.results.filter(function (i) {
      return i.type == f;
    });
  };

  this.isSearching = function () {
    var _this39 = this;

    return Object.keys(this.asyncCalls).filter(function (a) {
      return _this39.asyncCalls[a];
    }).length;
  };

  this.getResults = function (search) {
    this.results = [{}];
    app.trigger("ga", "search?q=" + search);
    Object.keys(app.pages).forEach(function (key) {
      app.pages[key].nodes.forEach(function (item) {
        if (item.name.toLowerCase().indexOf(search.toLowerCase()) > -1 || item.text && item.text.toLowerCase().indexOf(search.toLowerCase()) > -1 || item.title && item.title.toLowerCase().indexOf(search.toLowerCase()) > -1) {
          this.results.push({
            label: item.title,
            sub: item.name,
            page: key,
            type: "Dataset",
            obj: item,
            icon: app.menu.reduce(function (r, a) {
              if (a.name == key) return a.icon;else return r;
            }, null)
          });
        }
      }.bind(this));
    }.bind(this));
    this.update();
  };

  this.on("update", function () {
    this.types = Object.keys(this.results.reduce(function (o, i) {
      if (i.type) {
        o[i.type] = true;
      }

      return o;
    }.bind(this), {}));
  });
  this.on("mount", function () {});
  app.on("search/go", function (expression) {
    var search = _this40.expression = expression;

    if (_this40.lastQuery != search || _this40.results.length == 0) {
      _this40.lastQuery = search;

      _this40.getResults(search);
    }
  });
});
riot.tag2('search-result', '<raw content="{label}"></raw>', '', 'class="result-item" riot-style="{styles}" click="{goto}"', function (opts) {
  var _this41 = this;

  this.styles = {};

  this.closeSearch = function () {
    this.parent.parent.parent.update({
      showHeader: false,
      showResults: false
    });
  };

  this["goto"] = function (e) {
    console.log("Search goto", e.item);

    if (e.item.type == "Map Layer") {
      this.closeSearch();
      route("map", {
        detail: e.item.obj.data["map-feature"],
        clear: true,
        map: {
          zoom: 16,
          locate: true
        }
      });
    } else if (e.item.type == "Dataset") {
      this.closeSearch();
      app.pulseRoute(e.item.obj);
    } else if (e.item.type == "Location") {
      this.closeSearch();
      e.item.obj.getMore(e.item.obj, function (data) {
        route("map", {
          map: {
            center: data.geometry.location,
            zoom: app.conf.defaultMapZoom
          }
        });
      });
    } else {
      this.closeSearch();
      app.trigger("search/click/" + e.item.dataset, e.item);
    }
  }.bind(this);

  this.on("mount", function () {
    _this41.update();
  });
  this.on("update", function () {});
});
riot.tag2('search-tag', '<span class="search_button" onclick="{gosearch}"></span> <search-header ref="header" hide="{!showHeader}"> </search-header> <search-results hide="{!showResults}"> </search-results>', 'search-tag,[data-is="search-tag"]{}', 'class="b-black"', function (opts) {
  this.showHeader = false;
  this.showResults = false;

  this.gosearch = function (e) {
    this.showHeader = !this.showHeader;
    this.showResults = this.showHeader;
  }.bind(this);
});
riot.tag2('section-main', '<page-content ref="page" page="{page}"></page-content>', '', 'class="{home:typeof app.routed.home!=\'undefined\'}"', function (opts) {
  this.page = "home";
  var self = this;
  this.on("mount", function () {
    app.tags.main = this;
  });
  app.on("search", function (data) {
    app.trigger("route", {
      search: data
    });
    app.tags.pushask.update({
      askVisible: false
    });
    app.alert.set(false);
    app.tags.nav.update({
      search: true
    });
    app.tags.header.update({
      description: false,
      title: false,
      back: true,
      menu: false
    });
    app.tags.footer.update({
      button: "none"
    });
    app.tags.main.update({
      page: "search",
      fullscreen: false
    });
    app.tags.main.refs.page.refs.search.update(data);
    app.trigger("ga", "search");
  });
  app.on("page/home", function (data) {
    app.trigger("route", {
      home: data
    });
    app.tags.pushask.update({
      askVisible: false
    });
    app.alert.set({
      title: "Give us feedback",
      msg: "We would appreciate if you could give us feedback, report any errors or suggest new features - <a href='" + window.config.hashbang + "feelme'>Feedback form</a>",
      collapsed: true
    });
    app.tags.nav.update({
      search: false
    });
    app.tags.header.update({
      description: false,
      title: false,
      back: false,
      menu: true
    });
    app.tags.footer.update({
      button: "none"
    });
    app.tags.main.update({
      page: "home",
      fullscreen: false,
      tiles: true
    });
    app.trigger("ga", "home");
  });
  app.on("page/sub", function (data) {
    if (!app.menu.some(function (b) {
      return b.name == data.sub;
    }) || data.sub == "home") {
      return route("");
    }

    var menu = app.menu.filter(function (b) {
      return b.name == data.sub;
    }).pop();
    app.page = data.sub;
    app.trigger("route", {
      page: data.sub
    });
    app.tags.pushask.update({
      askVisible: false
    });
    app.alert.set(false);
    app.tags.footer.update({
      button: "none"
    });
    app.tags.nav.update({
      search: false
    });
    app.tags.header.update({
      description: menu.description || false,
      title: menu.label,
      back: data.sub == "home" ? false : function () {
        route("home");
      },
      menu: true
    });
    app.tags.main.update({
      page: menu["static"] ? "static" : data.sub,
      tag: menu["static"] ? menu.tag : false,
      fullscreen: false,
      tiles: true
    });
    app.trigger("ga", data.sub);
  });
  app.on("page/detail", function (data) {
    if (!app.menu.some(function (b) {
      return b.name == data.sub;
    })) {
      return route("");
    }

    data.item = data.item || false;
    if (!app.pages[data.sub]) return;
    var pulse = app.pages[data.sub].nodes.filter(function (a) {
      return a.name == data.detail;
    }).pop();

    if (!pulse) {
      return route(data.sub);
    }

    app.lastPulse = pulse;
    app.trigger("route", {
      page: [data.sub, data.detail, data.item]
    });
    app.tags.pushask.update({
      askVisible: !!pulse.options.onesignal,
      popupText: pulse.options["onesignal-msg"],
      popupModule: pulse.options["onesignal-module"],
      askName: pulse.name
    });
    app.alert.set(false);
    app.tags.footer.update({
      button: "none"
    });
    app.page = data.sub;
    app.tags.nav.update({
      search: false
    });
    var header = {
      filter: pulse.filter,
      description: pulse.meta.desc || false,
      title: pulse.title ? pulse.title : data.detail,
      back: function back() {
        if (data.item) {
          route(data.sub + "/" + data.detail);
        } else {
          route(pulse.options.subs === false ? "home" : data.sub);
        }
      },
      menu: false
    };

    if (pulse.gallery && (!data.item || data.item == "filter")) {
      var fs = false;

      if (data.item == "filter") {
        header.back = false;
        header.filter = false;
        header.close = true;

        header.done = function () {
          route(location.hash.replace("#", "").replace("/filter", ""), {
            replace: true,
            noload: true
          });
          app.tags.main.refs.page.refs.gallery.trigger("list/filter");
        };

        fs = true;
      } else {
        header.filter = true;

        if (!data.noload) {
          var list = _lib.keep.need("list/" + data.detail);

          if (!list) {
            _lib.ajax("get", "/app/router/icon.php?quick&" + data.detail + "=list", null, function (res) {
              var obj = JSON.parse(res)[data.detail];

              _lib.keep.expire("list/" + data.detail, obj);

              this.refs.page.refs.gallery.update(app.extend(obj, {
                loading: false,
                module: data.detail
              }));
            }.bind(app.tags.main));
          } else {
            setTimeout(function () {
              if (app.tags.main.refs.page.refs.gallery.list.length == 0) {
                app.tags.main.refs.page.refs.gallery.update(app.extend(list, {
                  loading: false,
                  module: data.detail
                }));
              } else {
                app.tags.main.refs.page.refs.gallery.update({
                  loading: false
                });
              }
            }, 0);
          }
        } else {
          app.tags.main.refs.page.refs.gallery.update({
            loading: false,
            module: data.detail
          });
          app.state.set({
            noload: false
          });
        }
      }

      app.tags.main.update({
        page: "gallery",
        fullscreen: fs,
        tiles: false
      });
      app.tags.main.refs.page.refs.gallery.update({
        loading: !fs && !data.noload
      });
      app.tags.main.refs.page.refs.gallery.update({
        showFilter: fs
      });
    } else if (pulse.list && (!data.item || data.item == "filter")) {
      var _fs = false;

      if (data.item == "filter") {
        header.back = false;
        header.filter = false;
        header.close = true;

        header.done = function () {
          route(location.hash.replace("#", "").replace("/filter", ""), {
            replace: true
          });
          app.tags.main.refs.page.refs.list.trigger("list/filter");
        };

        _fs = true;
      } else {
        header.filter = true;

        var list = _lib.keep.need("list/" + data.detail);

        if (!list) {
          _lib.ajax("get", "/app/router/icon.php?quick&" + data.detail + "=list", null, function (res) {
            var list = JSON.parse(res)[data.detail].list;

            _lib.keep.expire("list/" + data.detail, list);

            this.refs.page.refs.list.update({
              list: list,
              loading: false,
              module: data.detail
            });
          }.bind(app.tags.main));
        } else {
          setTimeout(function () {
            if (app.tags.main.refs.page.refs.list.list.length == 0) {
              app.tags.main.refs.page.refs.list.update({
                list: list,
                loading: false,
                module: data.detail
              });
            } else {
              app.tags.main.refs.page.refs.list.update({
                loading: false
              });
            }
          }, 0);
        }
      }

      app.tags.main.update({
        page: "list",
        fullscreen: _fs,
        tiles: false
      });
      app.tags.main.refs.page.refs.list.update({
        loading: !_fs
      });
      app.tags.main.refs.page.refs.list.update({
        showFilter: _fs
      });
    } else {
      var _fs2 = false;

      if (data.item == "filter") {
        _fs2 = true;
        header.back = false;
        header.filter = false;
        header.fullscreen = true;
        header.close = true;

        header.done = function () {
          route(location.hash.replace("#", "").replace("/filter", ""), {
            replace: true,
            noload: true
          });
          app.tags.main.refs.page.refs.detail.trigger("list/filter");
        };

        app.tags.main.update(header);
      } else {
        app.tags.main.update({
          page: "detail",
          fullscreen: false,
          tiles: false
        });
        app.tags.main.refs.page.refs.detail.update({
          loading: true
        });

        if (!data.noload) {
          var url = "";

          if (pulse.geolocated) {
            url = "/app/router/icon.php?quick&" + data.detail + "=more&lat=" + app.location.current.point.lat + "&lng=" + app.location.current.point.lng;
          } else if (data.item && !(pulse.options && pulse.options.preloadedDetail)) {
            url = "/app/router/icon.php?quick&" + data.detail + "=more&id=" + data.item;
          } else {
            url = "/app/router/icon.php?quick&" + data.detail + "=more";
          }

          _lib.ajax("get", url, null, function (res) {
            var detail = JSON.parse(res)[data.detail];

            if (data.item) {
              detail.item = data.item;
            }

            this.refs.page.refs.detail.update({
              detail: detail,
              loading: false,
              module: data.detail
            });
          }.bind(app.tags.main));
        } else {
          app.tags.main.refs.page.refs.detail.update({
            loading: false,
            module: data.detail
          });
          app.state.set({
            noload: false
          });
        }
      }

      app.tags.main.refs.page.refs.detail.update({
        showFilter: _fs2
      });
    }

    app.tags.header.update(header);
    app.trigger("ga", data.sub + "/" + data.detail);
  });
  app.on("page/events", function (data) {
    app.trigger("route", {
      events: "events"
    });
    app.tags.pushask.update({
      askVisible: false
    });
    app.alert.set(false);
    app.tags.footer.update({
      button: "events"
    });
    app.tags.nav.update({
      search: false
    });
    var header = {
      description: false,
      title: "What's On",
      back: function back() {
        route("home");
      },
      menu: false,
      filter: true
    };
    var fs = false;

    if (data.sub == "filter") {
      header.back = false;
      header.filter = false;
      header.close = true;

      header.done = function () {
        route("events", {
          replace: true
        });
        app.tags.main.refs.page.refs.events.trigger("events/filter");
      };

      fs = true;
    }

    app.tags.main.update({
      page: "events",
      fullscreen: fs,
      tiles: false
    });

    if (data.setFilters) {
      app.tags.main.refs.page.refs.events.update(data);
    }

    app.tags.main.refs.page.refs.events.update({
      showFilter: fs
    });
    app.tags.header.update(header);
    app.trigger("ga", "events");
  });
  app.on("page/mapkey", function (data) {
    app.trigger("route", {
      mapkey: "mapkey"
    });
    app.tags.pushask.update({
      askVisible: false
    });
    app.alert.set(false);
    app.tags.footer.update({
      button: "none"
    });
    app.tags.nav.update({
      search: false
    });
    app.tags.header.update({
      back: false,
      close: true,
      description: false,
      title: "Map key",
      done: function done() {
        window.history.back();
        var x = app.tags.main.refs.page.refs.mapkey.tempkeys;
        Object.keys(x).forEach(function (a) {
          Object.keys(x[a]).forEach(function (b) {
            app.pages[a].mapkeys.filter(function (c) {
              return c.label == b;
            }).forEach(function (d) {
              return d.checked = x[a][b];
            });
          });
        });
        setTimeout(function () {
          route("map", {
            map: {
              mapkeys: app.mapkeys.getChecked()
            },
            replace: true
          });
        });
      },
      menu: false
    });
    app.tags.main.update({
      page: "mapkey",
      fullscreen: true,
      tiles: false
    });
    app.trigger("ga", "mapkey");
  });
  app.on("page/journey", function (data) {
    app.trigger("route", {
      journey: "journey"
    });
    app.tags.pushask.update({
      askVisible: false
    });
    app.alert.set(false);
    app.tags.footer.update({
      button: "journey"
    });
    app.tags.nav.update({
      search: false
    });
    app.tags.header.update({
      description: false,
      title: "Plan my trip",
      back: function back() {
        route("home");
      },
      menu: false
    });
    app.tags.main.update({
      page: "journey",
      fullscreen: false,
      tiles: false
    });
    app.tags.main.refs.page.refs.journey.update({
      to: data.title,
      toLocation: data.location,
      autorun: true
    });
    app.trigger("ga", "journey");
  });
  app.on("page/selection", function (data) {
    app.trigger("route", {
      selection: "selection"
    });
    app.tags.pushask.update({
      askVisible: false
    });
    app.alert.set(false);
    app.tags.footer.update({
      button: "none"
    });
    app.tags.nav.update({
      search: false
    });
    app.tags.header.update({
      description: false,
      title: "Map selection",
      back: true,
      menu: true
    });
    app.tags.main.update({
      page: "selection",
      fullscreen: false,
      tiles: false
    });
    app.tags.main.refs.page.refs.selection.update(data.data);
    app.trigger("ga", "selection");
  });
  app.on("page/smartmap", function (data) {
    app.trigger("route", {
      map: "map"
    });
    app.tags.pushask.update({
      askVisible: false
    });
    app.alert.set(false);
    app.tags.footer.update({
      button: "smartview"
    });
    app.tags.nav.update({
      search: false
    });
    app.tags.header.update({
      description: false,
      title: "Map View",
      back: function back() {
        if (app.routed.from) {
          history.back();
        } else {
          route("home");
        }
      },
      menu: true,
      mapkey: true
    });
    app.tags.main.update({
      page: "map",
      smartview: true,
      fullscreen: false,
      tiles: false
    });
    app.promise.map().then(function (map) {
      if (data.map) {
        app.trigger("map/setcenter", data.map.center || false, data.map.zoom || false);
      }

      if (data.detail) {
        app.gmap.trigger("load-features", {
          page: data.sub,
          item: data.detail
        });
      }

      app.trigger("map/recenter");
      app.trigger("map/data/load");
    });
    app.trigger("ga", "smartmap");
  });
  app.on("page/map", function (data) {
    var skipLoc = false;
    var skipDetail = false;
    var headerdata = {
      description: false,
      title: "Map",
      back: function back() {
        if (app.routed.from && Object.getOwnPropertyNames(app.routed.from).length > 0) {
          history.back();
        } else {
          route("home");
        }
      },
      icon: '/assets/publica/sets/Map_Icon.svg',
      menu: true,
      mapkey: true
    };
    app.tags.pushask.update({
      askVisible: false
    });
    app.alert.set(false);

    if (data.item && data.item == "list") {
      app.tags.map.update({
        featurelist: true
      });
      app.tags.header.update({
        description: false,
        title: "List",
        back: function back() {
          history.back();
        },
        menu: true,
        mapkey: false
      });
      return;
    } else {
      if (app.tags.map) {
        var oldflist = app.tags.map.featurelist;
        app.tags.map.update({
          featurelist: false
        });

        if (oldflist) {
          app.tags.header.update(headerdata);
          return;
        }
      }
    }

    if (data.sub == "key") {
      data.map = {
        mapkey: data.detail
      };
      delete data.detail;
    }

    app.trigger("route", {
      map: "map",
      data: data
    });
    app.tags.footer.update({
      button: "smartview"
    });
    app.tags.nav.update({
      search: false
    });
    app.tags.header.update(headerdata);
    app.tags.main.update({
      page: "map",
      smartview: true,
      fullscreen: false,
      tiles: false
    });
    app.promise.map().then(function (map) {
      if ((data.clear || data.sub == "layer" || data.sub == "layers") && data.detail && !data.clearAll) {
        var layers = data.detail.split(";");

        if (layers.every(function (layer) {
          return $mn.layers.has(layer) || $mn.markers.has(layer);
        }) && layers.length == Object.keys($mn.layers.list).length + Object.keys($mn.markers.list).length) {
          data.clear = false;
          skipDetail = true;
        } else {
          app.maplegend.reset(true);
        }
      }

      if (!skipDetail && (data.clear || data.sub == "layer" || data.sub == "layers" || data.item)) {
        app.journies.clear();

        if (data.map && data.map.mapkey) {
          app.gmap.setKeyAll(false, data.map.mapkey);
        } else {
          app.gmap.setKeyAll(false, data.detail);
        }

        $mn.layers.clear(data.clearAll ? false : data.detail);
        $mn.markers.clear(data.clearAll ? false : data.detail);
        if (app.tags.map) app.tags.map.update({
          popup: false
        });
      }

      if (data.map) {
        if (data.map.center || data.map.zoom) {
          app.trigger("map/setcenter", data.map.center || false, data.map.zoom || false);
          app.trigger("map/recenter");
          skipLoc = true;
        }

        if (data.map.locate) {
          app.trigger("map/center", function () {
            app.trigger("map/recenter");
          });
          skipLoc = true;
        }

        if (data.map.locate || data.map.boundClosest) {
          data.cb = function (feats) {
            app.promise.mapLayer().then(function (a) {
              setTimeout(function () {
                if (!data.map.zoom) $mn.isMap().setZoom(20);
                $mn.isMap().setCenter(app.location.current.point);

                if (!data.map.zoom || data.map.boundClosest) {
                  _maps.extendBoundaries($mn.isMap(), [$mn.layers.findClosest().marker]);

                  var x = $mn.isMap().getBounds();
                  x.extend(app.location.current.point);
                  $mn.isMap().fitBounds(x);
                }
              }, 200);
            });
          };
        }

        if (data.map.contain) {
          data.cb = function (feats) {
            _maps.extendBoundaries($mn.isMap(), feats.filter(function (a) {
              return !a.getProperty("dontExtendTo");
            }));
          };

          skipLoc = true;
        }

        if (data.map && data.map.mapkeys) {
          app.mapkeys.checkList(data.map.mapkeys);
        }

        if (data.map && data.map.mapkey) {
          app.gmap.setKey(data.map.mapkey);
        }
      }

      var findAndSelect = function findAndSelect() {
        if (data.feature) {
          setTimeout(function () {
            var x = $mn.layers.find(data.feature);
            app.gmap.map.data.revertStyle();
            $mn.layers.deactivateFeature();

            if (x) {
              var _data$map$zoom;

              $mn.layers.activateFeature(x);
              app.trigger("map/setcenter", _maps.getCenter(x.getGeometry()), (_data$map$zoom = data.map.zoom) !== null && _data$map$zoom !== void 0 ? _data$map$zoom : app.conf.defaultMapZoom);
              app.trigger("map/recenter");
            }
          }, 0);
        }
      };

      if (data.detail && !skipDetail) {
        app.page = Object.keys(app.pages).filter(function (a) {
          return app.pages[a].nodes.some(function (b) {
            return b.name == data.detail || b["map-layer"] && b["map-layer"] == data.detail || b["extra_layers"] && b["extra_layers"] == data.detail || b["options"]["map-layer"] && b["options"]["map-layer"] == data.detail || b["options"]["extra_layers"] && b["options"]["extra_layers"] == data.detail;
          });
        }).pop() || "home";
        var pulse = Object.keys(app.pages).reduce(function (r, a) {
          r = r.concat(app.pages[a].nodes.filter(function (b) {
            return b.name == data.detail || b["map-layer"] && b["map-layer"] == data.detail || b["extra_layers"] && b["extra_layers"] == data.detail || b["options"]["map-layer"] && b["options"]["map-layer"] == data.detail || b["options"]["extra_layers"] && b["options"]["extra_layers"] == data.detail;
          }));
          return r;
        }, []);

        if (pulse.length == 1) {
          pulse = pulse[0];
          app.tags.header.update({
            description: pulse.meta.desc || false,
            title: pulse.title ? pulse.title : data.detail
          });
        } else {
          app.tags.header.update({
            description: false,
            title: "Map"
          });
        }

        self.refs.page.update();

        var _layers = data.detail.split(";");

        _layers.forEach(function (layer) {
          app.gmap.setKey(layer);
          var params = {
            page: data.sub,
            item: layer,
            cb: function cb(feats) {
              findAndSelect();

              if (data.filter) {
                app.trigger("map/filter/" + layer, data.filter);
              }

              if (data.cb) {
                data.cb(feats);
              }
            }
          };

          if (data.item) {
            params.id = data.item;
          }

          if (data.filter) {
            params.filter = data.filter;
          }

          app.gmap.trigger("load-features", params);
        });
      } else if (data.feature) {
        app.gmap.trigger("add-feature", data.feature);
      } else {
        app.trigger("map/data/load");
      }

      if (!data) {
        app.mapkeys.checkList(app.session.get("map.mapkeys"));
      }

      if (data.loc && !skipLoc) {
        app.trigger("map/setcenter", data.loc, data.loc[2]);
        app.trigger("map/recenter");
      } else if (!data.skipRecenter && !data.feature) {
        app.trigger("map/recenter");
      }
    }, function (a) {
      return console.log(a);
    });

    if (data.detail) {
      app.trigger("ga", "map/" + data.detail);
    } else if (data.map && data.map.mapkey) {
      app.trigger("ga", "map/" + data.map.mapkey);
    } else {
      app.trigger("ga", "map");
    }
  });

  (function (routes) {
    routes.forEach(function (a) {
      function createRoute(r, p) {
        route(r, function (fceparam) {
          var args = Array.prototype.slice.call(arguments);
          var params = {};
          var data = {};
          args = args.filter(function (a) {
            if (a[0] == "@") {
              params.loc = a.substr(1).split(",");
              return false;
            } else if (a[0] == "/" && a[1] == "@") {
              params.loc = a.substr(2).split(",");
              return false;
            } else {
              return true;
            }
          });

          switch (args.length) {
            case 4:
              params.item = args[2];

            case 3:
              params.detail = args[1];

            case 2:
              params.sub = args[0];

            case 1:
              data = args.pop();
              break;
          }

          if (params.detail && params.detail == "limescooter") {
            params.detail = "escooters";
            route(args.join("/").replace("limescooter", "escooters"));
          }

          if (params.detail && (params.detail == "layer" || params.detail == "layers") && params.sub && params.sub == "limescooter") {
            params.sub = "escooters";
            route(args.join("/").replace("limescooter", "escooters"));
          }

          if (params.sub && params.sub == "poweroutage") {
            route("/map/layers/poweroutage");
          }

          console.log("Page data", params, data);

          if (window.config.hashbang != "#" && params.sub == location.hash.substr(1)) {
            if (params.sub.split("@")[0].length > 1) {
              console.log("# rewrite - " + location.hash.substr(1).split("@")[0]);
              route(location.hash.substr(1).split("@")[0]);
              return;
            }
          }

          if ((window.config.hashbang == "#" ? location.hash : location.pathname) == window.firstLoad) {
            if (params.item && params.item == "filter" || params.sub && params.sub == "filter") {
              route(location.hash.replace("/filter", "").replace("#", ""), {
                replace: true
              });
              window.firstLoad = false;
              return;
            }

            if (params.item && params.item == "list") {
              route(location.hash.replace("/list", "").replace("#", ""), {
                replace: true
              });
              window.firstLoad = false;
              return;
            }
          } else {
            window.firstLoad = false;
          }

          app.page = "home";

          app.lastSectionTrigger = function () {
            return app.trigger(p, app.extend(params, data));
          };

          app.lastSectionTrigger();
        });
      }

      if (Array.isArray(a[0])) {
        a[0].forEach(function (c) {
          createRoute(c, a[1]);
        });
      } else {
        createRoute(a[0], a[1]);
      }
    }, false);
  })([["", "page/home"], ["search..", "search"], [["events/*", "events"], "page/events"], ["mapkey..", "page/mapkey"], ["selection..", "page/selection"], [["smartmap", "smartmap/*", "smartmap/*/*"], "page/smartmap"], [["map", "map/*", "map/*/*", "map/*/*/*", "map/*/*/*/*"], "page/map"], ["journey..", "page/journey"], ["*", "page/sub"], [["*/*", "*/*/*"], "page/detail"]]);
});
riot.tag2('page-content', '<featured-buttons if="{c.home && app.featured.getNodes()}"></featured-buttons> <page-button hide="{!c.home}" if="{m.home}" each="{homeMenu}"></page-button> <environment-main hide="{!c.environment}" if="{m.environment}"></environment-main> <play-main hide="{!c.play}" if="{m.play}"></play-main> <travel-main hide="{!c.travel}" if="{m.travel}"></travel-main> <now-main hide="{!c.now}" if="{m.now}"></now-main> <community-main hide="{!c.community}" if="{m.community}"></community-main> <feelme-main if="{c.feelme}"></feelme-main> <detail ref="detail" hide="{!c.detail}" if="{c.detail}"></detail> <list ref="list" hide="{!c.list}" if="{m.list}"></list> <gallery ref="gallery" hide="{!c.gallery}" if="{m.gallery}"></gallery> <journey-planner ref="journey" hide="{!c.journey}" if="{m.journey}"></journey-planner> <map-selection ref="selection" if="{m.selection&&c.selection}"></map-selection> <events ref="events" hide="{!c.events}" if="{m.events}"></events> <search ref="search" hide="{!c.search}" if="{m.search}"></search> <mapview if="{m.map}" hide="{!c.map}"></mapview> <static-page if="{c.static}" data-tag="{parent.tag}"></static-page>', 'page-content { display: flex; flex-wrap: wrap; min-height: 100%; position: relative; }', 'class="{full-screen:parent.fullscreen,tiles:parent.tiles} {app.page}"', function (opts) {
  this.c = {
    home: true
  };
  this.m = {
    home: true
  };
  this.page = 'home';
  this.on("mount", function () {
    this.homeMenu = app.menu.filter(function (a) {
      return a.homePage;
    });
    this.homeMenu = this.homeMenu.filter(function (a) {
      return app.pages[a.name].nodes.length;
    });
  });
  this.on("update", function () {
    this.page = this.opts.page;
    this.m[this.page] = true;
    this.c = {};
    this.c[this.page] = true;
    document.body.classList.toggle("max-view", !!this.c.map);
  });
});
riot.tag2('static-page', '<div data-is="{opts.dataTag}"></div>', '', '', function (opts) {
  var _this42 = this;

  this.on("mount", function () {
    return _this42.update();
  });
  this.on("update", function () {
    console.log(this);
  });
});
riot.tag2('map-selection', '<raw if="{content&&!detail&&!detailtag}" content="{content}"></raw> <selection-detail if="{detail&&!content&&!detailtag}" detail="{detail}"></selection-detail> <detail ref="detailtag" if="{detailtag&&!content&&!detail}" detail="{detailtag}"></detail>', 'map-selection { width: 100vw; display: block; color: white; padding: 15px; position: relative; }', 'class="fill-page b-light"', function (opts) {
  this.detailLoaded = false;
  this.on("update", function () {
    if (this.zoom || this.location) {
      app.trigger("map/setcenter", this.location, this.zoom || 15);
    }

    if (this.placeid) {
      if (this.detailLoaded != this.placeid) {
        var self = this;

        _maps.detailUpdateCall(function (a) {
          self.detailLoaded = self.placeid;
          self.detailtag.list = self.detailtag.list.concat(a);

          if (self.refs.detailtag) {
            self.refs.detailtag.update();
          } else {
            self.update();
          }
        }, self.placeid);
      }
    }
  });

  this.close = function () {
    history.back();
  }.bind(this);
});
riot.tag2('selection-detail', '<div each="{detail}"> <hr if="{colorLine}" riot-style="background-color:{colorLine}"> <img height="100" if="{image}" riot-src="{image}"> <h6 class="f-p1">{name}</h6> <h6 class="f-p1" if="{subname}">{subname}</h6> <div each="{info}" if="{info}"> <strong class="f-p3" if="{label}">{label}</strong> <p if="{text}">{text}</p> </div> <a class="button" if="{link}" href="{link}">Learn more</a> </div>', 'selection-detail hr,[data-is="selection-detail"] hr{ border: none; outline: none; height: 7px; } selection-detail h6,[data-is="selection-detail"] h6{ margin: 10px 0px; } selection-detail img,[data-is="selection-detail"] img{ float: right; margin: 10px } selection-detail .f-p3,[data-is="selection-detail"] .f-p3{ color: black } selection-detail p,[data-is="selection-detail"] p{ margin-top: 0 } selection-detail a.button,[data-is="selection-detail"] a.button{ text-decoration: none; box-shadow: 2px 2px 0px 0px gray; position: relative; padding: 10px; float: right; }', '', function (opts) {
  var _this43 = this;

  this.on("mount", function () {
    return _this43.update();
  });
  this.on("update", function () {
    _this43.detail = [_this43.opts.detail];
  });
});
riot.tag2('status-icons', '<section draggable="false" class="top-icon-bar device_large toggle home play find travel now environment community"> <div class="icon-arrow-left"></div> <div class="container_1 horizontal_menu"> <div class="inner"> <status-icon each="{icons}" data="{this}"></status-icon> </div> </div> <div class="icon-arrow-right"></div> <div class="icon-arrow-close"></div> </section>', '', '', function (opts) {
  this.icons = app.iconjson;
  this.icons.forEach(function (v, i) {
    var v = this.icons[i];
    this.icons[i].alt = v.text;
    this.icons[i].title = v.text.split("<br>")[0];
    this.icons[i].data = v.text.split("<br>")[1];
    this.icons[i].img = v.icon2 ? v.icon2 : v.icon;
    this.icons[i].classes = {
      floatLeft: true,
      sub_icon: true
    };
    this.icons[i].cls.forEach(function (v) {
      this.icons[i].classes[v] = true;
    }.bind(this));
  }.bind(this));
  console.log(this.icons);
});
riot.tag2('status-icon', '<div class="{classes}" data-icon-name="{name}" data-icon-time="{time}"> <img alt="{alt}" draggable="false" class="icon_svg" riot-src="/assets/svg/white/{img}-white.svg"> <div class="icon_text">{title}<br>{data}</div> </div>', '', '', function (opts) {});
riot.tag2('travel-main', '<pulse-box each="{nodes}"></pulse-box>', 'travel-main { display: flex; align-content: flex-start; flex-direction: row; flex-wrap: wrap; }', 'class="pulse-page"', function (opts) {
  var nodes = [];
  this.on("mount", function () {
    this.update();
  });
  this.on("update", function () {
    this.nodes = app.pages.travel.nodes;
  });
});
riot.tag2('smart-community', '<table> <tr each="{app.pages.community.nodes}"> <td>{name}</td> <td>{text}</td> </tr> </table>', '', '', function (opts) {});
riot.tag2('smart-environment', '<table> <tr each="{app.pages.environment.nodes}"> <td>{name}</td> <td>{text}</td> </tr> </table>', '', '', function (opts) {});
riot.tag2('smart-now', '<table> <tr each="{app.pages.now.nodes}"> <td>{name}</td> <td>{text}</td> </tr> </table>', '', '', function (opts) {});
riot.tag2('smart-play', '<div each="{events}"> <h3>{name_short}</h3> <p>{description}</p> <p>{date}</p> <i>{from}</i> </div> <button click="{whatshappening}">Go to What\'s Happening</button>', 'smart-play events,[data-is="smart-play"] events{ padding: 0px 15px; }', '', function (opts) {
  this.whatshappening = function () {
    route("events");
  };

  this.events = [];
  this.on("mount", function () {
    _lib.ajax.$get("/app/router/event.php?time-today", function (data) {
      data = JSON.parse(data);
      this.events = Object.keys(data.data).reduce(function (b, a) {
        var item = data.data[a];
        item.point = JSON.parse(item.point);

        if (app.lastPosition) {
          item.distance = _maps.distance(item.point.coordinates[1], item.point.coordinates[0], app.lastPosition.lat, app.lastPosition.lng);
        } else {
          item.distance = false;
        }

        return b.concat([item]);
      }, []).sort(function (a, b) {
        if (a.distance < b.distance) return -1;
        if (a.distance == b.distance) return 0;
        if (a.distance > b.distance) return 1;
      }).splice(0, 3);
      this.update();
    }.bind(this));
  });
});
riot.tag2('smart-travel', '<table> <tr each="{app.pages.travel.nodes}"> <td>{name}</td> <td>{text}</td> </tr> </table>', '', '', function (opts) {});
riot.tag2('detail-airquality', '<div class="wrapper" if="{detail}"> <div class="detailsection" if="{detail.stations}"> <div class="detail-flex detail-section detail-header-table margin-top "> <div> <div>Station</div> <div>{currentStationName}</div> </div> <div class="buttons"> <button class="{active:stationDetails}" click="{showStations}">Change</button> </div> </div> <div if="{stationDetails}" class="detail-section detail-data detail-flex flex-left"> <select change="{changeStation}" style="width:100%;padding:5px;"> <option value="-1">Closest to your location</option> <option each="{detail.stations}" riot-value="{oid}" selected="{oid==currentStation}">{name}</option> </select> </div> </div> <div ref="list" class="detailsection" if="{detail.list}"> <div each="{item in detail.list}" hide="{item.hide||item.hideMain}" class="{item.class}"> <content-box params="{toParam(item)}"></content-box> </div> <detail-item-news if="{this.detail.relatedNews}" data-item="{this.detail.relatedNews}"></detail-item-news> </div> </div>', 'detail-airquality h3,[data-is="detail-airquality"] h3{ margin-top: 5px; margin-bottom: 5px; font-weight: bold; width: 100%; flex-basis: 100%; text-align: center; flex-shrink: 0; }', '', function (opts) {
  var _this44 = this;

  this.stationDetails = false;
  this.currentStation = -1;
  this.currentStationName = "Closest to your location";
  var self = this;
  var paramsMap = new Map();

  this.getGraphUrl = function (name) {
    return "/app/router/airquality.php?lat=" + app.lastPosition.lat + "&lng=" + app.lastPosition.lng + "&air=" + name;
  };

  this.toParam = function (item) {
    console.log(paramsMap);

    if (paramsMap.has(item.data.name)) {
      return paramsMap.get(item.data.name);
    } else {
      var _item$station;

      var data = innerself = {
        label: item.label,
        sub: item.values[0],
        detailTitle: ((_item$station = item.station) !== null && _item$station !== void 0 ? _item$station : 'Closest') + "  station data",
        mixin: item,
        useAboutButton2Graph: true,
        callback: function callback(box) {
          paramsMap.get(item.data.name).box = box;
          console.log("box set", paramsMap.get(item.data.name), box);
        },
        graph: {
          id: item.data.name,
          url: this.getGraphUrl(item.data.name),
          graphData: item.graphData,
          callback: function callback(ret) {
            var calcy = ret.y.map(parseFloat).filter(function (a) {
              return !isNaN(a);
            });
            paramsMap.get(item.data.name).details[0].value = item.maximum = calcy.reduce(function (a, b) {
              return a > b ? a : b;
            }, 0);
            paramsMap.get(item.data.name).details[1].value = item.average = Math.round(100 * calcy.reduce(function (a, b) {
              return a + b;
            }, 0) / calcy.length) / 100;
            paramsMap.get(item.data.name).graph.graphData = item.graphData = ret;
            paramsMap.get(item.data.name).detailTitle = item.station = item.data.data.name + "  station data";
            console.log("graph update", item, paramsMap.get(item.data.name));
            if (paramsMap.get(item.data.name).box) paramsMap.get(item.data.name).box.update();
          }
        },
        details: [{
          label: "maximum",
          value: item.maximum,
          unit: item.data.unit,
          svgIcon: "Max"
        }, {
          label: "average",
          value: item.average,
          unit: item.data.unit,
          svgIcon: "Avg"
        }]
      };
      paramsMap.set(item.data.name, data);
      return data;
    }
  };

  this.showStations = function (e) {
    this.stationDetails = !this.stationDetails;
  }.bind(this);

  this.changeStation = function (e) {
    app.off("geolocation/search", refresh);
    paramsMap.clear();
    console.log("station change", paramsMap);
    this.currentStation = e.target.value;
    this.currentStationName = e.target.options[e.target.selectedIndex].innerHTML;

    if (this.currentStation == -1) {
      refresh();
    } else {
      _lib.ajax.$get("/app/router/icon.php?quick&airquality=more&id=" + this.currentStation + "&lat=" + app.location.current.point.lat + "&lng=" + app.location.current.point.lng, function (data) {
        var j = JSON.parse(data);
        app.tags.main.refs.page.refs.detail.update({
          detail: j.airquality,
          loading: false,
          module: "airquality"
        });
      });
    }
  }.bind(this);

  function refresh() {
    app.lastSectionTrigger();
  }

  this.on("mount", function () {
    _this44.update();

    app.on("geolocation/search", refresh);
  });
  this.on("onmount", function () {
    app.off("geolocation/search", refresh);
  });
  this.on("update", function () {
    var _this45 = this;

    this.detail = this.parent ? this.parent.detail : this.opts.dataDetail;
    this.detail.hasHeader = !(this.detail.options && this.detail.options.no_header) && (this.detail.value || this.detail.label || this.detail.image || this.detail.desc);
    if (this.detail && this.detail[0] && this.detail[0].icon2) this.detail[0].image = "/assets/svg/" + this.detail[0].icon2 + "-black.svg";

    if (this.detail.desc) {
      this.detail.desc = this.detail.desc.trim();
      var x = this.detail.desc.split(". ");

      if (x.length > 0 && x[0].length < 30) {
        this.detail.descHeader = x.shift();
      }

      this.detail.desc = x.join(".");
    }

    if (this.detail.filterPanel) {
      this.detail.filterPanel.forEach(function (a) {
        a.checked = app.session.get(a.options.radio) == a.id;

        if (a.checked) {
          _this45.doFilter({
            target: {
              checked: true
            },
            item: a
          });
        }
      });
    }

    console.log("Detail", this);
    app.alert.set({
      collapsed: true,
      title: "Air quality index",
      msg: Object.keys(this.detail.names).reduce(function (a, b) {
        return a + "<b>".concat(_this45.detail.names[b], "</b><br> ").concat(_this45.detail.descs[b], "<br>");
      }, "")
    });
  });

  this.showDetail = function (e) {
    app.trigger("detail/click/" + this.parent.module, e.item);
  }.bind(this);

  this.loadItemDetail = function (item, done, box) {};

  this.showItemDesc = function (e) {
    var _this46 = this;

    e.item.item.showDesc = e.item.item.showDesc ? false : true;

    if (e.item.item.showDesc) {
      if (e.item.item.graphData) {
        e.item.item.showGraph = true;
      } else {
        e.item.item.graphLoading = true;
        e.item.item.showGraph = true;

        _lib.ajax.$get("/app/router/airquality.php?lat=" + app.lastPosition.lat + "&lng=" + app.lastPosition.lng + "&air=" + e.item.item.data.name, function (ret) {
          ret = JSON.parse(ret);
          var calcy = ret.y.map(parseFloat).filter(function (a) {
            return !isNaN(a);
          });
          e.item.item.maximum = calcy.reduce(function (a, b) {
            return a > b ? a : b;
          }, 0);
          e.item.item.average = Math.round(100 * calcy.reduce(function (a, b) {
            return a + b;
          }, 0) / calcy.length) / 100;
          e.item.item.graphData = ret;
          e.item.item.station = e.item.item.data.data.name;
          ret.line = {
            color: "#cadb44",
            width: 1
          };
          var width = parseInt(getComputedStyle(_this46.refs.list).width) - 20;
          document.getElementById("oid" + e.item.item.data.name).style.width = width + "px";
          Plotly.plot(document.getElementById("oid" + e.item.item.data.name), [ret], {
            margin: {
              t: 0,
              b: 30,
              l: 20,
              r: 0
            },
            width: width - 5,
            autosize: true,
            paper_bgcolor: "#fff",
            plot_bgcolor: "transparent"
          }, {
            scrollZoom: false,
            staticPlot: true,
            responsive: true,
            width: width,
            displayModeBar: false
          });
          e.item.item.graphLoading = false;

          _this46.update();
        });
      }
    } else {
      e.item.item.showGraph = false;
      e.item.item.graphData = false;
      e.item.item.maximum = false;
      e.item.item.average = false;
      e.item.item.station = false;
    }
  }.bind(this);

  this.hideDescGo = function (e) {
    if (this.showDesc) {
      this.showDesc = false;
      window.removeEventListener("click", this.hideDescGo);
      this.update();
    }
  }.bind(this);

  this.showMapLayer = function (e) {
    var data = {
      detail: this.detail.options.map_layer,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    route("map/layers/" + this.detail.options.map_layer, data);
  }.bind(this);

  this.showMapFeature = function (e) {
    var data = {
      feature: this.detail.options.map_feature,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    if (this.detail.options.map_layer) {
      data.detail = this.detail.options.map_layer;
    }

    route("map", data);
  }.bind(this);

  this.showItemFeature = function (e) {
    var data = {
      clear: true,
      detail: this.detail.options.map_layer,
      map: {
        center: e.item.item.data.location.coordinates
      }
    };
    route("map", data);
  }.bind(this);

  this.showJourneyPlanner = function (e) {
    var _this47 = this;

    app.promise.google().then(function () {
      var data = {
        feature: _this47.detail.options.map_feature,
        title: _this47.detail.value,
        location: _maps.getCenter(_maps.GeoJSON(_this47.detail.options.map_feature.geometry, {}, true)).toJSON()
      };
      route("journey", data);
    });
  }.bind(this);

  this.mainFilterGo = function (e) {
    this.detail.list.forEach(function (b) {
      b.hideMain = !(e.target.value == "All" || e.target.value == b.label);
    });
  }.bind(this);

  this.doFilter = function (e) {
    e.item.checked = e.target.checked;
    var d = {};
    d[e.item.options.radio] = e.item.id;
    app.session.set(d);

    if (e.item.checked) {
      this.detail.filterPanel.filter(function (a) {
        return a != e.item && (!a.options.radio || a.options.radio == e.item.options.radio);
      }).forEach(function (a) {
        a.checked = false;
      });
    }

    if (e.item.options.type == "value") {
      this.detail.list.forEach(function (b) {
        b.hide = false;
      });
      this.detail.filterPanel.filter(function (a) {
        return a.checked;
      }).forEach(function (a) {
        this.detail.list.forEach(function (b) {
          if (b.values.every(function (c) {
            return c != a.value;
          })) {
            b.hide = true;
          }
        });
      }.bind(this));
    } else if (e.item.options.type == "order") {
      this.detail.list = this.detail.list.sort(function (a, b) {
        return b.data[e.item.value] - a.data[e.item.value];
      });
    }

    ;
  }.bind(this);
});
riot.tag2('detail-araflow', '<div class="wrapper" if="{detail}"> <div class="detail-section controls noTopMargin"> <form class="filter full-width"> <fieldset> <legend>Search by location</legend> <div class="flex"> <select change="{setFilter}"> <option each="{sublist,cat in list}" riot-value="{cat}">{cat}</option> </select> </div> </fieldset> </form> </div> <div ref="list" class="detailsection" if="{detail.list}"> <div each="{item in getList()}" hide="{item.hide||item.hideMain}" class="{item.class}"> <content-box params="{toParam(item)}" fav="{getFavData(item)}"></content-box> </div> </div> </div>', 'detail-araflow .detailsection,[data-is="detail-araflow"] .detailsection{ width: 100%; }', '', function (opts) {
  var _this49 = this;

  this.showDesc = false;
  this.filterRoute = "Northern Approach";
  this.alertText = "Try to favourite a route<br> to see the traffic status <br>on the home page";

  this.setFilter = function (e) {
    this.filterRoute = e.target.value;
  }.bind(this);

  this.getList = function () {
    var _this48 = this;

    return this.detail.list.filter(function (a) {
      return a.data.category == _this48.filterRoute;
    });
  };

  this.anyVisible = function () {
    return !_this49.detail.list.every(function (a) {
      return a.hide;
    });
  };

  this.toParam = function (item) {
    var _data$details;

    var data = {
      label: item.data.category,
      sub: item.label,
      details: []
    };

    (_data$details = data.details).push.apply(_data$details, [{
      label: "usual time",
      value: item.values[1],
      svgIcon: "Time"
    }, {
      label: "actual time",
      value: item.values[2],
      svgIcon: "Time"
    }, {
      label: "status",
      value: parseInt(item.values[2]) - parseInt(item.values[1]),
      unit: "min",
      svgIcon: "Status"
    }]);

    return data;
  };

  this.getFavData = function (item) {
    return {
      page: "travel",
      detail: "araflow",
      id: item.data.id,
      label: item.label,
      alertText: this.alertText,
      data: [{
        title: "usual time",
        value: "".concat(item.values[1], "min"),
        svgIcon: "Time"
      }, {
        title: "actual time",
        value: "".concat(item.values[2], "min"),
        svgIcon: "Time"
      }, {
        title: "status",
        value: "".concat(parseInt(item.values[2]) - parseInt(item.values[1]), "min"),
        svgIcon: "Status"
      }],
      update_on: new Date(),
      expire_after: {
        val: 5,
        dim: "mins"
      }
    };
  };

  this.showDetail = function (e) {
    console.log(e);

    if (e.item.item.showSubDetail) {
      e.item.item.showSubDetail = false;
    } else {
      e.item.item.showSubDetail = true;
    }
  }.bind(this);

  this.on("mount", function () {
    return _this49.update();
  });
  this.on("update", function () {
    this.detail = this.parent ? this.parent.detail : this.opts.dataDetail;
    if (this.detail && this.detail[0] && this.detail[0].icon2) this.detail[0].image = "/assets/svg/" + this.detail[0].icon2 + "-black.svg";

    if (this.detail.desc) {
      this.detail.desc = this.detail.desc.trim();
      var x = this.detail.desc.split(".");

      if (x.length > 0 && x[0].length < 30) {
        this.detail.descHeader = x.shift();
      }

      this.detail.desc = x.join(".");
    }

    if (this.detail && this.detail.list && !this.list) {
      this.list = this.detail.list.reduce(function (r, a) {
        if (r[a.values[0]]) {
          r[a.values[0]].push(a);
        } else {
          r[a.values[0]] = [a];
          r[a.values[0]].hide = true;
        }

        return r;
      }, {});
      console.log(this.list);
    }
  });

  this.showcat = function (e) {
    e.item.sublist.hide = !e.item.sublist.hide;
  }.bind(this);

  this.showDescGo = function (e) {
    var _this50 = this;

    if (!this.showDesc) {
      this.showDesc = true;
      setTimeout(function () {
        return window.addEventListener("click", _this50.hideDescGo);
      });
    }
  }.bind(this);

  this.hideDescGo = function (e) {
    if (this.showDesc) {
      this.showDesc = false;
      window.removeEventListener("click", this.hideDescGo);
      this.update();
    }
  }.bind(this);

  this.showMapLayer = function (e) {
    var data = {
      detail: this.detail.options.map_layer,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    route("map", data);
  }.bind(this);

  this.showMapFeature = function (e) {
    var data = {
      feature: this.detail.options.map_feature,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    if (this.detail.options.map_layer) {
      data.detail = this.detail.options.map_layer;
    }

    route("map", data);
  }.bind(this);

  this.showJourneyPlanner = function (e) {
    var _this51 = this;

    app.promise.google().then(function () {
      var data = {
        feature: _this51.detail.options.map_feature,
        title: _this51.detail.value,
        location: _maps.getCenter(_maps.GeoJSON(_this51.detail.options.map_feature.geometry, {}, true)).toJSON()
      };
      route("journey", data);
    });
  }.bind(this);

  this.mainFilterGo = function (e) {
    this.detail.list.forEach(function (b) {
      b.hideMain = !(e.target.value == "All" || e.target.value == b.label);
    });
  }.bind(this);

  this.doFilter = function (e) {
    e.item.checked = e.target.checked;

    if (e.item.checked) {
      this.detail.filterPanel.filter(function (a) {
        return a != e.item && (!a.options.radio || a.options.radio == e.item.options.radio);
      }).forEach(function (a) {
        a.checked = false;
      });
    }

    if (e.item.options.type == "value") {
      this.detail.list.forEach(function (b) {
        b.hide = false;
      });
      this.detail.filterPanel.filter(function (a) {
        return a.checked;
      }).forEach(function (a) {
        this.detail.list.forEach(function (b) {
          if (b.values.every(function (c) {
            return c != a.value;
          })) {
            b.hide = true;
          }
        });
      }.bind(this));
    }
  }.bind(this);
});
riot.tag2('detail-bus', '<virtual if="{detail}"> <pulse-box each="{detail.nodes}"></pulse-box> <div class="detailsection"> <div class="detail-flex detail-section detail-header-table margin-top "> <div> <div>Statistics</div> </div> <div class="buttons"> <a href="{window.config.hashbang}map/layers/bus-routes;bus-position;bus-stops" class="detail-button">Map</a> </div> </div> <div class="detail-section detail-data detail-flex flex-left"> <p> Number of buses currently roaming: {detail.stats.buses.toLocaleString()} </p> <p> Number of bus trips for today: {detail.stats.trips.toLocaleString()} </p> <p> Number of bus stops: {detail.stats.stops.toLocaleString()} </p> </div> <div class="detail-flex detail-section detail-header-table margin-top "> <div> <div>Nearest bus stops</div> </div> </div> <detail-bus-stop if="{busStopLoaded}" each="{busStop in busStops}"></detail-bus-stop> </virtual>', 'detail-bus .subdetail tr,[data-is="detail-bus"] .subdetail tr{ border-bottom: none; } detail-bus .subdetail tr.graph,[data-is="detail-bus"] .subdetail tr.graph{ border-top: none; } detail-bus .subdetail tr.graph td,[data-is="detail-bus"] .subdetail tr.graph td{ padding-bottom: 20px; text-align: left; } detail-bus .detail-header-table>div:first-child,[data-is="detail-bus"] .detail-header-table>div:first-child{ width: 60%; } detail-bus .buttons,[data-is="detail-bus"] .buttons{ max-width: 40%; display: flex; flex-grow: 0; flex-flow: wrap; place-content: end; align-items: center; place-content: flex-end; } detail-bus button,[data-is="detail-bus"] button{ margin-right: 2px } detail-bus .detail-section p,[data-is="detail-bus"] .detail-section p{ width: 100%; }', '', function (opts) {
  var _this52 = this;

  var self = this;
  this.busStopLoaded = false;
  this.busStop = {};
  this.busStops = [];
  this.stopAjax;
  this.stopInterval;

  this.updateStop = function () {
    if (self.stopAjax) self.stopAjax.abort();
    self.stopAjax = _lib.ajax.$get("/app/router/bus_stop.php?count=3&lat=" + app.lastPosition.lat + "&lng=" + app.lastPosition.lng, function (ret) {
      ret = JSON.parse(ret);
      self.busStops = ret.map(function (a) {
        var location = JSON.parse(a.geojson);
        return {
          name: a.platformname,
          routes: a.routes,
          id: a.platformid,
          location: location,
          distance: _maps.distanceRoundFormat(_maps.distance(location.coordinates[1], location.coordinates[0], app.lastPosition.lat, app.lastPosition.lng)),
          times: Object.keys(a.times).reduce(function (r, c) {
            r.push({
              name: c,
              time: a.times[c][0]
            });
            return r;
          }, []).sort(function (c, b) {
            return c.time - b.time;
          })
        };
      });
      self.busStopLoaded = true;
      self.update();
      self.stopInterval = setTimeout(self.updateStop, 60000);
    });
  };

  this.on("unmount", function () {
    clearTimeout(_this52.stopInterval);
    if (_this52.stopAjax) _this52.stopAjax.abort();
  });
  this.on("mount", function () {
    _this52.update();

    _this52.updateStop();
  });
  this.on("update", function () {
    this.detail = this.parent ? this.parent.detail : this.opts.dataDetail;
    if (this.detail && this.detail[0] && this.detail[0].icon2) this.detail[0].image = "/assets/svg/" + this.detail[0].icon2 + "-black.svg";
  });

  this.showMapLayer = function (e) {
    var data = {
      detail: this.detail.options.map_layer,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    route("map/layers/bus-routes;bus-position;bus-stops", data);
  }.bind(this);

  this.showMapFeature = function (e) {
    var data = {
      feature: this.detail.options.map_feature,
      clear: true,
      map: {}
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    if (this.detail.options.map_layer) {
      data.detail = this.detail.options.map_layer;
    }

    data.map.center = {
      lat: this.busStop.location.coordinates[1],
      lng: this.busStop.location.coordinates[0]
    };
    route("map/layers/bus-routes;bus-position;bus-stops", data);
  }.bind(this);

  this.showJourneyPlanner = function (e) {
    var _this53 = this;

    app.promise.google().then(function () {
      var data = {
        feature: _this53.detail.options.map_feature,
        title: _this53.detail.value,
        location: _maps.getCenter(_maps.GeoJSON(_this53.detail.options.map_feature.geometry, {}, true)).toJSON()
      };
      route("journey", data);
    });
  }.bind(this);
});
riot.tag2('detail-bus-stop', '<div class="detail-section detail-data detail-flex flex-left"> <div> <h3>{busStop.name}</h3> <em>{busStop.distance} from your position</em> </div> <table ref="list" style="margin-top:20px;width:100%" class="items "> <tr> <th>Route</th> <th>Next bus in</th> <th></th> </tr> <tr each="{item in busStop.times}"> <td>{item.name}</td> <td>{item.time} mins</td> <td><button class="location" click="{showMapFeature}">Map</button></td> </tr> </table> </div>', '', '', function (opts) {
  var _this54 = this;

  this.on("mount", function () {
    if (!_this54.busStop && _this54.opts.dataBusStop) {
      _this54.busStop = _this54.opts.dataBusStop;

      _this54.update();
    }
  });

  this.showMapFeature = function (e) {
    var data = {
      feature: this.parent.detail.options.map_feature,
      clear: true,
      map: {}
    };

    if (this.parent.detail.options.zoom) {
      data.map = {
        zoom: this.parent.detail.options.zoom
      };
    }

    if (this.parent.detail.options.map_layer) {
      data.detail = this.parent.detail.options.map_layer;
    }

    data.map.center = {
      lat: this.busStop.location.coordinates[1],
      lng: this.busStop.location.coordinates[0]
    };
    route("map/layers/bus-routes;bus-position;bus-stops", data);
  }.bind(this);
});
riot.tag2('detail-co2', '<div class="wrapper" if="{detail}"> <div ref="list" class="detailsection" if="{detail.list}"> <content-box params="{toParam()}"></content-box> </div> </div>', 'detail-co2 .detailsection,[data-is="detail-co2"] .detailsection{ width: 100%; } detail-co2 .filter,[data-is="detail-co2"] .filter{ width: 100%; } detail-co2 select:first-child,[data-is="detail-co2"] select:first-child{ margin-right: 10px; } detail-co2 .flex,[data-is="detail-co2"] .flex{ flex-flow: row; }', '', function (opts) {
  var _this55 = this;

  this.showDesc = false;

  this.getFavData = function (item) {
    return {
      page: "environment",
      detail: "co2",
      data: [{
        title: "Today",
        value: "".concat(item.data.sunrise),
        svgIcon: "Sunrise"
      }, {
        title: "Sunset",
        value: "".concat(item.data.sunset),
        svgIcon: "Sunset"
      }],
      update_on: new Date(),
      expire_after: {
        when: "tomorrow"
      }
    };
  };

  this.anyVisible = function () {
    return !_this55.detail.list.every(function (a) {
      return a.hide;
    });
  };

  this.toParam = function () {
    return {
      label: this.detail.label,
      openDetails: true,
      details: [{
        label: "Today",
        value: this.detail.list[0].values[0]
      }, {
        label: "One year ago",
        value: this.detail.list[1].values[0]
      }, {
        label: "Ten years ago",
        value: this.detail.list[2].values[0]
      }, {
        title: "Niwa",
        link: "https://niwa.co.nz/climate/research-projects/carbonwatchnz/dailyco2measurements",
        value: "More details at Niwa.co.nz"
      }]
    };
  };

  this.on("mount", function () {
    return _this55.update();
  });
  this.on("update", function () {
    this.detail = this.parent ? this.parent.detail : this.opts.dataDetail;
    if (this.detail && this.detail[0] && this.detail[0].icon2) this.detail[0].image = "/assets/svg/" + this.detail[0].icon2 + "-black.svg";

    if (this.detail.desc) {
      this.detail.desc = this.detail.desc.trim();
      var x = this.detail.desc.split(".");

      if (x.length > 0 && x[0].length < 30) {
        this.detail.descHeader = x.shift();
      }

      this.detail.desc = x.join(".");
    }

    console.log("Detail", this);
  });

  this.showDetail = function (e) {
    console.log(e);

    if (e.item.item.showSubDetail) {
      e.item.item.showSubDetail = false;
    } else {
      e.item.item.showSubDetail = true;
    }
  }.bind(this);
});
riot.tag2('detail-corona', '<virtual if="{detail}"> <div class="detailsection"> <content-box params="{toParam()}"></content-box> <virtual each="{news in detail.relatedNews.list}"> <detail-item-news data-item="{news}"></detail-item-news> </virtual> </div> <pulse-box each="{pulses}"></pulse-box> </virtual>', 'detail-corona detail-item-news,[data-is="detail-corona"] detail-item-news{ margin-top: 10px; }', 'class="pulse-page"', function (opts) {
  var _this56 = this;

  var self = this;
  this.pulses = app.pages.extra.nodes.filter(function (a) {
    return a.name != 'covid19';
  });

  this.toParam = function () {
    return {
      label: "COVID-19 cases",
      openDetails: true,
      details: [{
        label: this.detail.list[3].label,
        value: this.detail.list[3].values[0],
        noicon: true
      }, {
        label: this.detail.list[2].label,
        value: this.detail.list[2].values[0],
        noicon: true
      }, {
        label: this.detail.list[1].label,
        value: this.detail.list[1].values[0],
        noicon: true
      }, {
        label: this.detail.list[0].label,
        value: this.detail.list[0].values[0],
        noicon: true
      }, {
        title: "New Zealand Covid-19 cases",
        link: "https://www.health.govt.nz/our-work/diseases-and-conditions/covid-19-novel-coronavirus/covid-19-current-cases",
        value: "More case details",
        flex100: true
      }, {
        title: "World Covid-19 cases",
        link: "https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6",
        value: "World Covid-19 dashboard",
        flex100: true,
        notopmargin: true
      }, {
        title: "New Zealand Covid-19 website",
        link: "https://covid19.govt.nz/",
        value: "covid19.govt.nz",
        flex100: true,
        notopmargin: true
      }]
    };
  };

  this.on("mount", function () {
    _this56.update();
  });
  this.on("unmount", function () {});
  this.on("update", function () {
    this.detail = this.parent ? this.parent.detail : this.opts.dataDetail;
    if (this.detail && this.detail[0] && this.detail[0].icon2) this.detail[0].image = "/assets/svg/" + this.detail[0].icon2 + "-black.svg";
  });
});
riot.tag2('detail-default', '<div class="wrapper" if="{detail}"> <div class="description" if="{detail.hasHeader}"> <strong if="{detail.label}" class="date">{detail.label}</strong> <h3 if="{detail.value}" class="f-h2 f-black"> <raw content="{detail.value}"></raw> </h3> <strong if="{detail.name && detail.name.toLowerCase()!=detail.value.toLowerCase() && detail.name.toLowerCase()!=detail.label.toLowerCase()}">{detail.name}</strong> <div class="popup b-dark" show="{showDesc}" if="{detail.desc}"> <close click="{hideDescGo}"></close> <h4 if="{detail.descHeader}">{detail.descHeader}</h4> <p> <raw content="{detail.desc}"></raw> </p> </div> </div> <div if="{detail.image && !detail.options.no_header}" class="image {smaller_image:!(detail.name && detail.name.toLowerCase()!=detail.value.toLowerCase())}"> <img riot-src="{detail.image}"> </div> <div class="controls {topBorder:detail.hasHeader,noTopMargin:!detail.hasHeader}" if="{detail.desc||detail.filterPanel||(detail.options&&detail.options.map_layer&&!detail.options.map_feature)}"> <form if="{detail.filterPanel}" class="filter"> <span class="filterLabel" if="{detail.filterPanel[0].options.type==\'order\'}">Sort by</span> <virtual each="{detail.filterPanel}"> <input onchange="{doFilter}" checked="{checked}" type="checkbox" name="{options.radio}" id="{id}"><label for="{id}">{label}</label> </virtual> </form> <div class="buttons" if="{detail.desc||(detail.options&&detail.options.map_layer&&!detail.options.map_feature)}"> <button class="location" click="{showMapLayer}" if="{detail.options&&detail.options.map_layer&&!detail.options.map_feature}"></button> <button class="desc" click="{showDescGo}" if="{detail.desc}"></button> </div> </div> <table class="items {table-block:detail.options&&detail.options.vertical}" if="{detail.list}"> <tr click="{showDetail}" each="{item in detail.list}" hide="{item.hide||item.hideMain}" class="{item.class}"> <td if="{!item.data.image}" nostyle="{(item.data&&item.data.style)?item.data.style:\'\'}"> <span>{item.label}</span> </td> <td colspan="{item.data.image?2:1}" riot-style="{(item.data&&item.data.style)?item.data.style:\'\'}"> <img if="{item.data.image}" riot-src="{item.label}"> <div class="buttons" if="{item.data.location}"> <button class="location" click="{parent.showItemFeature}"></button> </div> <p each="{row in item.values}"> <raw content="{row}"></raw> </p> <p if="{item.data.link}" class="right"><a href="{item.data.link}" target="ccc">more...</a></p> <p if="{item.data.date}" class="left">{item.data.date}</p> </td> </tr> </table> <button class="detail-button f-p4" click="{showMapFeature}" if="{detail.options&&detail.options.map_feature}">Map view</button> <button class="detail-button f-p4 journey" click="{showJourneyPlanner}" if="{detail.options&&detail.options.map_feature}">{app.conf.buttons.journeyPlanner||⁗Journey planner⁗}</button> </div>', '', '', function (opts) {
  var _this57 = this;

  this.showDesc = false;
  this.on("mount", function () {
    return _this57.update();
  });
  this.on("update", function () {
    var _this58 = this;

    this.detail = this.parent ? this.parent.detail : this.opts.dataDetail;
    this.detail.hasHeader = !(this.detail.options && this.detail.options.no_header) && (this.detail.value || this.detail.label || this.detail.image || this.detail.desc);
    if (this.detail && this.detail[0] && this.detail[0].icon2) this.detail[0].image = "/assets/svg/" + this.detail[0].icon2 + "-black.svg";

    if (this.detail.desc) {
      this.detail.desc = this.detail.desc.trim();
      var x = this.detail.desc.split(". ");

      if (x.length > 0 && x[0].length < 30) {
        this.detail.descHeader = x.shift();
      }

      this.detail.desc = x.join(".");
    }

    if (this.detail.filterPanel) {
      this.detail.filterPanel.forEach(function (a) {
        a.checked = app.session.get(a.options.radio) == a.id;

        if (a.checked) {
          _this58.doFilter({
            target: {
              checked: true
            },
            item: a
          });
        }
      });
    }

    console.log("Detail", this);
  });

  this.showDetail = function (e) {
    app.trigger("detail/click/" + this.parent.module, e.item);
  }.bind(this);

  this.showDescGo = function (e) {
    var _this59 = this;

    if (!this.showDesc) {
      this.showDesc = true;
      setTimeout(function () {
        return window.addEventListener("click", _this59.hideDescGo);
      });
    }
  }.bind(this);

  this.hideDescGo = function (e) {
    if (this.showDesc) {
      this.showDesc = false;
      window.removeEventListener("click", this.hideDescGo);
      this.update();
    }
  }.bind(this);

  this.showMapLayer = function (e) {
    var data = {
      detail: this.detail.options.map_layer,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    route("map/layers/" + this.detail.options.map_layer, data);
  }.bind(this);

  this.showMapFeature = function (e) {
    var data = {
      feature: this.detail.options.map_feature,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    if (this.detail.options.map_layer) {
      data.detail = this.detail.options.map_layer;
    }

    route("map", data);
  }.bind(this);

  this.showItemFeature = function (e) {
    var data = {
      clear: true,
      detail: this.detail.options.map_layer,
      map: {
        center: e.item.item.data.location.coordinates
      }
    };
    route("map", data);
  }.bind(this);

  this.showJourneyPlanner = function (e) {
    var _this60 = this;

    app.promise.google().then(function () {
      var data = {
        feature: _this60.detail.options.map_feature,
        title: _this60.detail.value,
        location: _maps.getCenter(_maps.GeoJSON(_this60.detail.options.map_feature.geometry, {}, true)).toJSON()
      };
      route("journey", data);
    });
  }.bind(this);

  this.mainFilterGo = function (e) {
    this.detail.list.forEach(function (b) {
      b.hideMain = !(e.target.value == "All" || e.target.value == b.label);
    });
  }.bind(this);

  this.doFilter = function (e) {
    e.item.checked = e.target.checked;
    var d = {};
    d[e.item.options.radio] = e.item.id;
    app.session.set(d);

    if (e.item.checked) {
      this.detail.filterPanel.filter(function (a) {
        return a != e.item && (!a.options.radio || a.options.radio == e.item.options.radio);
      }).forEach(function (a) {
        a.checked = false;
      });
    }

    if (e.item.options.type == "value") {
      this.detail.list.forEach(function (b) {
        b.hide = false;
      });
      this.detail.filterPanel.filter(function (a) {
        return a.checked;
      }).forEach(function (a) {
        this.detail.list.forEach(function (b) {
          if (b.values.every(function (c) {
            return Array.isArray(a.value) ? !a.value.some(function (d) {
              return d == c;
            }) : c != a.value;
          })) {
            b.hide = true;
          }
        });
      }.bind(this));
    } else if (e.item.options.type == "order") {
      this.detail.list = this.detail.list.sort(function (a, b) {
        return b.data[e.item.value] - a.data[e.item.value];
      });
    }

    ;
  }.bind(this);
});
riot.tag2('detail-events', '<div class="wrapper" if="{detail}"> <div ref="list" class="detailsection" if="{detail.list}"> <div each="{subDetail in detail.list}" class="one-event"> <header class="padding50 article detail-section detail-header-table {bottom-corners:!detail.showSubDetail}"> <div class="image" if="{subDetail.data.image}" riot-style="background-image:url(\'{subDetail.data.image}\')"> </div> <div class="header"> <h3> <raw content="{subDetail.label}"></raw> </h3> <div class="buttons"> <button class="{active:subDetail.showSubDetail}" click="{showDetail}">About</button> <button if="{subDetail.data.location}" click="{showMap}">Map</button> </div> </div> </header> <div if="{subDetail.showSubDetail}" style="background-color:white" class="detail-section detail-data detail-flex"> <div> {subDetail.values[0]} </div> <div riot-style="background-image:url(\'{womanSvg}\')" class="detail-name-val icon "> <strong>{subDetail.data.date==subDetail.data.dateto?\'date\':\'from\'}</strong> <span>{subDetail.data.date || ⁗N/A⁗}</span> </div> <div if="{subDetail.data.dateto && subDetail.data.date!=subDetail.data.dateto}" riot-style="background-image:url(\'{womanSvg}\')" class="detail-name-val icon "> <strong>to</strong> <span>{subDetail.data.dateto || ⁗N/A⁗}</span> </div> <div if="{subDetail.data.sessiontime}" riot-style="background-image:url(\'{womanSvg}\')" class="detail-name-val icon "> <strong>time</strong> <span>{subDetail.data.sessiontime || ⁗N/A⁗}</span> </div> <div if="{subDetail.data.street}" riot-style="background-image:url(\'{womanSvg}\')" class="detail-name-val icon "> <strong>street</strong> <span>{subDetail.data.street || ⁗N/A⁗}</span> </div> <div if="{subDetail.data.textLocation}" riot-style="background-image:url(\'{womanSvg}\')" class="detail-name-val icon "> <strong>location</strong> <span>{subDetail.data.textLocation || ⁗N/A⁗}</span> </div> <div if="{subDetail.data.suburb}" riot-style="background-image:url(\'{womanSvg}\')" class="detail-name-val icon "> <strong>suburb</strong> <span>{subDetail.data.suburb || ⁗N/A⁗}</span> </div> <div riot-style="background-image:url(\'{womanSvg}\')" class="detail-name-val icon "> <strong>category</strong> <span>{subDetail.data.category || ⁗N/A⁗}</span> </div> <div class="detail-name-val"> <a class="detail-button" href="{subDetail.data.link}" target="_blank">More details</a> </div> <div hide="{subDetail.data.noCalendar}" class="detail-name-val" style="position:relative"> <button class="calendar google" click="{showcalendars}">Add to calendar</button> <span hide="{!subDetail.calendars}" class="calendarmenu b-dark"> <span class="plus {plusrotate:subDetail.googleplus, added:subDetail.googleadded}" click="{calendar}">Google Calendar</span> <a href="{getUrl(subDetail)}" class="plus {plusrotate:subDetail.icsplus}" click="{ics}">Outlook, iCal, etc.</a> </span> </div> </div> </div> <detail-item-news if="{this.detail.relatedNews}" data-item="{this.detail.relatedNews}"></detail-item-news> </div> </div>', 'detail-events .padding50,[data-is="detail-events"] .padding50{ padding-left: 50% !important; } detail-events .one-event,[data-is="detail-events"] .one-event{ margin-bottom: 10px; display: block; flex-basis: 100%; } detail-events .detailsection,[data-is="detail-events"] .detailsection{ width: 100%; } detail-events .filter,[data-is="detail-events"] .filter{ width: 100%; } detail-events select:first-child,[data-is="detail-events"] select:first-child{ margin-right: 10px; } detail-events .flex,[data-is="detail-events"] .flex{ flex-flow: row; } detail-events .image,[data-is="detail-events"] .image{ position: absolute; width: 50%; left: 0px; top: 0px; } detail-events .header,[data-is="detail-events"] .header{ flex-grow: 1; } detail-events .calendarmenu,[data-is="detail-events"] .calendarmenu{ position: absolute; top: 100%; padding: 10px; white-space: nowrap; background-color: white; left: -10px; border-bottom-left-radius: 6px; border-bottom-right-radius: 6px; z-index: 9999; cursor: default; } detail-events .plus,[data-is="detail-events"] .plus{ position: relative; display: block; color: black; text-decoration: none; } detail-events .plus:after,[data-is="detail-events"] .plus:after{ content: "+"; font-size: 200%; display: inline-block; margin: 0px 0 0 5px; line-height: 0; position: relative; top: 5px; transition: all 0.5s; cursor: pointer; } detail-events .plus.added:after,[data-is="detail-events"] .plus.added:after{ content: "✓" } detail-events .plus.plusrotate:after,[data-is="detail-events"] .plus.plusrotate:after{ transform: rotate(360deg); } detail-events .plus:first-child:after,[data-is="detail-events"] .plus:first-child:after{ margin-left: 12px; } detail-events .calendaradd,[data-is="detail-events"] .calendaradd{ position: relative; } detail-events .calendar.google,[data-is="detail-events"] .calendar.google{ background-image: url("/assets/my/calendar-add.svg"); }', '', function (opts) {
  var _this61 = this;

  this.showDesc = false;
  var self = this;

  this.getFavData = function () {
    var q = this.detail.list[0];
    return {
      page: "environment",
      detail: "quake",
      data: [{
        title: "magnitude",
        value: "".concat(q.data.magnitude),
        svgIcon: "Magnitude"
      }, {
        title: "depth",
        value: "".concat(q.data.depth),
        svgIcon: "Depth"
      }],
      update_on: new Date(),
      expire_after: {
        val: 2,
        dim: "hours"
      }
    };
  };

  this.getDistance = function (f) {
    var d = _maps.distance(app.location.current.point.lat, app.location.current.point.lng, f.data.location.coordinates[1], f.data.location.coordinates[0]);

    d = Math.round(d / 1000);
    d = d.toLocaleString();
    d += "km";
    return d;
  };

  this.anyVisible = function () {
    return !_this61.detail.list.every(function (a) {
      return a.hide;
    });
  };

  this.on("mount", function () {
    var _this62 = this;

    this.update();

    var updateSigninStatus = function updateSigninStatus(isSignedIn) {
      if (isSignedIn) {
        _this62.googleSignedIn = true;
        app.trigger("google/calendar/singed");
      } else {
        _this62.googleSignedIn = false;
      }
    };

    var script = document.createElement('script');
    script.setAttribute('id', "googleevents");
    script.type = 'text/javascript';
    script.async = "async";
    script.defer = "defer";
    script.src = 'https://apis.google.com/js/api.js';

    script.onload = function () {
      gapi.load('client:auth2', function initClient() {
        gapi.client.init({
          apiKey: app.googleApiKey,
          clientId: app.googleClientId,
          discoveryDocs: ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"],
          scope: "https://www.googleapis.com/auth/calendar"
        }).then(function () {
          gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);
          updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
        });
      });
    };

    document.body.appendChild(script);
  });
  this.on("update", function () {
    this.detail = this.parent ? this.parent.detail : this.opts.dataDetail;
    if (this.detail && this.detail[0] && this.detail[0].icon2) this.detail[0].image = "/assets/svg/" + this.detail[0].icon2 + "-black.svg";

    if (this.detail.desc) {
      this.detail.desc = this.detail.desc.trim();
      var x = this.detail.desc.split(".");

      if (x.length > 0 && x[0].length < 30) {
        this.detail.descHeader = x.shift();
      }

      this.detail.desc = x.join(".");
    }
  });

  this.getUrl = function (sub) {
    var ua = navigator.userAgent.toLowerCase();
    var isAndroid = ua.indexOf("android") > -1;

    var use = function use() {
      var e = !1,
          t = window.navigator.userAgent.toLowerCase(),
          a = /CriOS/i.test(navigator.userAgent),
          n = /instagram/.test(t),
          o = /iphone|ipod|ipad/.test(t),
          d = /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(navigator.userAgent);
      return (o && d || o && a || o && n) && (e = !0), e;
    };

    if (use()) {
      var url = location.origin.replace("http", "webcal");
    } else {
      var url = location.origin;
    }

    return url + "/app/router/event.php?ics=" + sub.data.id;
  };

  this.showcalendars = function (e) {
    e.item.subDetail.calendars = !e.item.subDetail.calendars;
    e.item.subDetail.googleplus = false;
    e.item.subDetail.icsplus = false;
  }.bind(this);

  this.calendar = function (e) {
    if (e.item.subDetail.googleadded) {
      window.open(e.item.subDetail.googlecalurl);
      e.item.subDetail.calendars = false;
      return;
    }

    console.log(e, e.item.subDetail);
    e.item.subDetail.googleplus = true;
    e.item.subDetail.icsplus = false;

    if (self.googleSignedIn) {
      addEvent(e.item);
    } else {
      gapi.auth2.getAuthInstance().signIn();
      app.one("google/calendar/singed", addEvent);
    }

    function addEvent(o) {
      var _start2, _end2;

      var tf = o.time_from.split(" ");
      var tt = o.time_to.split(" ");
      var tfday = 'dateTime',
          ttday = 'dateTime';

      if (tf[1] == "00:00:00") {
        tf = tf[0];
        tfday = 'date';
      } else {
        tf = o.time_from;
      }

      if (tt[1] == "00:00:00") {
        tt = tt[0];
        ttday = 'date';
      } else {
        tt = o.time_to;
      }

      var event = {
        'summary': o.name_long,
        'location': o.location + " " + o.address + " Christchurch, New Zealand",
        'description': o.description,
        'start': (_start2 = {}, _defineProperty(_start2, tfday, tf), _defineProperty(_start2, 'timeZone', 'Pacific/Auckland'), _start2),
        'end': (_end2 = {}, _defineProperty(_end2, ttday, tt), _defineProperty(_end2, 'timeZone', 'Pacific/Auckland'), _end2),
        'reminders': {
          'useDefault': false
        },
        'source': {
          'title': 'SmartView Christchurch',
          'url': 'https://smartview.ccc.govt.nz'
        },
        'id': o.id + 'svchch' + moment().unix()
      };
      console.log(event, o);
      var request = gapi.client.calendar.events.insert({
        'calendarId': 'primary',
        'resource': event
      });
      request.execute(function (event) {
        if (typeof event.htmlLink != "undefined") {
          console.log('Event created: ' + event.htmlLink);
          e.item.subDetail.googlecalurl = event.htmlLink;
        } else {
          console.log('Event failed:  ', event);
        }

        e.item.subDetail.calendars = false;
        e.item.subDetail.googleplus = false;
        e.item.subDetail.googleadded = true;
        self.update();
      });
    }
  }.bind(this);

  this.showMap = function (e) {
    console.log(this.parent, parent, this, e);
    var data = {
      clear: true,
      detail: this.parent.detail.options.map_layer,
      map: {
        center: e.item.subDetail.data.location
      }
    };
    route("map", data);
  }.bind(this);

  this.showDetail = function (e) {
    console.log(e);

    if (e.item.subDetail.showSubDetail) {
      e.item.subDetail.showSubDetail = false;
    } else {
      e.item.subDetail.showSubDetail = true;
    }
  }.bind(this);

  this.showDescGo = function (e) {
    var _this63 = this;

    if (!this.showDesc) {
      this.showDesc = true;
      setTimeout(function () {
        return window.addEventListener("click", _this63.hideDescGo);
      });
    }
  }.bind(this);

  this.hideDescGo = function (e) {
    if (this.showDesc) {
      this.showDesc = false;
      window.removeEventListener("click", this.hideDescGo);
      this.update();
    }
  }.bind(this);

  this.showMapLayer = function (e) {
    var data = {
      detail: this.detail.options.map_layer,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    route("map", data);
  }.bind(this);

  this.showItemFeature = function (e) {
    var data = {
      clear: true,
      detail: this.detail.options.map_layer,
      map: {
        center: e.item.item.data.location.coordinates
      }
    };
    route("map", data);
  }.bind(this);

  this.showMapFeature = function (e) {
    var data = {
      feature: this.detail.options.map_feature,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    if (this.detail.options.map_layer) {
      data.detail = this.detail.options.map_layer;
    }

    route("map", data);
  }.bind(this);

  this.showJourneyPlanner = function (e) {
    var _this64 = this;

    app.promise.google().then(function () {
      var data = {
        feature: _this64.detail.options.map_feature,
        title: _this64.detail.value,
        location: _maps.getCenter(_maps.GeoJSON(_this64.detail.options.map_feature.geometry, {}, true)).toJSON()
      };
      route("journey", data);
    });
  }.bind(this);

  this.mainFilterGo = function (e) {
    this.detail.list.forEach(function (b) {
      b.hideMain = !(e.target.value == "All" || e.target.value == b.label);
    });
  }.bind(this);

  this.doFilter = function (e) {
    e.item.checked = e.target.checked;

    if (e.item.checked) {
      this.detail.filterPanel.filter(function (a) {
        return a != e.item && (!a.options.radio || a.options.radio == e.item.options.radio);
      }).forEach(function (a) {
        a.checked = false;
      });
    }

    if (e.item.options.type == "value") {
      this.detail.list.forEach(function (b) {
        b.hide = false;
      });
      this.detail.filterPanel.filter(function (a) {
        return a.checked;
      }).forEach(function (a) {
        this.detail.list.forEach(function (b) {
          if (b.values.every(function (c) {
            return c != a.value;
          })) {
            b.hide = true;
          }
        });
      }.bind(this));
    }
  }.bind(this);
});
riot.tag2('detail-fireincidents', '<div class="wrapper" if="{detail}"> <div class="detail-section detail-data"> <div style="height: 150px" id="graph"></div> <h3 class="graph-label">Incidents per day</h3> </div> <div class="detail-section controls noTopMargin"> <form class="filter"> <fieldset> <legend>Search by location</legend> <div class="flex"> <select change="{setLocationFilter}"> <option value="all">All ({sumLocations()})</option> <option riot-value="{key}" each="{detail.locations}"> {key} ({value}) </option> </select> </div> </fieldset> <fieldset> <legend>Search by incident type</legend> <div class="flex"> <select change="{setTypeFilter}"> <option value="all">All ({sumResults()})</option> <option riot-value="{key}" each="{detail.results}"> {key} ({value}) </option> </select> </div> </fieldset> </form> </div> <div ref="list" class="detailsection" if="{detail.list}"> <div each="{item in getList()}" class="{item.class}"> <content-box params="{toParam(item)}"></content-box> </div> </div> </div>', 'detail-fireincidents .flex-left,[data-is="detail-fireincidents"] .flex-left{ justify-content: left; } detail-fireincidents .detail-name-val,[data-is="detail-fireincidents"] .detail-name-val{ padding-right: 10px; } detail-fireincidents .detail-header-table *,[data-is="detail-fireincidents"] .detail-header-table *{ text-transform: capitalize; } detail-fireincidents .detail-header-table span,[data-is="detail-fireincidents"] .detail-header-table span{ font-size: 80% } detail-fireincidents .graph-label,[data-is="detail-fireincidents"] .graph-label{ text-align: center; margin: 0; } detail-fireincidents .explanation-row,[data-is="detail-fireincidents"] .explanation-row{ position: relative; } detail-fireincidents .info,[data-is="detail-fireincidents"] .info{ background-image: url("/assets/my/lnr-question-circle.svg"); background-repeat: no-repeat; background-position: right center; background-size: 15px; padding-right: 20px; white-space: nowrap; } detail-fireincidents .explanation,[data-is="detail-fireincidents"] .explanation{ position: absolute; right: 20px; width: auto; white-space: normal; text-align: left; background: rgba(255, 255, 255, 0.95); z-index: 2; padding: 20px; margin-top: 7px; display: block; } detail-fireincidents .explanation::after,[data-is="detail-fireincidents"] .explanation::after{ content: ""; position: absolute; right: 20px; bottom: 100%; margin-right: -10px; border-width: 10px; border-style: solid; border-color: transparent transparent white transparent; } detail-fireincidents .detailsection,[data-is="detail-fireincidents"] .detailsection{ width: 100%; } detail-fireincidents h3,[data-is="detail-fireincidents"] h3{ margin-top: 20px; margin-bottom: 10px; } detail-fireincidents table,[data-is="detail-fireincidents"] table{ margin-top: 10px; table-layout: auto; width: 100%; } detail-fireincidents table.trows.topall tr:nth-child(n+999),[data-is="detail-fireincidents"] table.trows.topall tr:nth-child(n+999),detail-fireincidents table.tbodies.topall tbody:nth-child(n+999),[data-is="detail-fireincidents"] table.tbodies.topall tbody:nth-child(n+999){ display: none; } detail-fireincidents table.trows.top25 tr:nth-child(n+26),[data-is="detail-fireincidents"] table.trows.top25 tr:nth-child(n+26),detail-fireincidents table.tbodies.top25 tbody:nth-child(n+26),[data-is="detail-fireincidents"] table.tbodies.top25 tbody:nth-child(n+26){ display: none; } detail-fireincidents table.trows.top10 tr:nth-child(n+11),[data-is="detail-fireincidents"] table.trows.top10 tr:nth-child(n+11),detail-fireincidents table.tbodies.top10 tbody:nth-child(n+11),[data-is="detail-fireincidents"] table.tbodies.top10 tbody:nth-child(n+11){ display: none; } detail-fireincidents table.trows.top5 tr:nth-child(n+6),[data-is="detail-fireincidents"] table.trows.top5 tr:nth-child(n+6),detail-fireincidents table.tbodies.top5 tbody:nth-child(n+6),[data-is="detail-fireincidents"] table.tbodies.top5 tbody:nth-child(n+6){ display: none; } detail-fireincidents table.trows.top3 tr:nth-child(n+4),[data-is="detail-fireincidents"] table.trows.top3 tr:nth-child(n+4),detail-fireincidents table.tbodies.top3 tbody:nth-child(n+4),[data-is="detail-fireincidents"] table.tbodies.top3 tbody:nth-child(n+4){ display: none; } detail-fireincidents .tbodies tr:first-child,[data-is="detail-fireincidents"] .tbodies tr:first-child{ border-bottom-style: none; } detail-fireincidents .tbodies tr:nth-child(n+2),[data-is="detail-fireincidents"] .tbodies tr:nth-child(n+2){ border-top-style: none; } detail-fireincidents .button,[data-is="detail-fireincidents"] .button{ margin-right: 5px }', '', function (opts) {
  var _this66 = this;

  this.graphShown = false;
  this.showDesc = false;
  this.filterLocation = "all";
  this.filterType = "all";

  this.toParam = function (item) {
    var _data$details2;

    var data = {
      label: item.data.location.toLowerCase(),
      sub: item.data.result.toLowerCase(),
      details: []
    };

    (_data$details2 = data.details).push.apply(_data$details2, [{
      label: "date",
      value: item.data.date_nice,
      svgIcon: "Date"
    }, {
      label: "time",
      value: item.data.time_nice,
      svgIcon: "Time"
    }, {
      label: "result",
      value: item.data.name,
      svgIcon: "Fire"
    }]);

    return data;
  };

  this.setLocationFilter = function (e) {
    this.filterLocation = e.target.value;
  }.bind(this);

  this.setTypeFilter = function (e) {
    this.filterType = e.target.value;
  }.bind(this);

  this.getList = function () {
    var _this65 = this;

    if (this.filterLocation == this.filterType) {
      return this.getToday();
    } else {
      return this.detail.list.filter(function (a) {
        return (_this65.filterLocation == "all" || _this65.filterLocation == a.data.location) && (_this65.filterType == "all" || _this65.filterType == a.values[2]);
      });
    }
  };

  this.getToday = function () {
    return this.detail.list.filter(function (a) {
      return a.data.today;
    });
  };

  this.sumLocations = function () {
    return this.detail.locations.reduce(function (a, b) {
      return a + b.value;
    }, 0);
  };

  this.sumResults = function () {
    return this.detail.results.reduce(function (a, b) {
      return a + b.value;
    }, 0);
  };

  this.on("mount", function () {
    return _this66.update();
  });
  this.on("update", function () {
    var _this67 = this;

    this.detail = this.parent ? this.parent.detail : this.opts.dataDetail;
    this.detail.hasHeader = !(this.detail.options && this.detail.options.no_header) && (this.detail.value || this.detail.label || this.detail.image || this.detail.desc);
    if (this.detail && this.detail[0] && this.detail[0].icon2) this.detail[0].image = "/assets/svg/" + this.detail[0].icon2 + "-black.svg";

    if (this.detail.desc) {
      this.detail.desc = this.detail.desc.trim();
      var x = this.detail.desc.split(". ");

      if (x.length > 0 && x[0].length < 30) {
        this.detail.descHeader = x.shift();
      }

      this.detail.desc = x.join(".");
    }

    if (this.detail.filterPanel) {
      this.detail.filterPanel.forEach(function (a) {
        a.checked = app.session.get(a.options.radio) == a.id;

        if (a.checked) {
          _this67.doFilter({
            target: {
              checked: true
            },
            item: a
          });
        }
      });
    }

    if (!Array.isArray(this.detail.locations)) {
      this.detail.locations = Object.keys(this.detail.locations).reduce(function (a, k) {
        return a.concat([{
          key: k,
          value: _this67.detail.locations[k]
        }]);
      }, []).sort(function (a, b) {
        return b.value - a.value;
      });
      this.detail.days = Object.keys(this.detail.days).reduce(function (a, k) {
        return a.concat([{
          key: moment().day(k).format("dddd"),
          value: _this67.detail.days[k]
        }]);
      }, []).sort(function (a, b) {
        return b.value - a.value;
      });
      this.detail.results = Object.keys(this.detail.results).reduce(function (a, k) {
        return a.concat([{
          key: k,
          value: _this67.detail.results[k]
        }]);
      }, []).sort(function (a, b) {
        return b.value - a.value;
      });
      this.graphShown = false;
    }

    app.alert.set({
      collapsed: true,
      title: "Event index",
      msg: Object.keys(this.detail.explanations).reduce(function (a, b) {
        return a + "<b>".concat(b, "</b><br> ").concat(_this67.detail.explanations[b], "<br>");
      }, "")
    });
    console.log("Detail", this);
  });
  this.on("updated", function () {
    if (!_this66.graphShown) _this66.showGraph();
  });

  this.showDetail = function (e) {
    console.log(e);
    e.item.item.showSubDetail = !e.item.item.showSubDetail;
    e.item.item.detailVisible = !e.item.item.detailVisible;
    e.stopPropagation();
  }.bind(this);

  this.showGraph = function () {
    var ret = {
      x: [],
      y: []
    };
    this.detail.list.forEach(function (a) {
      ret.x.filter(function (b, i) {
        return b == a.data.date && ((a.i = i) || 1);
      }).reduce(function (t, c) {
        return ret.y[a.i]++;
      }, false) || ret.x.push(a.data.date) && ret.y.push(1);
    });
    ret.line = {
      color: "#cadb44",
      width: 1
    };
    var width = parseInt(getComputedStyle(this.refs.list).width);
    width = width - 20;
    document.getElementById("graph").style.width = width + "px";
    Plotly.plot(document.getElementById("graph"), [ret], {
      margin: {
        t: 0,
        b: 20,
        l: 20,
        r: 0
      },
      width: width,
      autosize: true,
      paper_bgcolor: "#fff",
      plot_bgcolor: "transparent"
    }, {
      scrollZoom: false,
      staticPlot: true,
      responsive: true,
      width: width,
      displayModeBar: false
    });
    this.graphShown = true;
  };

  this.showExplanation = function (e) {
    e.item.item.explanationVisible = !e.item.item.explanationVisible;
  }.bind(this);

  this.showTop = function (e) {
    var _this68 = this;

    Object.keys(this.itemClass).filter(function (a) {
      return a != "tbodies" && a != "trows";
    }).forEach(function (a) {
      _this68.itemClass[a] = a == e.item.c;
    });
    this.buttons.forEach(function (a) {
      a.a = 0;
    });
    e.item.a = 1;
  }.bind(this);

  this.showTopT = function (e) {
    var _this69 = this;

    Object.keys(this.itemClassT).filter(function (a) {
      return a != "tbodies" && a != "trows";
    }).forEach(function (a) {
      _this69.itemClassT[a] = a == e.item.c;
    });
    this.buttonsT.forEach(function (a) {
      a.a = 0;
    });
    e.item.a = 1;
  }.bind(this);

  this.showTopL = function (e) {
    var _this70 = this;

    Object.keys(this.itemClassL).filter(function (a) {
      return a != "tbodies" && a != "trows";
    }).forEach(function (a) {
      _this70.itemClassL[a] = a == e.item.c;
    });
    this.buttonsL.forEach(function (a) {
      a.a = 0;
    });
    e.item.a = 1;
  }.bind(this);

  this.showDescGo = function (e) {
    var _this71 = this;

    if (!this.showDesc) {
      this.showDesc = true;
      setTimeout(function () {
        return window.addEventListener("click", _this71.hideDescGo);
      });
    }
  }.bind(this);

  this.hideDescGo = function (e) {
    if (this.showDesc) {
      this.showDesc = false;
      window.removeEventListener("click", this.hideDescGo);
      this.update();
    }
  }.bind(this);

  this.showMapLayer = function (e) {
    var data = {
      detail: this.detail.options.map_layer,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    route("map/layers/" + this.detail.options.map_layer, data);
  }.bind(this);

  this.showMapFeature = function (e) {
    var data = {
      feature: this.detail.options.map_feature,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    if (this.detail.options.map_layer) {
      data.detail = this.detail.options.map_layer;
    }

    route("map", data);
  }.bind(this);

  this.showItemFeature = function (e) {
    var data = {
      clear: true,
      detail: this.detail.options.map_layer,
      map: {
        center: e.item.item.data.location.coordinates
      }
    };
    route("map", data);
  }.bind(this);

  this.showJourneyPlanner = function (e) {
    var _this72 = this;

    app.promise.google().then(function () {
      var data = {
        feature: _this72.detail.options.map_feature,
        title: _this72.detail.value,
        location: _maps.getCenter(_maps.GeoJSON(_this72.detail.options.map_feature.geometry, {}, true)).toJSON()
      };
      route("journey", data);
    });
  }.bind(this);

  this.mainFilterGo = function (e) {
    this.detail.list.forEach(function (b) {
      b.hideMain = !(e.target.value == "All" || e.target.value == b.label);
    });
  }.bind(this);

  this.doFilter = function (e) {
    e.item.checked = e.target.checked;
    var d = {};
    d[e.item.options.radio] = e.item.id;
    app.session.set(d);

    if (e.item.checked) {
      this.detail.filterPanel.filter(function (a) {
        return a != e.item && (!a.options.radio || a.options.radio == e.item.options.radio);
      }).forEach(function (a) {
        a.checked = false;
      });
    }

    if (e.item.options.type == "value") {
      this.detail.list.forEach(function (b) {
        b.hide = false;
      });
      this.detail.filterPanel.filter(function (a) {
        return a.checked;
      }).forEach(function (a) {
        this.detail.list.forEach(function (b) {
          if (b.values.every(function (c) {
            return Array.isArray(a.value) ? !a.value.some(function (d) {
              return d == c;
            }) : c != a.value;
          })) {
            b.hide = true;
          }
        });
      }.bind(this));
    } else if (e.item.options.type == "order") {
      this.detail.list = this.detail.list.sort(function (a, b) {
        return b.data[e.item.value] - a.data[e.item.value];
      });
    }

    ;
  }.bind(this);
});
riot.tag2('detail-firerisk', '<virtual if="{detail}"> <div class="detailsection"> <div class="detail-flex detail-section detail-header-table margin-top "> <div> <div>Today\'s fire risk</div> <span>{this.detail.value}</span> </div> <div class="buttons"> <fav-button book="{getFavData()}"></fav-button> </div> </div> <div class="detail-section detail-data detail-flex"> <canvas-dial heading="Fire risk" text="{this.detail.value}" current="{this.detail.fireIndex}" labels="{labels}" max="{30}" limits="{limits}"></canvas-dial> </div> <detail-item-news if="{this.detail.relatedNews}" data-item="{this.detail.relatedNews}"></detail-item-news> </div> <div class="detail-section controls noTopMargin"> <form class="filter"> <fieldset> <legend>you may also be interested in</legend> </fieldset> </form> </div> <pulse-box each="{detail.nodes}"></pulse-box> </virtual>', 'detail-firerisk detail-item-news,[data-is="detail-firerisk"] detail-item-news{ margin-top: 10px; }', 'class="pulse-page"', function (opts) {
  var _this73 = this;

  var self = this;
  var graybg = "#e6e7e8";
  var lowbg = "#cadb44";
  var highbg = "#ffd94f";
  var extremebg = "#e11156";
  this.max = 30;
  this.limits = {
    low: [0, 10],
    high: [10, 20],
    extreme: [20, this.max]
  };
  this.labels = [[5, "Open"], [15, "Restricted"], [25, "Prohibited"]];
  this.showDesc = false;
  this.loaded = false;
  var arrowImg = new Image();
  arrowImg.src = "/assets/publica/sets/Environment_Pin_Scale.svg";

  this.getFavData = function () {
    return {
      page: "environment",
      detail: "fire",
      data: [{
        title: "today's fire risk",
        value: "".concat(this.detail.value),
        svgIcon: "Fire"
      }],
      update_on: new Date(),
      expire_after: {
        val: 6,
        dim: "hours"
      }
    };
  };

  this.on("mount", function () {
    _this73.update();
  });
  this.on("unmount", function () {});
  this.on("update", function () {
    this.detail = this.parent ? this.parent.detail : this.opts.dataDetail;
    if (this.detail && this.detail[0] && this.detail[0].icon2) this.detail[0].image = "/assets/svg/" + this.detail[0].icon2 + "-black.svg";
    app.alert.set({
      collapsed: true,
      title: "Fire risk index",
      msg: this.detail.list.reduce(function (a, b) {
        return a + "<b>".concat(b.label, "</b><br> ").concat(b.values.join("<br>"), "<br>");
      }, "")
    });
  });
});
riot.tag2('detail-fireweather', '<virtual if="{detail}"> <div class="detailsection"> <div class="detail-flex detail-section detail-header-table margin-top "> <div> <div>Current fire weather / risk</div> <span>{detail.region}</span> </div> <div class="buttons"> <fav-button book="{getFavData()}"></fav-button> <a class="detail-button" href="https://fireweather.niwa.co.nz/" target="ccc">Niwa</a> </div> </div> <div class="detail-section detail-data detail-flex"> <canvas-dial heading="Forest" text=" " current="{parseInt(detail.vars.Forest)-0.5}" labels="{labels}" max="{5}" limits="{limits}"></canvas-dial> <canvas-dial heading="Scrub" text=" " current="{parseInt(detail.vars.Scrub)-0.5}" labels="{labels}" max="{5}" limits="{limits}"></canvas-dial> <canvas-dial heading="Grass" text=" " current="{parseInt(detail.vars.Grass)-0.5}" labels="{labels}" max="{5}" limits="{limits}"></canvas-dial> <div riot-style="background-image:url(\'{womanSvg}\')" class="detail-name-val "> <strong>Station</strong> <span>{detail.name}</span> </div> <div riot-style="background-image:url(\'{womanSvg}\')" class="detail-name-val "> <strong>Updated at</strong> <span>{detail.valid_on}</span> </div> <div each="{val,name in varsFilter()}" riot-style="background-image:url(\'{womanSvg}\')" class="detail-name-val "> <strong>{name}</strong> <span>{val}</span> </div> </div> </div> <div class="detailsection"> <detail-item-news if="{this.detail.relatedNews}" data-item="{this.detail.relatedNews}"></detail-item-news> </div> <div class="detail-section controls noTopMargin"> <form class="filter"> <fieldset> <legend>you may also be interested in</legend> </fieldset> </form> </div> <pulse-box each="{detail.nodes}"></pulse-box> </virtual>', 'detail-fireweather detail-item-news,[data-is="detail-fireweather"] detail-item-news{ margin-top: 10px; } detail-fireweather canvas-dial,[data-is="detail-fireweather"] canvas-dial{ width: 33%; } detail-fireweather canvas,[data-is="detail-fireweather"] canvas{ width: 100%; height: auto; } detail-fireweather .detail-name-val,[data-is="detail-fireweather"] .detail-name-val{ flex-basis: 50%; }', 'class="pulse-page"', function (opts) {
  var _this75 = this;

  var self = this;
  var graybg = "#e6e7e8";
  var lowbg = "#cadb44";
  var highbg = "#ffd94f";
  var extremebg = "#e11156";
  this.max = 5;
  this.limits = {
    low: [0, 1],
    moderate: [1, 2],
    high: [2, 3],
    veryhigh: [3, 4],
    extreme: [4, this.max]
  };
  this.labels = [[0.5, "Low"], [1.5, "Moderate"], [2.5, "High"], [3.5, "Very High"], [4.5, "Extreme"]];
  this.favlabel = ["Low", "Moderate", "High", "Very High", "Extreme"];
  this.showDesc = false;
  this.loaded = false;
  var arrowImg = new Image();
  arrowImg.src = "/assets/publica/sets/Environment_Pin_Scale.svg";

  this.varsFilter = function () {
    var _this74 = this;

    return Object.keys(this.detail.vars).reduce(function (r, a) {
      if (a != "Forest" && a != "Grass" && a != "Scrub") {
        r[a] = _this74.detail.vars[a];
      }

      return r;
    }, {});
  };

  this.getFavData = function () {
    return {
      page: "environment",
      detail: "fireniwa",
      location: "current",
      data: [{
        title: "forest",
        value: "".concat(this.favlabel[parseInt(this.detail.vars.Forest) - 1], " risk"),
        svgIcon: "Fire"
      }, {
        title: "scrub",
        value: "".concat(this.favlabel[parseInt(this.detail.vars.Scrub) - 1], " risk"),
        svgIcon: "Fire"
      }, {
        title: "grass",
        value: "".concat(this.favlabel[parseInt(this.detail.vars.Grass) - 1], " risk"),
        svgIcon: "Fire"
      }],
      update_on: new Date(),
      expire_after: {
        val: 2,
        dim: "hours"
      }
    };
  };

  this.on("mount", function () {
    _this75.update();
  });
  this.on("unmount", function () {});
  this.on("update", function () {
    this.detail = this.parent ? this.parent.detail : this.opts.dataDetail;
    if (this.detail && this.detail[0] && this.detail[0].icon2) this.detail[0].image = "/assets/svg/" + this.detail[0].icon2 + "-black.svg";
    app.alert.set({
      collapsed: true,
      title: "Fire weather glossary",
      msg: this.detail.list.reduce(function (a, b) {
        return a + "<b>".concat(b.label, "</b><br> ").concat(b.values.join("<br>"), "<br><br>");
      }, "")
    });
  });
});
riot.tag2('detail-flights', '<div class="wrapper" if="{detail}"> <div class="detail-section controls noTopMargin"> <form if="{detail.filterPanel}" class="filter"> <fieldset> <legend>Search by terminal</legend> <div class="flex"> <select change="{setFilterPort}"> <option value="all">Any Airport</option> <option each="{port in ports}">{port}</option> </select> <select change="{setFilterDep}"> <option value="arrival">Arrivals</option> <option value="departure">Departures</option> </select> <select change="{setFilterDom}"> <option value="domestic">Domestic</option> <option value="international">International</option> </select> </div> </fieldset> </form> </div> <div ref="list" class="detailsection" if="{detail.list}"> <div each="{item in getList()}" hide="{item.hide||item.hideMain}" class="{item.class}"> <content-box params="{toParam(item)}" fav="{getFavData(item)}"></content-box> </div> </div> <div if="{!anyVisible() && !loading && !showFilter}"> <p>{!anyVisible() && !loading && !showFilter} {app.conf.texts.filterZero}</p> </div> <button class="detail-button f-p4" click="{showMapFeature}" if="{detail.options&&detail.options.map_feature}">Map view</button> <button class="detail-button f-p4 journey" click="{showJourneyPlanner}" if="{detail.options&&detail.options.map_feature}">{app.conf.buttons.journeyPlanner||⁗Journey             planner⁗}</button> </div>', 'detail-flights .detailsection,[data-is="detail-flights"] .detailsection{ width: 100%; } detail-flights .filter,[data-is="detail-flights"] .filter{ width: 100%; } detail-flights select:first-child,[data-is="detail-flights"] select:first-child{ margin-right: 10px; } detail-flights select:nth-child(2),[data-is="detail-flights"] select:nth-child(2){ margin-right: 10px; } detail-flights .flex,[data-is="detail-flights"] .flex{ flex-flow: row; }', '', function (opts) {
  var _this77 = this;

  this.showDesc = false;
  this.ports = {};
  this.filterDepArr = "arrival";
  this.filterIntDom = "domestic";
  this.filterPort = "all";

  this.toParam = function (item) {
    var _data$details3;

    var data = {
      label: item.label,
      sub: item.values[2],
      details: []
    };

    (_data$details3 = data.details).push.apply(_data$details3, [{
      label: "flight no.",
      value: item.values[3],
      svgIcon: "Flight"
    }, {
      label: "scheduled",
      value: item.values[4],
      svgIcon: "Time"
    }, {
      label: "gate",
      value: item.values[5],
      svgIcon: "Gate"
    }, {
      label: "status",
      value: item.values[6],
      svgIcon: "Status"
    }]);

    return data;
  };

  this.setFilterDom = function (e) {
    this.filterIntDom = e.target.value;
  };

  this.setFilterDep = function (e) {
    this.filterDepArr = e.target.value;
  };

  this.setFilterPort = function (e) {
    this.filterPort = e.target.value;
  };

  this.getList = function () {
    var _this76 = this;

    return this.detail.list.filter(function (a) {
      return _this76.filterDepArr == a.values[1] && _this76.filterIntDom == a.values[0] && (_this76.filterPort == "all" || _this76.filterPort == a.label);
    });
  };

  this.anyVisible = function () {
    return !_this77.detail.list.every(function (a) {
      return a.hide;
    });
  };

  this.getFavData = function (item) {
    return {
      page: "travel",
      detail: "flights",
      id: item.values[3],
      label: item.label + " - " + item.values[3],
      data: [{
        title: "status",
        value: "".concat(item.values[6]),
        svgIcon: "Status"
      }, {
        title: "scheduled",
        value: "".concat(item.values[4]),
        svgIcon: "Time"
      }, {
        title: "gate",
        value: "".concat(item.values[5]),
        svgIcon: "Gate"
      }],
      update_on: new Date(),
      expire_after: {
        val: 3,
        dim: "mins"
      }
    };
  };

  this.on("mount", function () {
    _this77.update();
  });
  this.on("update", function () {
    var _this78 = this;

    this.detail = this.parent ? this.parent.detail : this.opts.dataDetail;
    if (this.detail && this.detail[0] && this.detail[0].icon2) this.detail[0].image = "/assets/svg/" + this.detail[0].icon2 + "-black.svg";

    if (this.detail.desc) {
      this.detail.desc = this.detail.desc.trim();
      var x = this.detail.desc.split(".");

      if (x.length > 0 && x[0].length < 30) {
        this.detail.descHeader = x.shift();
      }

      this.detail.desc = x.join(".");
    }

    this.ports = {};
    this.detail.list.forEach(function (a) {
      a.showSubDetail = typeof a.showSubDetail == "undefined" ? true : a.showSubDetail;
      _this78.ports[a.label] = a.label;
    });
    this.ports = Object.keys(this.ports).sort();
    console.log("Detail", this);
  });

  this.showDetail = function (e) {
    console.log(e);

    if (e.item.item.showSubDetail) {
      e.item.item.showSubDetail = false;
    } else {
      e.item.item.showSubDetail = true;
    }
  }.bind(this);

  this.showDescGo = function (e) {
    var _this79 = this;

    if (!this.showDesc) {
      this.showDesc = true;
      setTimeout(function () {
        return window.addEventListener("click", _this79.hideDescGo);
      });
    }
  }.bind(this);

  this.hideDescGo = function (e) {
    if (this.showDesc) {
      this.showDesc = false;
      window.removeEventListener("click", this.hideDescGo);
      this.update();
    }
  }.bind(this);

  this.showMapLayer = function (e) {
    var data = {
      detail: this.detail.options.map_layer,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    route("map", data);
  }.bind(this);

  this.showMapFeature = function (e) {
    var data = {
      feature: this.detail.options.map_feature,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    if (this.detail.options.map_layer) {
      data.detail = this.detail.options.map_layer;
    }

    route("map", data);
  }.bind(this);

  this.showJourneyPlanner = function (e) {
    var _this80 = this;

    app.promise.google().then(function () {
      var data = {
        feature: _this80.detail.options.map_feature,
        title: _this80.detail.value,
        location: _maps.getCenter(_maps.GeoJSON(_this80.detail.options.map_feature.geometry, {}, true)).toJSON()
      };
      route("journey", data);
    });
  }.bind(this);

  this.mainFilterGo = function (e) {
    this.detail.list.forEach(function (b) {
      b.hideMain = !(e.target.value == "All" || e.target.value == b.label);
    });
  }.bind(this);

  this.doFilter = function (e) {
    e.item.checked = e.target.checked;

    if (e.item.checked) {
      this.detail.filterPanel.filter(function (a) {
        return a != e.item && (!a.options.radio || a.options.radio == e.item.options.radio);
      }).forEach(function (a) {
        a.checked = false;
      });
    }

    if (e.item.options.type == "value") {
      this.detail.list.forEach(function (b) {
        b.hide = false;
      });
      this.detail.filterPanel.filter(function (a) {
        return a.checked;
      }).forEach(function (a) {
        this.detail.list.forEach(function (b) {
          if (b.values.every(function (c) {
            return c != a.value;
          })) {
            b.hide = true;
          }
        });
      }.bind(this));
    }
  }.bind(this);
});
riot.tag2('detail-lime', '<virtual if="{detail}"> <pulse-box each="{detail.nodes}"></pulse-box> <div class="detailsection"> <div class="detail-flex detail-section detail-header-table margin-top "> <div> <div>Statistics</div> </div> <div class="buttons"> <button click="{toggleGraph}" class="detail-button">Graph</button> </div> </div> <div class="detail-section detail-data detail-flex flex-left"> <p> Available scooters and ebikes: {detail.count.toLocaleString()} </p> <p> Total number of trips: {detail.stats.total.toLocaleString()} </p> <p> Today: {detail.stats.today} trips over {(detail.stats.todaym/1000).toLocaleString()} km </p> <p> Distance available vehicles could ride on current battery charge: {(detail.distance/1000).toLocaleString()} km </p> <div class="graphdiv" if="{showGraphDiv}"> <loading data-classes="td-margin" if="{graphLoading}"></loading> <div style="height: 100px" id="tripsgraph"></div> </div> </div> <div class="detail-flex detail-section detail-header-table margin-top "> <div> <div>Nearest available </div> </div> <div class="buttons"> <fav-button alert="{alertText}" book="{getFavData()}"></fav-button> <a href="{window.config.hashbang}map/layers/escooters" class="detail-button">Map</a> </div> </div> <div class="detail-section detail-data detail-flex flex-left"> <table ref="list" style="margin-top:20px;width:100%" class="items {table-block:detail.options&&detail.options.vertical}" if="{detail.list}"> <tr> <th>Distance</th> <th>Last activity</th> <th>Battery charge</th> <th>&nbsp;</th> <th>&nbsp;</th> </tr> <tr click="{showDetail}" each="{item in closestScooters(10)}" class="{item.class}"> <td>{item.distance}m</td> <td>{item.showTime}</td> <td>{item.battery}% </td> <td>{item.provider}</td> <td> <div class="buttons"><button class="location" click="{parent.showItemFeature}">Map</button></div> </td> </tr> </table> </div> </div> </virtual>', 'detail-lime p,[data-is="detail-lime"] p{ flex-basis: 100%; } detail-lime .items,[data-is="detail-lime"] .items{ table-layout: auto; } detail-lime .items .buttons,[data-is="detail-lime"] .items .buttons{ margin-left: 0; } detail-lime .graphdiv,[data-is="detail-lime"] .graphdiv{ padding-top: 20px; position: relative; width: 100%; }', 'class="pulse-page"', function (opts) {
  var _this82 = this;

  var self = this;

  var _liveUpdate;

  this.showGraphDiv = false;
  this.graphLoading = false;
  this.alertText = "Try to favourite this page<br> to see the nearest scooter <br>on the home page";

  this.getFavData = function () {
    var scoot = this.closestScooters(1).pop();
    return {
      page: "travel",
      detail: "escooters",
      data: [{
        title: "distance",
        value: scoot ? "".concat(scoot.distance, "m") : "",
        svgIcon: "Location"
      }, {
        title: "battery",
        value: scoot ? "".concat(scoot.battery, "%") : "",
        svgIcon: "Battery"
      }, {
        title: "last activity",
        value: scoot ? "".concat(scoot.showTime) : "",
        svgIcon: "Time"
      }],
      update_on: new Date(),
      expire_after: {
        val: 10,
        dim: "mins"
      },
      location: "current"
    };
  };

  this.toggleGraph = function () {
    var _this81 = this;

    this.showGraphDiv = this.showGraphDiv ? false : true;

    if (this.showGraphDiv) {
      if (this.graphData) {
        this.showGraph = true;
      } else {
        this.graphLoading = true;
        this.showGraph = true;

        _lib.ajax.$get("/app/router/scooter_trips.php", function (ret) {
          ret = JSON.parse(ret);
          var calcy = ret.y.map(parseFloat).filter(function (a) {
            return !isNaN(a);
          });
          _this81.graphData = ret;
          var wlist = Array.isArray(_this81.refs.list) ? _this81.refs.list[0] : _this81.refs.list;
          var width = parseInt(getComputedStyle(wlist).width);
          document.getElementById("tripsgraph").style.width = width + "px";
          ret.line = {
            color: "#cadb44",
            width: 1
          };
          Plotly.plot(document.getElementById("tripsgraph"), [ret], {
            margin: {
              t: 0,
              b: 30,
              l: 30,
              r: 0
            },
            width: width,
            height: 100,
            autosize: true,
            paper_bgcolor: "#fff",
            plot_bgcolor: "transparent",
            xaxis: {
              rangeselector: {
                visible: true,
                buttons: [{
                  step: "all",
                  label: "all"
                }, {
                  step: "day",
                  count: 30,
                  label: "30 days"
                }, {
                  step: "hour",
                  count: 7 * 24,
                  label: "7 days"
                }]
              }
            },
            yaxis: {}
          }, {
            scrollZoom: false,
            staticPlot: true,
            responsive: true,
            width: width,
            displayModeBar: false
          });
          _this81.graphLoading = false;

          _this81.update();
        });
      }
    } else {
      this.showGraph = false;
    }
  }.bind(this);

  this.on("mount", function () {
    moment.updateLocale('en', {
      relativeTime: {
        future: "in %s",
        past: "%s ago",
        s: 'a few seconds',
        ss: '%d seconds',
        m: "a min",
        mm: "%d min",
        h: "an hour",
        hh: "%d hours",
        d: "a day",
        dd: "%d days",
        M: "a month",
        MM: "%d months",
        y: "a year",
        yy: "%d years"
      }
    });

    _this82.update();

    moment.relativeTimeThreshold('ss', 10);
    moment.relativeTimeThreshold('s', 50);
    moment.relativeTimeThreshold('m', 120);

    _this82.startLive();
  });
  this.on("unmount", function () {
    _this82.stopLive();
  });

  this.stopLive = function () {
    clearInterval(_liveUpdate);
  };

  this.startLive = function () {
    clearInterval(_liveUpdate);
    console.log("Live started");
    _liveUpdate = setInterval(function () {
      _lib.ajax.$get("/app/router/icon.php?quick&escooters=more", function (data) {
        var j = JSON.parse(data);
        self.update({
          detail: j.escooters
        });
      });
    }, 60000);
  };

  this.closestScooters = function (n) {
    return this.detail.list.slice(0, n);
  };

  this.on("update", function () {
    this.detail = this.parent ? this.parent.detail : this.opts.dataDetail;
    if (this.detail && this.detail[0] && this.detail[0].icon2) this.detail[0].image = "/assets/svg/" + this.detail[0].icon2 + "-black.svg";
    this.detail.count = this.detail.list.length;
    this.detail.distance = this.detail.list.reduce(function (n, a) {
      return n + a.battery * 37000 / 100;
    }, 0);
    this.detail.list.forEach(function (item) {
      item.location = JSON.parse(item.geojson);
      item.distance = _maps.distance(item.location.coordinates[1], item.location.coordinates[0], app.lastPosition.lat, app.lastPosition.lng);
      item.distance = Math.round(item.distance);
      item.showTime = moment(item.last_activity_at).fromNow();
    });
    this.detail.list.sort(function (a, b) {
      if (a.distance < b.distance) return -1;
      if (a.distance == b.distance) return 0;
      if (a.distance > b.distance) return 1;
    });
  });

  function updateLiveData(data) {
    data.forEach(function (a) {
      self.detail.list.forEach(function (b) {
        if (a.oid == b.data.data.Id) {
          b.values[0] = a.free + " free";
        }
      });
    });
    self.update();
  }

  this.showTimeline = function (e) {
    route("map/layers/limescooterline/" + e.item.item.oid, {
      map: {
        contain: true
      },
      clear: true,
      clearAll: true
    });
  }.bind(this);

  this.showDetail = function (e) {
    app.trigger("detail/click/" + this.parent.module, e.item);
  }.bind(this);

  this.showMapLayer = function (e) {
    var data = {
      detail: this.detail.options.map_layer,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    route("map", data);
  }.bind(this);

  this.showMapFeature = function (e) {
    var data = {
      feature: this.detail.options.map_feature,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    if (this.detail.options.map_layer) {
      data.detail = this.detail.options.map_layer;
    }

    route("map", data);
  }.bind(this);

  this.showItemFeature = function (e) {
    if (typeof e.item.item.location == "string") {
      e.item.item.location = JSON.parse(e.item.item.location);
    }

    var data = {
      clear: true,
      detail: this.detail.options.map_layer,
      map: {
        center: e.item.item.location.coordinates
      }
    };
    route("map", data);
  }.bind(this);

  this.showJourneyPlanner = function (e) {
    var _this83 = this;

    app.promise.google().then(function () {
      var data = {
        feature: _this83.detail.options.map_feature,
        title: _this83.detail.value,
        location: _maps.getCenter(_maps.GeoJSON(_this83.detail.options.map_feature.geometry, {}, true)).toJSON()
      };
      route("journey", data);
    });
  }.bind(this);
});
riot.tag2('detail-mtbtrackdetail', '<div class="wrapper" if="{detail}"> <content-box params="{toParam(subDetail)}"></content-box> <div class="controls {topBorder:subDetail.hasHeader,noTopMargin:!subDetail.hasHeader}" if="{subDetail.desc||subDetail.filterPanel||(subDetail.options&&subDetail.options.map_layer&&!subDetail.options.map_feature)}"> <form if="{subDetail.filterPanel}" class="filter"> <span class="filterLabel" if="{subDetail.filterPanel[0].options.type==\'order\'}">Sort by</span> <virtual each="{subDetail.filterPanel}"> <input onchange="{doFilter}" checked="{checked}" type="checkbox" name="{options.radio}" id="{id}"><label for="{id}">{label}</label> </virtual> </form> <div class="buttons" if="{subDetail.desc||(subDetail.options&&subDetail.options.map_layer&&!subDetail.options.map_feature)}"> <button class="location" click="{showMapLayer}" if="{subDetail.options&&subDetail.options.map_layer&&!subDetail.options.map_feature}"></button> <button class="desc" click="{showDescGo}" if="{subDetail.desc}"></button> </div> </div> <div if="{subDetail.strava_poly}" class=" svgpoly {smaller_image:!(subDetail.name && subDetail.name.toLowerCase()!=subDetail.value.toLowerCase())}"> <svg class="strava_poly" id="svg" height="80" width="80" viewport="0 0 80 80" preserveaspectratio="xMinYMin meet"></svg> </div> </div>', 'detail-mtbtrackdetail .graph.detail-section,[data-is="detail-mtbtrackdetail"] .graph.detail-section{ background-color: white; } detail-mtbtrackdetail,[data-is="detail-mtbtrackdetail"]{ display: flex; flex-basis: 100%; flex-direction: row; flex-wrap: wrap; background-color: #e6e7e8; width: calc(100% + 20px); transform: translate(-10px); text-align: left; } detail-mtbtrackdetail .header,[data-is="detail-mtbtrackdetail"] .header{ position: relative; z-index: 1; } detail-mtbtrackdetail .tfpic,[data-is="detail-mtbtrackdetail"] .tfpic{ margin-top: 20px; } detail-mtbtrackdetail path,[data-is="detail-mtbtrackdetail"] path{ stroke: rgba(255,255,255,0.5); fill: none; } detail-mtbtrackdetail .svgpoly,[data-is="detail-mtbtrackdetail"] .svgpoly{ position: absolute; right: 0px; z-index: 0; top: 0px; }', '', function (opts) {
  var _this84 = this;

  var self = this;
  this.manSvg = '/assets/publica/sets/Find_FastestMan.svg';
  this.womanSvg = '/assets/publica/sets/Find_FastestWoman.svg';
  this.showDesc = false;
  this.colors = {
    "Open": "green",
    "Closed": "red",
    "Avoid": "orange"
  };
  this.style = {};
  this.showGraph = false;
  var _dataset = 'mtbtrackstatus';

  this.toParam = function (item) {
    var _data$details4;

    var data = {
      label: item.value,
      sub: item.status,
      image: item.picture,
      buttons: [{
        label: "map",
        action: self.showMapFeature
      }],
      openDetails: true,
      details: []
    };

    if (item.ridden) {
      data.graph = {
        id: this.detail.data.id,
        url: "/app/router/graph.php?dataset=" + _dataset + "&oid=" + this.detail.data.id
      };
    }

    (_data$details4 = data.details).push.apply(_data$details4, [{
      label: "",
      value: "trailforks",
      link: item.tflink,
      hideEmpty: true
    }, {
      label: "",
      value: "strava",
      link: item.stravalink,
      hideEmpty: true
    }, {
      label: "grade",
      value: item.grade,
      svgIcon: "Grade",
      hideEmpty: true
    }, {
      label: "length",
      value: item.length,
      svgIcon: "Distance",
      hideEmpty: true
    }, {
      label: "gradient",
      value: item.gradient,
      svgIcon: "Gradient",
      hideEmpty: true
    }, {
      label: "ridden",
      value: item.ridden,
      svgIcon: "Flag",
      hideEmpty: true
    }, {
      label: "ridden today",
      value: item.ridden_today,
      svgIcon: "Flag",
      hideEmpty: true
    }, {
      label: "unique users",
      value: item.users,
      svgIcon: "Flag",
      hideEmpty: true
    }]);

    return data;
  };

  this.on("mount", function () {
    _this84.detail = _this84.opts.dataDetail;
    _this84.subDetail = _this84.detail.data.subDetail;

    _this84.update();
  });
  this.on("update", function () {
    var _this85 = this;

    this.detail = this.opts.dataDetail;
    this.subDetail = this.detail.data.subDetail;
    this.detail.hasHeader = !(this.detail.options && this.detail.options.no_header) && (this.detail.value || this.detail.label || this.detail.image || this.detail.desc);
    if (this.detail && this.detail[0] && this.detail[0].icon2) this.detail[0].image = "/assets/svg/" + this.detail[0].icon2 + "-black.svg";

    if (this.detail.picture) {
      this.style = {
        "background-image": "url(".concat(this.detail.picture, ")")
      };
    }

    if (this.detail.desc) {
      this.detail.desc = this.detail.desc.trim();
      var x = this.detail.desc.split(". ");

      if (x.length > 0 && x[0].length < 30) {
        this.detail.descHeader = x.shift();
      }

      this.detail.desc = x.join(".");
    }

    if (this.detail.filterPanel) {
      this.detail.filterPanel.forEach(function (a) {
        a.checked = app.session.get(a.options.radio) == a.id;

        if (a.checked) {
          _this85.doFilter({
            target: {
              checked: true
            },
            item: a
          });
        }
      });
    }
  });
  this.on("updated", function () {
    if (this.detail && this.detail.data.subDetail.strava_poly) {
      var paths = [this.detail.data.subDetail.strava_poly];
      init(paths);
    }

    if (this.detail && this.detail.data.subDetail) {
      var y = document.querySelector("main>section").offsetTop;
      y = _lib.getPosition(this.root).y - y - 5;
      document.querySelector("main>section").scrollTop = y;
    }
  });

  this.showGraphGo = function (e) {
    this.showGraph = !this.showGraph;

    if (this.showGraph) {
      this.refs.graph.update({
        id: this.detail.data.id,
        url: "/app/router/graph.php?dataset=" + _dataset + "&oid=" + this.detail.data.id
      });
    }
  }.bind(this);

  this.showDetail = function (e) {
    this.detail.showSubDetail = !this.detail.showSubDetail;
    this.detail.detailVisible = !this.detail.detailVisible;
    e.stopPropagation();
  }.bind(this);

  this.showDescGo = function (e) {
    var _this86 = this;

    if (!this.showDesc) {
      this.showDesc = true;
      setTimeout(function () {
        return window.addEventListener("click", _this86.hideDescGo);
      });
    }
  }.bind(this);

  this.hideDescGo = function (e) {
    if (this.showDesc) {
      this.showDesc = false;
      window.removeEventListener("click", this.hideDescGo);
      this.update();
    }
  }.bind(this);

  this.showMapLayer = function (e) {
    var data = {
      detail: this.detail.options.map_layer,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    route("map/layers/" + this.detail.options.map_layer, data);
  }.bind(this);

  this.showMapFeature = function (e) {
    var data = {
      feature: this.subDetail.options.map_feature,
      clear: true,
      map: {
        zoom: 15
      }
    };

    if (this.subDetail.options.map_layer) {
      data.detail = this.subDetail.options.map_layer;
    }

    route("map", data);
  }.bind(this);

  this.showItemFeature = function (e) {
    var data = {
      clear: true,
      detail: this.detail.options.map_layer,
      map: {
        center: e.item.item.data.location.coordinates
      }
    };
    route("map", data);
  }.bind(this);

  this.showJourneyPlanner = function (e) {
    var _this87 = this;

    app.promise.google().then(function () {
      var data = {
        feature: _this87.detail.options.map_feature,
        title: _this87.detail.value,
        location: _maps.getCenter(_maps.GeoJSON(_this87.detail.options.map_feature.geometry, {}, true)).toJSON()
      };
      route("journey", data);
    });
  }.bind(this);

  this.mainFilterGo = function (e) {
    this.detail.list.forEach(function (b) {
      b.hideMain = !(e.target.value == "All" || e.target.value == b.label);
    });
  }.bind(this);

  this.doFilter = function (e) {
    e.item.checked = e.target.checked;
    var d = {};
    d[e.item.options.radio] = e.item.id;
    app.session.set(d);

    if (e.item.checked) {
      this.detail.filterPanel.filter(function (a) {
        return a != e.item && (!a.options.radio || a.options.radio == e.item.options.radio);
      }).forEach(function (a) {
        a.checked = false;
      });
    }

    if (e.item.options.type == "value") {
      this.detail.list.forEach(function (b) {
        b.hide = false;
      });
      this.detail.filterPanel.filter(function (a) {
        return a.checked;
      }).forEach(function (a) {
        this.detail.list.forEach(function (b) {
          if (b.values.every(function (c) {
            return Array.isArray(a.value) ? !a.value.some(function (d) {
              return d == c;
            }) : c != a.value;
          })) {
            b.hide = true;
          }
        });
      }.bind(this));
    } else if (e.item.options.type == "order") {
      this.detail.list = this.detail.list.sort(function (a, b) {
        return b.data[e.item.value] - a.data[e.item.value];
      });
    }

    ;
  }.bind(this);

  function latLng2point(latLng) {
    return {
      x: (latLng.lng + 180) * (256 / 360),
      y: 256 / 2 - 256 * Math.log(Math.tan(Math.PI / 4 + latLng.lat * Math.PI / 180 / 2)) / (2 * Math.PI)
    };
  }

  function poly_gm2svg(gmPaths, fx) {
    var point,
        gmPath,
        svgPath,
        svgPaths = [],
        minX = 256,
        minY = 256,
        maxX = 0,
        maxY = 0;

    for (var pp = 0; pp < gmPaths.length; ++pp) {
      gmPath = gmPaths[pp], svgPath = [];

      for (var p = 0; p < gmPath.length; ++p) {
        point = latLng2point(fx(gmPath[p]));
        minX = Math.min(minX, point.x);
        minY = Math.min(minY, point.y);
        maxX = Math.max(maxX, point.x);
        maxY = Math.max(maxY, point.y);
        svgPath.push([point.x, point.y].join(','));
      }

      svgPaths.push(svgPath.join(' '));
    }

    return {
      path: 'M' + svgPaths.join(' M'),
      x: minX,
      y: minY,
      width: maxX - minX,
      height: maxY - minY
    };
  }

  function drawPoly(node, props) {
    var svg = node.cloneNode(false),
        g = document.createElementNS("http://www.w3.org/2000/svg", 'g'),
        path = document.createElementNS("http://www.w3.org/2000/svg", 'path');
    node.parentNode.replaceChild(svg, node);
    path.setAttribute('d', props.path);
    g.appendChild(path);
    svg.appendChild(g);
    svg.setAttribute('viewBox', [props.x - .0002, props.y - .0002, props.width + .0004, props.height + .0004].join(' '));

    if (self.detail.data.subDetail.length) {
      self.root.querySelector('svg').style.strokeWidth = Math.sqrt(parseFloat(self.detail.data.subDetail.length)) / (1000 * 10);
    }
  }

  function init(paths) {
    var svgProps = poly_gm2svg(paths, function (latLng) {
      return {
        lat: latLng[1],
        lng: latLng[0]
      };
    });
    drawPoly(self.root.querySelector('.strava_poly'), svgProps);
  }
});
riot.tag2('detail-mtbtracks', '<div class="wrapper {mtbgallery:gallery}" if="{detail}"> <fav-button alert="{alertText}" book="{getFavData()}"></fav-button> <div class="detail-section controls noTopMargin"> <form if="{detail.filterPanel}" class="filter"> <fieldset> <legend>Filter by</legend> <div class="flex"> <virtual each="{detail.filterPanel}"> <label class="input-wrapper fixed-width-30" for="{id}"><input onchange="{doFilter2}" checked="{checked}" type="checkbox" name="{options.radio}" id="{id}">{label}</label> </virtual> </div> </fieldset> </form> <div class="view-type"> <button click="{toggleGalleryOff}" class="icon list-button {active:!gallery}"></button> <button click="{toggleGalleryOn}" class="icon grid-button {active:gallery}"></button> </div> </div> <div class="detail-section detail-header-table {bottom-corners:gallery}"> <table class=""> <tr> <td class="left">Christchurch tracks</td> <td>{detail.phopen} Open, {detail.phclosed} Closed</td> </tr> <tr> <td class="left">Adventure park tracks</td> <td if="{detail.capopen}">{detail.capopen} Open, {detail.capclosed} Closed</td> <td if="{!detail.capopen}">Closed</td> </tr> <tr if="{detail.caplift!=\'N/A\'}"> <td class="left">Adventure park chairlift</td> <td>{detail.caplift}</td> </tr> </table> </div> <div class="detail-section detail-data"> <table class="items {table-block:detail.options&&detail.options.vertical}" if="{detail.list}"> <tr if="{!gallery}"> <th class="left">Track</th> <th class="left">Status</th> <th class="left"></th> </tr> <tbody each="{item in detail.list}" hide="{item.hide||item.hideMain}" class="{item.class}"> <tr click="{showDetail}" if="{!item.detailVisible&&!gallery}"> <td if="{!item.data.image}" nostyle="{(item.data&&item.data.style)?item.data.style:\'\'}"> <span class="dot {colors[item.values[0]]}"></span><span>{item.label}</span> </td> <td riot-style="{(item.data&&item.data.style)?item.data.style:\'\'}"> <p each="{row in item.values}"> <raw content="{row}"></raw> </p> </td> <td> <button class="small">View</button> </td> </tr> <tr click="{showDetail}" class="subtrack" if="{!item.detailVisible&&!gallery&&item.data.subs}" each="{subitem in item.data.subs}"> <td if="{!subitem.data.image}" nostyle="{(subitem.data&&subitem.data.style)?subitem.data.style:\'\'}"> <span class="dot {colors[subitem.values[0]]}"></span><span>{subitem.label}</span> </td> <td riot-style="{(subitem.data&&subitem.data.style)?subitem.data.style:\'\'}"> <p each="{row in subitem.values}"> <raw content="{row}"></raw> </p> </td> <td> <button class="small">View</button> </td> </tr> <tr if="{item.detailVisible||gallery}"> <td colspan="3"> <detail-mtbtrackdetail data-detail="{item}" data-id="{item.data.id}"> </detail-mtbtrackdetail> </td> </tr> <tr if="{(item.detailVisible||gallery)&&item.data.subs}" each="{subitem in item.data.subs}"> <td colspan="3"> <detail-mtbtrackdetail data-detail="{subitem}" data-id="{subitem.data.id}"> </detail-mtbtrackdetail> </td> </tr> </tbody> </table> </div> </div>', 'detail-mtbtracks .subtrack,[data-is="detail-mtbtracks"] .subtrack{ font-size: 80% } detail-mtbtracks .subtrack td:first-child,[data-is="detail-mtbtracks"] .subtrack td:first-child{ padding-left: 10px } detail-mtbtracks fav-button,[data-is="detail-mtbtracks"] fav-button{ position: absolute; top: 10px; background: #61a2d8; padding: 10px; border-top-left-radius: 6px; border-bottom-left-radius: 6px; right: 0; z-index: 99; }', '', function (opts) {
  var _this88 = this;

  this.gallery = false;
  this.showDesc = true;
  this.colors = {
    "Open": "green",
    "Closed": "red",
    "Avoid": "orange"
  };
  this.alertText = "Try to favourite track status<br> to see it on the home page";
  this.scrollTo = false;

  this.getFavData = function () {
    var data = [{
      title: "Christchurch ",
      value: "".concat(this.detail.phopen, " Open, ").concat(this.detail.phclosed, " Closed"),
      svgIcon: "Flag"
    }, {
      title: "Adventure park ",
      value: "".concat(this.detail.capopen, " Open, ").concat(this.detail.capclosed, " Closed"),
      svgIcon: "Flag"
    }];

    if (this.detail.caplift != 'N/A') {
      data.push({
        title: "Adventure park chairlift",
        value: "".concat(this.detail.caplift),
        svgIcon: "Flag"
      });
    }

    return {
      page: "play",
      detail: "mtbtrackstatus",
      data: data,
      update_on: new Date(),
      expire_after: {
        val: 10,
        dim: "mins"
      }
    };
  };

  this.on("mount", function () {
    _this88.update();

    app.alert.set({
      title: "MTB tracks update",
      msg: _this88.detail.desc
    });
  });
  this.on("updated", function () {
    if (this.scrollTo) {
      var self = this;
      setTimeout(function () {
        var ele = document.querySelector(self.scrollTo);
        document.querySelector("main>main").scrollTo(0, _lib.getPosition(ele).y - 40);
        self.scrollTo = false;
      }, 10);
    }
  });
  this.on("update", function () {
    this.detail = this.parent ? this.parent.detail : this.opts.dataDetail;
    this.detail.hasHeader = !(this.detail.options && this.detail.options.no_header) && (this.detail.value || this.detail.label || this.detail.image || this.detail.desc);
    if (this.detail && this.detail[0] && this.detail[0].icon2) this.detail[0].image = "/assets/svg/" + this.detail[0].icon2 + "-black.svg";

    if (this.detail.desc) {
      this.detail.desc = this.detail.desc.trim();
    }

    if (this.detail.filterPanel) {
      this.detail.filterPanel.forEach(function (a) {});
    }

    console.log("Detail", this);
  });

  this.toggleGalleryOn = function (e) {
    this.gallery = true;
    this.detail.list.forEach(function (a) {
      a.showSubDetail = false;
      a.detailVisible = false;
    });
  }.bind(this);

  this.toggleGalleryOff = function (e) {
    this.gallery = false;
    this.detail.list.forEach(function (a) {
      a.showSubDetail = false;
      a.detailVisible = false;
    });
  }.bind(this);

  this.showDetail = function (e) {
    this.detail.list.forEach(function (a) {
      a.showSubDetail = false;
      a.detailVisible = false;
    });

    if (e.item.subitem) {
      e.item.subitem.detailVisible = true;
      e.item.subitem.showSubDetail = true;
    } else {
      e.item.item.detailVisible = true;
      e.item.item.showSubDetail = true;
    }

    this.gallery = true;
    var path = e.path || e.composedPath && e.composedPath();

    if (path) {
      if (e.item.subitem) {
        this.scrollTo = "[data-id=\"".concat(e.item.subitem.data.id, "\"]");
      } else {
        this.scrollTo = "[data-id=\"".concat(e.item.item.data.id, "\"]");
      }
    } else {}
  }.bind(this);

  this.toggleDesc = function (e) {
    this.showDesc = !this.showDesc;
  }.bind(this);

  this.showDescGo = function (e) {
    var _this89 = this;

    if (!this.showDesc) {
      this.showDesc = true;
      setTimeout(function () {
        return window.addEventListener("click", _this89.hideDescGo);
      });
    }
  }.bind(this);

  this.hideDescGo = function (e) {
    if (this.showDesc) {
      this.showDesc = false;
      window.removeEventListener("click", this.hideDescGo);
      this.update();
    }
  }.bind(this);

  this.showMapLayer = function (e) {
    var data = {
      detail: this.detail.options.map_layer,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    route("map/layers/" + this.detail.options.map_layer, data);
  }.bind(this);

  this.showMapFeature = function (e) {
    var data = {
      feature: this.detail.options.map_feature,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    if (this.detail.options.map_layer) {
      data.detail = this.detail.options.map_layer;
    }

    route("map", data);
  }.bind(this);

  this.showItemFeature = function (e) {
    var data = {
      clear: true,
      detail: this.detail.options.map_layer,
      map: {
        center: e.item.item.data.location.coordinates
      }
    };
    route("map", data);
  }.bind(this);

  this.showJourneyPlanner = function (e) {
    var _this90 = this;

    app.promise.google().then(function () {
      var data = {
        feature: _this90.detail.options.map_feature,
        title: _this90.detail.value,
        location: _maps.getCenter(_maps.GeoJSON(_this90.detail.options.map_feature.geometry, {}, true)).toJSON()
      };
      route("journey", data);
    });
  }.bind(this);

  this.mainFilterGo = function (e) {
    this.detail.list.forEach(function (b) {
      b.hideMain = !(e.target.value == "All" || e.target.value == b.label);
    });
  }.bind(this);

  this.doFilter2 = function (e) {
    e.item.checked = e.target.checked;

    if (e.item.options.type == "value" || e.item.options.type == "data") {
      this.detail.list.forEach(function (b) {
        b.hide = false;
      });
      this.detail.filterPanel.filter(function (a) {
        return !a.checked;
      }).forEach(function (a) {
        if (a.options.type == "value") {
          this.detail.list.forEach(function (b) {
            if (b.values.some(function (c) {
              return Array.isArray(a.value) ? a.value.some(function (d) {
                return d == c;
              }) : c == a.value;
            })) {
              b.hide = true;
            }
          });
        } else if (a.options.type == "data") {
          this.detail.list.forEach(function (b) {
            if (b.data[a.options.prop] == a.value) {
              b.hide = true;
            }
          });
        }
      }.bind(this));
    } else if (e.item.options.type == "order") {
      this.detail.list = this.detail.list.sort(function (a, b) {
        return b.data[e.item.value] - a.data[e.item.value];
      });
    }

    ;
  }.bind(this);
});
riot.tag2('detail-news', '<form if="{detail&&detail.filterPanel}" class="filter"> <virtual each="{detail.filterPanel}"><input onchange="{doFilter}" checked="{checked}" type="checkbox" name="{options.radio}" id="{id}"><label for="{id}">{label}</label></virtual> </form> <detail-item-news each="{item in detail?detail.list:[]}"></detail-item-news> <content-box if="{noData()}" label="{detail.emptyMessage}"> </content-box> <button class="detail-button f-p4" click="{showMapLayer}" if="{!noData()&&detail&&detail.options&&detail.options.map_layer&&!detail.options.map_feature}">Map view</button> <button class="detail-button f-p4" click="{showMapFeature}" if="{!noData()&&detail&&detail.options&&detail.options.map_feature}">Map view</button> <button class="detail-button f-p4 journey" click="{showJourneyPlanner}" if="{!noData()&&detail&&detail.options&&detail.options.map_feature}">{app.conf.buttons.journeyPlanner||⁗Journey planner⁗}</button>', '', '', function (opts) {
  var _this91 = this;

  this.noData = function () {
    return this.detail && !this.detail.list && this.detail.emptyMessage;
  };

  this.on("mount", function () {
    return _this91.update();
  });
  this.on("update", function () {
    this.detail = this.parent ? this.parent.detail : this.opts.dataDetail;
    if (this.detail && this.detail[0] && this.detail[0].icon2) this.detail[0].image = "/assets/svg/" + this.detail[0].icon2 + "-black.svg";
    console.log(this, "newsalll");

    if (this.detail.options && this.detail.options.popup) {
      app.alert.set(this.detail.options.popup);
    }
  });

  this.showMapLayer = function (e) {
    var data = {
      detail: this.detail.options.map_layer,
      clear: true,
      map: {
        contain: true
      }
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    route("map/layers/" + this.detail.options.map_layer, data);
  }.bind(this);

  this.showMapFeature = function (e) {
    var data = {
      feature: this.detail.options.map_feature,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    if (this.detail.options.map_layer) {
      data.detail = this.detail.options.map_layer;
    }

    route("map", data);
  }.bind(this);

  this.showJourneyPlanner = function (e) {
    var data = {
      feature: this.detail.options.map_feature,
      title: this.detail.value,
      location: _maps.getCenter(_maps.GeoJSON(this.detail.options.map_feature.geometry, {}, true)).toJSON()
    };
    route("journey", data);
  }.bind(this);

  this.mainFilterGo = function (e) {
    this.detail.list.forEach(function (b) {
      b.hideMain = !(e.target.value == "All" || e.target.value == b.label);
    });
  }.bind(this);

  this.doFilter = function (e) {
    e.item.checked = e.target.checked;

    if (e.item.checked) {
      this.detail.filterPanel.filter(function (a) {
        return a != e.item && (!a.options.radio || a.options.radio == e.item.options.radio);
      }).forEach(function (a) {
        a.checked = false;
      });
    }

    if (e.item.options.type == "value") {
      this.detail.list.forEach(function (b) {
        b.hide = false;
      });
      this.detail.filterPanel.filter(function (a) {
        return a.checked;
      }).forEach(function (a) {
        this.detail.list.forEach(function (b) {
          if (b.values.every(function (c) {
            return c != a.value;
          })) {
            b.hide = true;
          }
        });
      }.bind(this));
    }
  }.bind(this);
});
riot.tag2('detail-parking', '<virtual if="{detail}"> <div class="detail-section controls noTopMargin"> <form class="filter"> <fieldset> <legend>Search by type</legend> </fieldset> </form> </div> <pulse-box each="{detail.nodes}"></pulse-box> <virtual each="{onstreet,legend in lists}"> <div class="detail-section controls noTopMargin"> <form class="filter"> <fieldset> <legend>{legend}</legend> </fieldset> </form> </div> <div ref="list" class="detailsection" if="{detail.list}"> <div each="{item, i in listFilter(onstreet)}" class="{item.class}"> <div class="detail-flex detail-section detail-header-table margin-top {bottom-corners:!item.showSubDetail}"> <div> <div>{item.label}</div> <span>{item.data.free} Free</span> </div> <div class="buttons"> <fav-button alert="{i==0&&alertText}" book="{getFavData(item)}"></fav-button> <button class="{active:item.showSubDetail}" click="{showDetail}">About</button> <button class="graph {active:item.showGraph}" click="{showItemDesc}">Graph</button> <button class="location" click="{parent.showItemFeature}">Map</button> </div> </div> <div if="{item.showSubDetail}" class="detail-section detail-data detail-flex flex-left"> <div style="background-image:url(\'/assets/publica/sets/OnTheGo_Pin_Location.svg\')" class="detail-name-val icon"> <strong>street</strong> <span>{item.data.street || ⁗N/A⁗}</span> </div> <div style="background-image:url(\'/assets/publica/sets/OnTheGo_Rate.svg\')" class="detail-name-val icon"> <strong>hourly</strong> <span><span if="{item.data.rates.hourly && !isNaN(item.data.rates.hourly)}">$</span>{item.data.rates.hourly || ⁗N/A⁗}</span> </div> <div style="background-image:url(\'/assets/publica/sets/OnTheGo_Rate.svg\')" class="detail-name-val icon"> <strong>daily</strong> <span><span if="{(item.data.rates.daily  && !isNaN(item.data.rates.daily)) || (item.data.rates.bird && !isNaN(item.data.rates.bird))}">$</span>{item.data.rates.daily || item.data.rates.bird || ⁗N/A⁗}</span> </div> </div> <div show="{item.showGraph}" class="detail-section detail-data detail-flex flex-left"> <loading data-classes="td-margin" if="{item.graphLoading}"></loading> <div style="height: 100px" id="{\'oid\'+item.data.oid}"></div> <i>Graph shows number of available parking spots in time.</i> </div> </div> </div> </virtual> </virtual>', 'detail-parking .subdetail tr,[data-is="detail-parking"] .subdetail tr{ border-bottom: none; } detail-parking .subdetail tr.graph,[data-is="detail-parking"] .subdetail tr.graph{ border-top: none; } detail-parking .subdetail tr.graph td,[data-is="detail-parking"] .subdetail tr.graph td{ padding-bottom: 20px; text-align: left; } detail-parking .detail-header-table>div:first-child,[data-is="detail-parking"] .detail-header-table>div:first-child{ width: 60%; } detail-parking .buttons,[data-is="detail-parking"] .buttons{ max-width: 40%; display: flex; flex-grow: 0; flex-flow: wrap; place-content: end; align-items: center; place-content: flex-end; } detail-parking button,[data-is="detail-parking"] button{ margin-right: 2px }', '', function (opts) {
  var _this92 = this;

  var self = this;
  this.lists = {
    "Car park buildings": false,
    "On street sensors": true
  };
  this.on("mount", function () {
    _this92.update();

    app.trigger("parking/live/start");
    app.on("parking/live/update", updateLiveData);
  });
  this.alertText = "Try to favourite a car park<br> to see it's occupancy <br>on the home page";

  this.listFilter = function (onstreet) {
    return this.detail.list.filter(function (a) {
      return a.data.onstreet == onstreet;
    });
  };

  this.getFavData = function (item) {
    return {
      page: "travel",
      detail: "parking",
      id: item.data.oid,
      data: [{
        title: "Car park",
        value: "".concat(item.label),
        svgIcon: "Location"
      }, {
        title: "Park free ",
        value: "".concat(item.data.free),
        svgIcon: "ParksFree"
      }],
      update_on: new Date(),
      expire_after: {
        val: 3,
        dim: "mins"
      }
    };
  };

  this.on("unmount", function () {
    app.off("parking/live/update");
  });
  this.on("update", function () {
    this.detail = this.parent ? this.parent.detail : this.opts.dataDetail;
    if (this.detail && this.detail[0] && this.detail[0].icon2) this.detail[0].image = "/assets/svg/" + this.detail[0].icon2 + "-black.svg";
    this.detail.list.sort(function (a, b) {
      if (a.data.onstreet && b.data.onstreet) {
        return b.data.free - a.data.free;
      } else if (a.data.onstreet) {
        return 1;
      } else if (b.data.onstreet) {
        return -1;
      } else {
        return b.data.free - a.data.free;
      }
    });
    this.detail.list = this.detail.list.filter(function (a) {
      return a.data.oid != 1367;
    });
  });

  this.showItemDesc = function (e) {
    var _this93 = this;

    if (typeof e.item.item.showDesc === "undefined") {
      e.item.item.showDesc = false;
    }

    e.item.item.showDesc = e.item.item.showDesc ? false : true;

    if (e.item.item.showDesc) {
      if (e.item.item.graphData) {
        e.item.item.showGraph = true;
      } else {
        e.item.item.graphLoading = true;
        e.item.item.showGraph = true;

        _lib.ajax.$get("/app/router/parking.php?oid=" + e.item.item.data.oid, function (ret) {
          ret = JSON.parse(ret);
          var calcy = ret.y.map(parseFloat).filter(function (a) {
            return !isNaN(a);
          });
          e.item.item.graphData = ret;
          e.item.item.station = e.item.item.data.data.name;
          var wlist = Array.isArray(_this93.refs.list) ? _this93.refs.list[0] : _this93.refs.list;
          var width = parseInt(getComputedStyle(wlist).width) - 20;
          document.getElementById("oid" + e.item.item.data.oid).style.width = width + "px";
          ret.line = {
            color: "#cadb44",
            width: 1
          };
          Plotly.plot(document.getElementById("oid" + e.item.item.data.oid), [ret], {
            margin: {
              t: 0,
              b: 30,
              l: 30,
              r: 0
            },
            width: width,
            height: 100,
            autosize: true,
            paper_bgcolor: "#fff",
            plot_bgcolor: "transparent",
            xaxis: {
              rangeselector: {
                visible: true,
                buttons: [{
                  step: "day",
                  count: 30,
                  label: "30 days"
                }, {
                  step: "hour",
                  count: 7 * 24,
                  label: "7 days"
                }, {
                  step: "hour",
                  count: 24,
                  label: "24 hours"
                }]
              }
            },
            yaxis: {}
          }, {
            scrollZoom: false,
            staticPlot: true,
            responsive: true,
            width: width,
            displayModeBar: false
          });
          e.item.item.graphLoading = false;

          _this93.update();
        });
      }
    } else {
      e.item.item.showGraph = false;
    }
  }.bind(this);

  this.hideDescGo = function (e) {
    if (this.showDesc) {
      this.showDesc = false;
      window.removeEventListener("click", this.hideDescGo);
      this.update();
    }
  }.bind(this);

  function updateLiveData(data) {
    data.forEach(function (a) {
      self.detail.list.forEach(function (b) {
        if (a.oid == b.data.data.Id) {
          b.values[0] = a.free + " free";
        }
      });
    });
    self.update();
  }

  this.showDetail = function (e) {
    e.item.item.showSubDetail = !e.item.item.showSubDetail;
    e.item.item.detailVisible = !e.item.item.detailVisible;
    e.stopPropagation();
  }.bind(this);

  this.showMapLayer = function (e) {
    var data = {
      detail: this.detail.options.map_layer,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    route("map/layers/parking", data);
  }.bind(this);

  this.showMapFeature = function (e) {
    var data = {
      feature: this.detail.options.map_feature,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    if (this.detail.options.map_layer) {
      data.detail = this.detail.options.map_layer;
    }

    route("map/layers/parking", data);
  }.bind(this);

  this.showItemFeature = function (e) {
    if (typeof e.item.item.data.location == "string") {
      e.item.item.data.location = JSON.parse(e.item.item.data.location);
    }

    var data = {
      clear: true,
      detail: this.detail.options.map_layer,
      filter: "building",
      map: {
        center: e.item.item.data.location.coordinates
      },
      feature: {
        type: "Feature",
        geometry: {
          type: "Point",
          coordinates: e.item.item.data.location.coordinates
        },
        properties: {
          obj: e.item.item
        }
      }
    };
    route("map/layers/parking", data);
  }.bind(this);

  this.showJourneyPlanner = function (e) {
    var _this94 = this;

    app.promise.google().then(function () {
      var data = {
        feature: _this94.detail.options.map_feature,
        title: _this94.detail.value,
        location: _maps.getCenter(_maps.GeoJSON(_this94.detail.options.map_feature.geometry, {}, true)).toJSON()
      };
      route("journey", data);
    });
  }.bind(this);
});
riot.tag2('detail-quakes', '<div class="wrapper" if="{detail}"> <div ref="list" class="detailsection" if="{detail.list}"> <div each="{item in detail.list}" hide="{item.hide||item.hideMain}" class="{item.class}"> <div class="detail-flex detail-section detail-header-table margin-top {bottom-corners:!item.showSubDetail}"> <div> <div>{item.label}</div> <span>{getDistance(item)} </span> </div> <div class="buttons"> <fav-button book="{getFavData()}"></fav-button> <button class="{active:item.showSubDetail}" click="{showDetail}">About</button> <button click="{showItemFeature}">Map</button> </div> </div> <div if="{item.showSubDetail}" class="detail-section detail-data detail-flex flex-left"> <div style="background-image:url(\'/assets/publica/sets/Environment_Magnitude.svg\')" class="detail-name-val icon"> <strong>magnitude</strong> <span>{item.data.magnitude || ⁗N/A⁗}</span> </div> <div style="background-image:url(\'/assets/publica/sets/Environment_Depth.svg\')" class="detail-name-val icon"> <strong>depth</strong> <span>{item.data.depth || ⁗N/A⁗}</span> </div> </div> </div> <detail-item-news if="{this.detail.relatedNews}" data-item="{this.detail.relatedNews}"></detail-item-news> </div> </div>', 'detail-quakes detail-item-news,[data-is="detail-quakes"] detail-item-news{ margin-top: 10px; } detail-quakes .detailsection,[data-is="detail-quakes"] .detailsection{ width: 100%; } detail-quakes .filter,[data-is="detail-quakes"] .filter{ width: 100%; } detail-quakes select:first-child,[data-is="detail-quakes"] select:first-child{ margin-right: 10px; } detail-quakes .flex,[data-is="detail-quakes"] .flex{ flex-flow: row; }', '', function (opts) {
  var _this95 = this;

  this.showDesc = false;

  this.getFavData = function () {
    var q = this.detail.list[0];
    return {
      page: "environment",
      detail: "quake",
      data: [{
        title: "magnitude",
        value: "".concat(q.data.magnitude),
        svgIcon: "Magnitude"
      }, {
        title: "depth",
        value: "".concat(q.data.depth),
        svgIcon: "Depth"
      }],
      update_on: new Date(),
      expire_after: {
        val: 2,
        dim: "hours"
      }
    };
  };

  this.getDistance = function (f) {
    var d = _maps.distance(app.location.current.point.lat, app.location.current.point.lng, f.data.location.coordinates[1], f.data.location.coordinates[0]);

    d = Math.round(d / 1000);
    d = d.toLocaleString();
    d += "km";
    return d;
  };

  this.anyVisible = function () {
    return !_this95.detail.list.every(function (a) {
      return a.hide;
    });
  };

  this.on("mount", function () {
    return _this95.update();
  });
  this.on("update", function () {
    this.detail = this.parent ? this.parent.detail : this.opts.dataDetail;
    if (this.detail && this.detail[0] && this.detail[0].icon2) this.detail[0].image = "/assets/svg/" + this.detail[0].icon2 + "-black.svg";

    if (this.detail.desc) {
      this.detail.desc = this.detail.desc.trim();
      var x = this.detail.desc.split(".");

      if (x.length > 0 && x[0].length < 30) {
        this.detail.descHeader = x.shift();
      }

      this.detail.desc = x.join(".");
    }

    console.log("Detail", this);
  });

  this.showDetail = function (e) {
    console.log(e);

    if (e.item.item.showSubDetail) {
      e.item.item.showSubDetail = false;
    } else {
      e.item.item.showSubDetail = true;
    }
  }.bind(this);

  this.showDescGo = function (e) {
    var _this96 = this;

    if (!this.showDesc) {
      this.showDesc = true;
      setTimeout(function () {
        return window.addEventListener("click", _this96.hideDescGo);
      });
    }
  }.bind(this);

  this.hideDescGo = function (e) {
    if (this.showDesc) {
      this.showDesc = false;
      window.removeEventListener("click", this.hideDescGo);
      this.update();
    }
  }.bind(this);

  this.showMapLayer = function (e) {
    var data = {
      detail: this.detail.options.map_layer,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    route("map", data);
  }.bind(this);

  this.showItemFeature = function (e) {
    var data = {
      clear: true,
      detail: this.detail.options.map_layer,
      map: {
        center: e.item.item.data.location.coordinates
      }
    };
    route("map", data);
  }.bind(this);

  this.showMapFeature = function (e) {
    var data = {
      feature: this.detail.options.map_feature,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    if (this.detail.options.map_layer) {
      data.detail = this.detail.options.map_layer;
    }

    route("map", data);
  }.bind(this);

  this.showJourneyPlanner = function (e) {
    var _this97 = this;

    app.promise.google().then(function () {
      var data = {
        feature: _this97.detail.options.map_feature,
        title: _this97.detail.value,
        location: _maps.getCenter(_maps.GeoJSON(_this97.detail.options.map_feature.geometry, {}, true)).toJSON()
      };
      route("journey", data);
    });
  }.bind(this);

  this.mainFilterGo = function (e) {
    this.detail.list.forEach(function (b) {
      b.hideMain = !(e.target.value == "All" || e.target.value == b.label);
    });
  }.bind(this);

  this.doFilter = function (e) {
    e.item.checked = e.target.checked;

    if (e.item.checked) {
      this.detail.filterPanel.filter(function (a) {
        return a != e.item && (!a.options.radio || a.options.radio == e.item.options.radio);
      }).forEach(function (a) {
        a.checked = false;
      });
    }

    if (e.item.options.type == "value") {
      this.detail.list.forEach(function (b) {
        b.hide = false;
      });
      this.detail.filterPanel.filter(function (a) {
        return a.checked;
      }).forEach(function (a) {
        this.detail.list.forEach(function (b) {
          if (b.values.every(function (c) {
            return c != a.value;
          })) {
            b.hide = true;
          }
        });
      }.bind(this));
    }
  }.bind(this);
});
riot.tag2('detail-roadworks', '<virtual if="{detail}"> <pulse-box each="{detail.nodes}"></pulse-box> <div class="detailsection"> <div class="detail-flex detail-section detail-header-table margin-top "> <div> <div>Statistics</div> </div> </div> <div class="detail-section detail-data detail-flex flex-left"> <p> {countall.toLocaleString()} road works affecting {Math.round(lengthall/1000).toLocaleString()}kms of roads </p> <p> {countclosed.toLocaleString()} closed roads affecting {Math.round(lengthclosed/1000).toLocaleString()}kms of roads </p> </div> <div class="detail-flex detail-section detail-header-table margin-top "> <div> <div>Nearest road works</div> </div> <div class="buttons"> <a href="{window.config.hashbang}map/layers/tfc-road-works" class="detail-button">Map</a> </div> </div> <div class="detail-section detail-data detail-flex flex-left"> <table style="margin-top:20px;width:100%" class="items {table-block:detail.options&&detail.options.vertical}" if="{detail.features}"> <tr> <th>Distance</th> <th>Title</th> <th>&nbsp;</th> </tr> <tr click="{showDetail}" each="{item in closestRoadWorks(10)}" class="{item.class}"> <td>{item.distance}m</td> <td>{item.properties.Name||item.properties.Description}</td> <td> <div class="buttons"><button class="location" click="{parent.showItemFeature}">Map</button></div> </td> </tr> </table> </div> </div> </virtual>', 'detail-roadworks p,[data-is="detail-roadworks"] p{ flex-basis: 100%; } detail-roadworks .items,[data-is="detail-roadworks"] .items{ table-layout: auto; } detail-roadworks .items .buttons,[data-is="detail-roadworks"] .items .buttons{ margin-left: 0; }', 'class="pulse-page"', function (opts) {
  var _this98 = this;

  var self = this;
  var featurename = "tfc-road-works";
  this.lengthall = 0;
  this.lengthclosed = 0;
  this.countall = 0;
  this.countclosed = 0;
  this.alertText = "Try to favourite this page<br> to see the nearest scooter <br>on the home page";
  this.on("mount", function () {
    moment.updateLocale('en', {
      relativeTime: {
        future: "in %s",
        past: "%s ago",
        s: 'a few seconds',
        ss: '%d seconds',
        m: "a min",
        mm: "%d min",
        h: "an hour",
        hh: "%d hours",
        d: "a day",
        dd: "%d days",
        M: "a month",
        MM: "%d months",
        y: "a year",
        yy: "%d years"
      }
    });
    moment.relativeTimeThreshold('ss', 10);
    moment.relativeTimeThreshold('s', 50);
    moment.relativeTimeThreshold('m', 120);
    _this98.detail = _this98.parent ? _this98.parent.detail : _this98.opts.dataDetail;
    var storedname = "map/" + featurename;
    var collection = {
      "type": "FeatureCollection",
      "crs": {
        "type": "name",
        "properties": {
          "name": "EPSG:4326"
        }
      },
      "features": _this98.detail.features
    };

    _lib.keep.expire(storedname, collection);

    _this98.detail.features.forEach(function (a) {
      if (a.properties.Closure) {
        _this98.countclosed++;
        _this98.lengthclosed += a.properties.geolength;
      }

      _this98.countall++;
      _this98.lengthall += a.properties.geolength;
    });

    _this98.update();
  });

  this.closestRoadWorks = function (n) {
    return this.detail.features.slice(0, n);
  };

  this.on("update", function () {
    if (this.detail && this.detail[0] && this.detail[0].icon2) this.detail[0].image = "/assets/svg/" + this.detail[0].icon2 + "-black.svg";
    this.detail.features.forEach(function (item) {
      var coords = _lib.flattenDeep(item.geometry.coordinates);

      var d = 999999;

      for (var i = 0; i < coords.length; i += 2) {
        d = Math.min(d, _maps.distance(coords[i + 1], coords[i], app.lastPosition.lat, app.lastPosition.lng));
      }

      item.distance = d;
      item.distance = Math.round(item.distance);
    });
    this.detail.features.sort(function (a, b) {
      if (a.distance < b.distance) return -1;
      if (a.distance == b.distance) return 0;
      if (a.distance > b.distance) return 1;
    });
  });

  this.showTimeline = function (e) {
    route("map/layers/" + featurename + "/" + e.item.item.oid, {
      map: {
        contain: true
      },
      clear: true,
      clearAll: true
    });
  }.bind(this);

  this.showDetail = function (e) {
    app.trigger("detail/click/" + this.parent.module, e.item);
  }.bind(this);

  this.showMapLayer = function (e) {
    var data = {
      detail: this.detail.options.map_layer,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    route("map", data);
  }.bind(this);

  this.showMapFeature = function (e) {
    var data = {
      feature: this.detail.options.map_feature,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    if (this.detail.options.map_layer) {
      data.detail = this.detail.options.map_layer;
    }

    route("map", data);
  }.bind(this);

  this.showItemFeature = function (e) {
    var data = {
      clear: true,
      detail: this.detail.options.map_layer,
      map: {
        center: {
          lat: e.item.item.properties.focus_point.coordinates[1],
          lng: e.item.item.properties.focus_point.coordinates[0]
        }
      }
    };
    route("map/layers/tfc-road-works", data);
  }.bind(this);

  this.showJourneyPlanner = function (e) {
    var _this99 = this;

    app.promise.google().then(function () {
      var data = {
        feature: _this99.detail.options.map_feature,
        title: _this99.detail.value,
        location: _maps.getCenter(_maps.GeoJSON(_this99.detail.options.map_feature.geometry, {}, true)).toJSON()
      };
      route("journey", data);
    });
  }.bind(this);
});
riot.tag2('detail-rubbishcollection', '<div class="bin-detail" if="{detail}"> <div class="detail-flex detail-section detail-header-table"> <div> <h3>{getDay()}</h3> <span>{getDescription()}</span> </div> <div class="buttons"> <fav-button alert="{alertText}" book="{getFavData()}"></fav-button> <a class="detail-button" href="{window.config.hashbang}map/layers/rubbishcollection">Map</a> </div> </div> <div class="detail-section detail-data"> <div class="green-bin {this-week-bin:isGreen()}"></div> <div class="red-bin {this-week-bin:isRed()}"></div> <div class="yellow-bin {this-week-bin:isYellow()}"></div> </div> <div if="{getExtra()}" style="margin-top: 20px;" class="detail-section detail-data"> <div> <span>{getExtra()}</span> </div> </div> <div style=" width: 100%; display: flex; margin-top: 20px;" class="pulseboxes"> <pulse-box each="{bingame}"></pulse-box> </div> <div if="{detail.battery}" style="margin-top: 20px;"> <div class="detail-flex detail-section detail-header-table"> <div> <h3>Battery collection locations</h3> </div> <div class="buttons"> <button click="{showBatteryDetails}">Details</button> </div> </div> <div class="detail-section detail-data"> <table> <tr> <th>Name</th> <th>Distance</th> </tr> <tbody each="{detail.battery}"> <tr> <td>{properties.sitename}</td> <td>{Math.round(properties.distance/100)/10}km</td> </tr> <tr hide="{!parent.batteryDetails}"> <td colspan="2" style=" text-align: left; font-size: 80%; padding: 10px;"> Address: {properties.siteaddress} <button style="float: right;" click="{parent.showBatteryOnMap}">Map</button><br> Opening hours: {properties.openinghours} <br> <a href="{properties.forfurtherinformation}" target="_blank">More details</a> </td> </tr> </tbody> </table> </div> </div> </div>', 'detail-rubbishcollection .image,[data-is="detail-rubbishcollection"] .image{ background-size: contain !important; } detail-rubbishcollection .bin-detail,[data-is="detail-rubbishcollection"] .bin-detail{ width: 100%; } detail-rubbishcollection .detail-data,[data-is="detail-rubbishcollection"] .detail-data{ display: flex; align-items: stretch; place-items: flex-end; align-content: stretch; } detail-rubbishcollection .green-bin,[data-is="detail-rubbishcollection"] .green-bin,detail-rubbishcollection .red-bin,[data-is="detail-rubbishcollection"] .red-bin,detail-rubbishcollection .yellow-bin,[data-is="detail-rubbishcollection"] .yellow-bin{ background-repeat: no-repeat; background-position: bottom center; background-size: contain; height: 120px; flex-grow: 1; } detail-rubbishcollection .green-bin,[data-is="detail-rubbishcollection"] .green-bin{ background-image: url("/assets/publica/sets/Find_GreenBin_Off.svg"); height: 100px; } detail-rubbishcollection .green-bin.this-week-bin,[data-is="detail-rubbishcollection"] .green-bin.this-week-bin{ background-image: url("/assets/publica/sets/Find_GreenBin_On.svg"); } detail-rubbishcollection .red-bin,[data-is="detail-rubbishcollection"] .red-bin{ background-image: url("/assets/publica/sets/Find_RedBin_Off.svg"); height: 110px; } detail-rubbishcollection .red-bin.this-week-bin,[data-is="detail-rubbishcollection"] .red-bin.this-week-bin{ background-image: url("/assets/publica/sets/Find_RedBin_On.svg"); } detail-rubbishcollection .yellow-bin,[data-is="detail-rubbishcollection"] .yellow-bin{ background-image: url("/assets/publica/sets/Find_YellowBin_Off.svg"); } detail-rubbishcollection .yellow-bin.this-week-bin,[data-is="detail-rubbishcollection"] .yellow-bin.this-week-bin{ background-image: url("/assets/publica/sets/Find_YellowBin_On.svg"); }', '', function (opts) {
  var _this100 = this;

  var self = this;
  this.alertText = "Try to favourite your collection days<br> to see it on the home page";
  this.locationSearch = false;
  this.collectionTimes = [];
  this.locationName = app.location.current.titleLong;
  this.locationPoint = Object.assign({}, app.location.current.point);
  this.lastAjax = false;
  this.locationAuto = false;
  this.autoUpdate = true;
  this.autoUpdaterDistanceBuffer = 100;
  this.isEditing = false;
  this.colors = {
    "refuse": "red",
    "organic": "green",
    "recycling": "yellow"
  };
  this.days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
  this.batteryDetails = false;
  this.batteryFeature = "batterycollection";
  this.bingame = [{
    image: "/apps/bingood/assets/intro-lockup.png",
    title: "Bin Game",
    text: "Bin Game",
    color: "#1f2734",
    href: "https://smartview.ccc.govt.nz/apps/bingood/"
  }, {
    image: "/apps/bingood/assets/binapp.png",
    title: "Bin App",
    text: "Bin App",
    color: "#469491",
    href: "https://ccc.govt.nz/services/rubbish-and-recycling/bin-app/"
  }];
  var autoOptions = {
    selector: "#rubbish-location-search",
    source: function source(t, r) {
      _maps.service(t, function (a) {
        a.forEach(function (b, i) {
          b.i = i;
        });
        _this100.autocompleteList = a;
        r(a);
      });
    },
    onSelect: function onSelect(e, t, item) {
      _this100.current = _this100.autocompleteList[item.dataset.id];
      _this100.autoUpdate = false;
      _this100.locationName = _this100.current.text;

      _this100.current.getMore(_this100.current, function (data) {
        var ret = {};
        ret.name = data.address_components[1].long_name;
        ret.obj = data;
        _this100.locationPoint = Object.assign({}, data.geometry.location);
        ret.point = Object.assign({}, data.geometry.location);
        ret.longName = [data.address_components[0].long_name, data.address_components[1].long_name].join(" ");
        getCollection(_this100.locationPoint);
      });
    },
    renderItem: function renderItem(item, search) {
      search = search.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
      var re = new RegExp("(" + search.split(' ').join('|') + ")", "gi");
      return '<div class="autocomplete-suggestion" data-id="' + item.i + '" data-val="' + item.text + '">' + item.text.replace(re, "<b>$1</b>") + '</div>';
    }
  };

  this.getFavData = function () {
    return {
      page: "play",
      detail: "rubbishcollection",
      data: [{
        title: this.getDay(),
        value: this.getDescription(),
        svgIcon: "Date"
      }],
      update_on: new Date(),
      expire_after: {
        when: "tomorrow"
      },
      location: this.locationPoint
    };
  };

  this.showBatteryOnMap = function (e) {
    var data = {
      clear: true,
      detail: this.batteryFeature,
      map: {
        center: e.item.geometry.coordinates
      }
    };
    route("map/layers/batterycollection", data);
  }.bind(this);

  this.showBatteryDetails = function (e) {
    this.batteryDetails = !this.batteryDetails;
  }.bind(this);

  this.stopUpdates = function (e) {
    this.isEditing = true;
  }.bind(this);

  this.startUpdates = function (e) {
    this.isEditing = false;
  }.bind(this);

  var getCollection = function getCollection(latlng, cb) {
    var url = "/app/router/rubish.php?";
    url += "lat=" + latlng.lat;
    url += "&lng=" + latlng.lng;
    if (self.lastAjax == url) return;
    self.lastAjax = url;

    _lib.ajax.$get(url, function (data) {
      self.collectionTimes = JSON.parse(data);
      self.update();
    }, cb, "rubbishping");
  };

  this.sortBatteriesByDistance = function () {
    this.detail.battery && this.detail.battery.sort(function (a, b) {
      return (a.properties.distance = google.maps.geometry.spherical.computeDistanceBetween({
        lng: function lng() {
          return a.geometry.coordinates[0];
        },
        lat: function lat() {
          return a.geometry.coordinates[1];
        }
      }, {
        lng: function lng() {
          return app.location.current.point.lng;
        },
        lat: function lat() {
          return app.location.current.point.lat;
        }
      })) - (b.properties.distance = google.maps.geometry.spherical.computeDistanceBetween({
        lng: function lng() {
          return b.geometry.coordinates[0];
        },
        lat: function lat() {
          return b.geometry.coordinates[1];
        }
      }, {
        lng: function lng() {
          return app.location.current.point.lng;
        },
        lat: function lat() {
          return app.location.current.point.lat;
        }
      }));
    });
  };

  this.doSearch = function (state) {
    this.locationSearch = state;

    if (!this.locationAuto) {
      this.locationAuto = new autoComplete(autoOptions);
    }
  };

  this.showSearch = function (e) {
    this.doSearch(true);
  }.bind(this);

  this.toggleSearch = function (e) {
    this.doSearch(!this.locationSearch);
  }.bind(this);

  var appUpdater = function appUpdater() {
    if (self.autoUpdate && !this.isEditing) {
      self.locationName = app.location.current.titleLong;

      if (_maps.distance(self.locationPoint.lat, self.locationPoint.lng, app.location.current.point.lat, app.location.current.point.lng) > self.autoUpdaterDistanceBuffer) {
        self.locationPoint = Object.assign({}, app.location.current.point);
        getCollection(self.locationPoint);
      }
    }
  };

  this.on("mount", function () {
    console.log(_this100);
    app.on("geolocation/changed", appUpdater);
    app.on("geolocation/found", appUpdater);
    app.tags.main.refs.page.refs.detail.update({
      loading: true
    });
    getCollection(_this100.locationPoint, function () {
      return app.tags.main.refs.page.refs.detail.update({
        loading: false
      });
    });
    _this100.module = app.modules.get("rubbishcollection");
  });
  this.on("unmount", function () {
    app.off("geolocation/changed", appUpdater);
    app.off("geolocation/found", appUpdater);
  });

  this.isGreen = function () {
    var x = this.collectionTimes.filter(function (a) {
      return a.frequency != "Not Collected";
    }).filter(function (a) {
      return a.type == "organic";
    }).pop();
    return x ? x.days < 7 : false;
  };

  this.isRed = function () {
    var x = this.collectionTimes.filter(function (a) {
      return a.frequency != "Not Collected";
    }).filter(function (a) {
      return a.type == "refuse";
    }).pop();
    return x ? x.days < 7 : false;
  };

  this.isYellow = function () {
    var x = this.collectionTimes.filter(function (a) {
      return a.frequency != "Not Collected";
    }).filter(function (a) {
      return a.type == "recycling";
    }).pop();
    return x ? x.days < 7 : false;
  };

  this.getDescription = function () {
    var c = [];
    if (this.isGreen()) c.push("Green");
    if (this.isRed()) c.push("Red");
    if (this.isYellow()) c.push("Yellow");
    c = c.join(" & ");
    return c;
  };

  this.getDay = function () {
    if (this.collectionTimes.length > 0 && this.getDescription() > "") return this.collectionTimes.filter(function (a) {
      return a.frequency != "Not Collected";
    }).sort(function (a, b) {
      return a.days - b.days;
    })[0].text.split("<br>")[0];else return "Not Available";
  };

  this.getExtra = function () {
    if (this.collectionTimes.length > 0) {
      if (this.collectionTimes.filter(function (a) {
        return a.oid == "RefuseCollection.47";
      }).length > 0) {
        return "The Council offers a rubbish and a recycling collection service for residents and businesses in the inner city. Properties in the inner city do not pay for rubbish and recycling collection through their rates. Instead, they buy Council rubbish and recycling bags to use the collection service.";
      } else if (this.collectionTimes.filter(function (a) {
        return a.description == "Depot";
      }).length > 0) {
        return "Banks Peninsula residents who do not live on a wheelie bin collection route can use the community collection points for household rubbish and recycling.";
      }
    } else return false;
  };

  this.on("update", function () {
    if (app.pages[app.page] && app.pages[app.page].nodes) {
      _this100.pulse = app.pages[app.page].nodes.filter(function (a) {
        return a.name == _this100.module;
      }).pop();
    }

    _this100.detail = _this100.parent ? _this100.parent.detail : _this100.opts.dataDetail;

    if (_this100.module) {
      _this100.module.location = Object.assign({}, _this100.locationPoint);
      _this100.module.locationName = _this100.locationName;
    }

    _this100.collectionTimes.forEach(function (a) {
      if (a.frequency == "Not Collected") {
        a.text = "Not Collected";
        a.days = "";
      } else {
        a.toweek = a.week == Number(moment().week() % 2 + 1) ? 1 : 2;

        if (a.frequency == "Weekly") {
          a.toweek = 1;
        } else {
          if (a.type == "refuse") {
            a.toweek = a.toweek % 2 + 1;
          }
        }

        if (a.toweek == 1) {
          if (a.day < moment().day()) {
            a.days = (a.frequency == "Weekly" ? 7 : 14) + a.day - moment().day();
          } else {
            a.days = a.day - moment().day();
          }
        } else {
          a.days = 7 + a.day - moment().day();
        }

        a.days = a.days;
        var tt = a.days < 7 ? "this" : "next";

        if (a.days + moment().day() < 7) {
          tt = "this";
          a.text = _this100.days[a.day] + " " + tt + " week <br>";
        } else if (a.days + moment().day() < 14) {
          tt = "next";
          a.text = _this100.days[a.day] + " " + tt + " week <br>";
        } else {
          tt = "";
          a.text = _this100.days[a.day] + " in 2 weeks <br>";
          ;
        }

        if (a.days > 0) {
          a.text += " (in " + a.days + " days)";
        } else {
          a.text += " (today)";
        }
      }
    });

    _this100.collectionTimes.sort(function (a, b) {
      return a.days - b.days;
    });

    _this100.sortBatteriesByDistance();

    app.alert.set({
      title: "Bin collection notifications",
      msg: " ",
      collapsed: true
    });
  });
});
riot.tag2('detail-streetart', '<virtual if="{detail}"> <header> <h3 class="f-h2 f-black">{detail.artist}</h3> <img class="image-100" riot-src="{detail.image}"> </header> <div if="{detail.title||detail.description}" class="long-description"> <strong if="{detail.title}">{detail.title}</strong> <raw if="{detail.description}" content="{detail.description.replace(/\\n/g, ⁗<br>⁗)}"></raw> </div> <table class="{table-block:detail.options&&detail.options.vertical}" if="{detail.list}"> <tr each="{item in detail.list}" hide="{item.hide||item.hideMain}" class="{item.class}"> <td if="{!item.data.image}" nostyle="{(item.data&&item.data.style)?item.data.style:\'\'}"> <span>{item.label}</span> </td> <td colspan="{item.data.image?2:1}" riot-style="{(item.data&&item.data.style)?item.data.style:\'\'}"> <img if="{item.data.image}" riot-src="{item.label}"> <p each="{row in item.values}"> <raw content="{row}"></raw> </p> <p if="{item.data.link}" class="right"><a href="{item.data.link}" target="ccc">more...</a></p> <p if="{item.data.date}" class="left">{item.data.date}</p> </td> </tr> </table> <div class="link"> <a class="button f-p4" href="{detail.link}" target="ccc"> <img height="40" src="https://watchthisspace.org.nz/static/img/wts-logo-white.png"> </a> <a class="button f-p4" href="https://watchthisspace.org.nz/artwork/new/" target="ccc"> Contribute </a> </div> <button class="detail-button f-p4" click="{showMapLayer}" if="{detail.options&&detail.options.map_layer&&!detail.options.map_feature}">Map view</button> <button class="detail-button f-p4" click="{showMapFeature}" if="{detail.options&&detail.options.map_feature}">Map view</button> <button class="detail-button f-p4 journey" click="{showJourneyPlanner}" if="{detail.options&&detail.options.map_feature}">{app.conf.buttons.journeyPlanner||⁗Journey planner⁗}</button> </virtual>', '', '', function (opts) {
  var _this101 = this;

  this.on("mount", function () {
    return _this101.update();
  });
  this.on("update", function () {
    this.detail = this.parent ? this.parent.detail : this.opts.dataDetail;
    if (this.detail && this.detail[0] && this.detail[0].icon2) this.detail[0].image = "/assets/svg/" + this.detail[0].icon2 + "-black.svg";
    console.log("Detail", this);
  });

  this.showMapLayer = function (e) {
    var data = {
      detail: this.detail.options.map_layer,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    route("map/layers/streetart", data);
  }.bind(this);

  this.showMapFeature = function (e) {
    var data = {
      feature: this.detail.options.map_feature,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    if (this.detail.options.map_layer) {
      data.detail = this.detail.options.map_layer;
    }

    route("map/layers/streetart", data);
  }.bind(this);

  this.showJourneyPlanner = function (e) {
    var data = {
      feature: this.detail.options.map_feature,
      title: this.detail.value,
      location: _maps.getCenter(_maps.GeoJSON(this.detail.options.map_feature.geometry, {}, true)).toJSON()
    };
    route("journey", data);
  }.bind(this);

  this.mainFilterGo = function (e) {
    this.detail.list.forEach(function (b) {
      b.hideMain = !(e.target.value == "All" || e.target.value == b.label);
    });
  }.bind(this);

  this.doFilter = function (e) {
    e.item.checked = e.target.checked;

    if (e.item.checked) {
      this.detail.filterPanel.filter(function (a) {
        return a != e.item && (!a.options.radio || a.options.radio == e.item.options.radio);
      }).forEach(function (a) {
        a.checked = false;
      });
    }

    if (e.item.options.type == "value") {
      this.detail.list.forEach(function (b) {
        b.hide = false;
      });
      this.detail.filterPanel.filter(function (a) {
        return a.checked;
      }).forEach(function (a) {
        this.detail.list.forEach(function (b) {
          if (b.values.every(function (c) {
            return c != a.value;
          })) {
            b.hide = true;
          }
        });
      }.bind(this));
    }
  }.bind(this);
});
riot.tag2('detail-sunset', '<div class="wrapper" if="{detail}"> <div ref="list" class="detailsection" if="{detail.list}"> <div each="{item in detail.list}" hide="{item.hide||item.hideMain}" class="{item.class}"> <content-box params="{toParam(item)}" fav="{getFavData(item)}"></content-box> </div> </div> </div>', 'detail-sunset .detailsection,[data-is="detail-sunset"] .detailsection{ width: 100%; } detail-sunset .filter,[data-is="detail-sunset"] .filter{ width: 100%; } detail-sunset select:first-child,[data-is="detail-sunset"] select:first-child{ margin-right: 10px; } detail-sunset .flex,[data-is="detail-sunset"] .flex{ flex-flow: row; }', '', function (opts) {
  var _this102 = this;

  this.showDesc = false;

  this.getFavData = function (item) {
    return {
      page: "environment",
      detail: "sunset",
      data: [{
        title: "Sunrise",
        value: "".concat(item.data.sunrise),
        svgIcon: "Sunrise"
      }, {
        title: "Sunset",
        value: "".concat(item.data.sunset),
        svgIcon: "Sunset"
      }],
      update_on: new Date(),
      expire_after: {
        when: "tomorrow"
      }
    };
  };

  this.anyVisible = function () {
    return !_this102.detail.list.every(function (a) {
      return a.hide;
    });
  };

  this.toParam = function (item) {
    return {
      label: item.label,
      sub: item.values[0],
      details: [{
        label: "Sunrise",
        value: item.data.sunrise,
        image: "/assets/publica/sets/Environment_Sunrise.svg"
      }, {
        label: "Sunset",
        value: item.data.sunset,
        image: "/assets/publica/sets/Environment_Sunset.svg"
      }]
    };
  };

  this.on("mount", function () {
    return _this102.update();
  });
  this.on("update", function () {
    this.detail = this.parent ? this.parent.detail : this.opts.dataDetail;
    if (this.detail && this.detail[0] && this.detail[0].icon2) this.detail[0].image = "/assets/svg/" + this.detail[0].icon2 + "-black.svg";

    if (this.detail.desc) {
      this.detail.desc = this.detail.desc.trim();
      var x = this.detail.desc.split(".");

      if (x.length > 0 && x[0].length < 30) {
        this.detail.descHeader = x.shift();
      }

      this.detail.desc = x.join(".");
    }

    console.log("Detail", this);
  });

  this.showDetail = function (e) {
    console.log(e);

    if (e.item.item.showSubDetail) {
      e.item.item.showSubDetail = false;
    } else {
      e.item.item.showSubDetail = true;
    }
  }.bind(this);

  this.showDescGo = function (e) {
    var _this103 = this;

    if (!this.showDesc) {
      this.showDesc = true;
      setTimeout(function () {
        return window.addEventListener("click", _this103.hideDescGo);
      });
    }
  }.bind(this);

  this.hideDescGo = function (e) {
    if (this.showDesc) {
      this.showDesc = false;
      window.removeEventListener("click", this.hideDescGo);
      this.update();
    }
  }.bind(this);

  this.showMapLayer = function (e) {
    var data = {
      detail: this.detail.options.map_layer,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    route("map", data);
  }.bind(this);

  this.showMapFeature = function (e) {
    var data = {
      feature: this.detail.options.map_feature,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    if (this.detail.options.map_layer) {
      data.detail = this.detail.options.map_layer;
    }

    route("map", data);
  }.bind(this);

  this.showJourneyPlanner = function (e) {
    var _this104 = this;

    app.promise.google().then(function () {
      var data = {
        feature: _this104.detail.options.map_feature,
        title: _this104.detail.value,
        location: _maps.getCenter(_maps.GeoJSON(_this104.detail.options.map_feature.geometry, {}, true)).toJSON()
      };
      route("journey", data);
    });
  }.bind(this);

  this.mainFilterGo = function (e) {
    this.detail.list.forEach(function (b) {
      b.hideMain = !(e.target.value == "All" || e.target.value == b.label);
    });
  }.bind(this);

  this.doFilter = function (e) {
    e.item.checked = e.target.checked;

    if (e.item.checked) {
      this.detail.filterPanel.filter(function (a) {
        return a != e.item && (!a.options.radio || a.options.radio == e.item.options.radio);
      }).forEach(function (a) {
        a.checked = false;
      });
    }

    if (e.item.options.type == "value") {
      this.detail.list.forEach(function (b) {
        b.hide = false;
      });
      this.detail.filterPanel.filter(function (a) {
        return a.checked;
      }).forEach(function (a) {
        this.detail.list.forEach(function (b) {
          if (b.values.every(function (c) {
            return c != a.value;
          })) {
            b.hide = true;
          }
        });
      }.bind(this));
    }
  }.bind(this);
});
riot.tag2('detail-tides', '<div class="wrapper" if="{detail}"> <div ref="list" class="detailsection" if="{detail.list}"> <div each="{item in detail.list}" hide="{item.hide||item.hideMain}" class="{item.class}"> <div class="detail-flex detail-section detail-header-table margin-top {bottom-corners:!item.showSubDetail}"> <div> <div>{item.label}</div> <span> {item.values[0]<1?\'Low tide\':\'High tide\'} ({item.values[0]}) at {item.values[1] || ⁗N/A⁗}</span> </div> <div class="buttons"> <fav-button if="{item.label==\'Today\'}" book="{getFavData(item)}"></fav-button> <button class="{active:item.showSubDetail}" click="{showDetail}">About</button> </div> </div> <div if="{item.showSubDetail}" class="detail-section detail-data detail-flex flex-left"> <div each="{subitem in item.data.list}" riot-style="background-image:url(\'/assets/publica/sets/Environment_{subitem.height<=1?\'Low\':\'High\'}Tide.svg\')" class="detail-name-val icon"> <strong>{subitem.height<1?\'Low\':\'High\'} {subitem.height}</strong> <span>{subitem.time ||                                 ⁗N/A⁗}</span> </div> </div> </div> </div> </div>', 'detail-tides .detailsection,[data-is="detail-tides"] .detailsection{ width: 100%; } detail-tides .filter,[data-is="detail-tides"] .filter{ width: 100%; } detail-tides select:first-child,[data-is="detail-tides"] select:first-child{ margin-right: 10px; } detail-tides .flex,[data-is="detail-tides"] .flex{ flex-flow: row; }', '', function (opts) {
  var _this105 = this;

  this.showDesc = false;

  this.getFavData = function (item) {
    return {
      page: "environment",
      detail: "tides",
      data: item.data.list.reduce(function (r, a) {
        r.push({
          title: (a.height < 1 ? 'Low' : 'High') + " " + subitem.height,
          value: "".concat(a.time),
          svgIcon: subitem.height <= 1 ? 'LowTide' : 'HighTide'
        });
        return r;
      }, []),
      update_on: new Date(),
      expire_after: {
        when: "tomorrow"
      }
    };
  };

  this.anyVisible = function () {
    return !_this105.detail.list.every(function (a) {
      return a.hide;
    });
  };

  this.on("mount", function () {
    return _this105.update();
  });
  this.on("update", function () {
    this.detail = this.parent ? this.parent.detail : this.opts.dataDetail;
    if (this.detail && this.detail[0] && this.detail[0].icon2) this.detail[0].image = "/assets/svg/" + this.detail[0].icon2 + "-black.svg";

    if (this.detail.desc) {
      this.detail.desc = this.detail.desc.trim();
      var x = this.detail.desc.split(".");

      if (x.length > 0 && x[0].length < 30) {
        this.detail.descHeader = x.shift();
      }

      this.detail.desc = x.join(".");
    }

    console.log("Detail", this);
  });

  this.showDetail = function (e) {
    console.log(e);

    if (e.item.item.showSubDetail) {
      e.item.item.showSubDetail = false;
    } else {
      e.item.item.showSubDetail = true;
    }
  }.bind(this);

  this.showDescGo = function (e) {
    var _this106 = this;

    if (!this.showDesc) {
      this.showDesc = true;
      setTimeout(function () {
        return window.addEventListener("click", _this106.hideDescGo);
      });
    }
  }.bind(this);

  this.hideDescGo = function (e) {
    if (this.showDesc) {
      this.showDesc = false;
      window.removeEventListener("click", this.hideDescGo);
      this.update();
    }
  }.bind(this);

  this.showMapLayer = function (e) {
    var data = {
      detail: this.detail.options.map_layer,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    route("map", data);
  }.bind(this);

  this.showMapFeature = function (e) {
    var data = {
      feature: this.detail.options.map_feature,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    if (this.detail.options.map_layer) {
      data.detail = this.detail.options.map_layer;
    }

    route("map", data);
  }.bind(this);

  this.showJourneyPlanner = function (e) {
    var _this107 = this;

    app.promise.google().then(function () {
      var data = {
        feature: _this107.detail.options.map_feature,
        title: _this107.detail.value,
        location: _maps.getCenter(_maps.GeoJSON(_this107.detail.options.map_feature.geometry, {}, true)).toJSON()
      };
      route("journey", data);
    });
  }.bind(this);

  this.mainFilterGo = function (e) {
    this.detail.list.forEach(function (b) {
      b.hideMain = !(e.target.value == "All" || e.target.value == b.label);
    });
  }.bind(this);

  this.doFilter = function (e) {
    e.item.checked = e.target.checked;

    if (e.item.checked) {
      this.detail.filterPanel.filter(function (a) {
        return a != e.item && (!a.options.radio || a.options.radio == e.item.options.radio);
      }).forEach(function (a) {
        a.checked = false;
      });
    }

    if (e.item.options.type == "value") {
      this.detail.list.forEach(function (b) {
        b.hide = false;
      });
      this.detail.filterPanel.filter(function (a) {
        return a.checked;
      }).forEach(function (a) {
        this.detail.list.forEach(function (b) {
          if (b.values.every(function (c) {
            return c != a.value;
          })) {
            b.hide = true;
          }
        });
      }.bind(this));
    }
  }.bind(this);
});
riot.tag2('detail-uv', '<virtual if="{detail}"> <div class="detailsection"> <div class="detail-flex detail-section detail-header-table margin-top "> <div> <div>Today\'s UV Index</div> <span>{this.detail.value}</span> </div> <div class="buttons"> <fav-button book="{getFavData()}"></fav-button> </div> </div> <div class="detail-section detail-data detail-flex"> <canvas-dial heading="UV Index" text="{this.detail.value}" current="{this.detail.uv}" labels="{labels}" max="{13}" limits="{limits}"></canvas-dial> </div> <detail-item-news if="{this.detail.relatedNews}" data-item="{this.detail.relatedNews}"></detail-item-news> </div> <div class="detail-section controls noTopMargin"> <form class="filter"> <fieldset> <legend>you may also be interested in</legend> </fieldset> </form> </div> <pulse-box each="{detail.nodes}"></pulse-box> </virtual>', 'detail-uv detail-item-news,[data-is="detail-uv"] detail-item-news{ margin-top: 10px; }', 'class="pulse-page"', function (opts) {
  var _this108 = this;

  var self = this;
  var graybg = "#e6e7e8";
  var lowbg = "#cadb44";
  var highbg = "#ffd94f";
  var extremebg = "#e11156";
  this.max = 13;
  this.limits = {
    low: [0, 3],
    high: [3, 6],
    veryhigh: [6, 8],
    lowextreme: [8, 11],
    extreme: [11, this.max]
  };
  this.labels = [[0, "0"], [3, "3"], [6, "6"], [8, "8"], [11, "11"], [13, "+"]];
  this.showDesc = false;
  this.loaded = false;
  var arrowImg = new Image();
  arrowImg.src = "/assets/publica/sets/Environment_Pin_Scale.svg";

  this.getFavData = function () {
    return {
      page: "environment",
      detail: "uvindex",
      data: [{
        title: "today's uv index",
        value: "".concat(this.detail.value),
        svgIcon: "Temperature"
      }],
      update_on: new Date(),
      expire_after: {
        val: 1,
        dim: "hours"
      }
    };
  };

  this.on("mount", function () {
    _this108.update();
  });
  this.on("unmount", function () {});
  this.on("update", function () {
    this.detail = this.parent ? this.parent.detail : this.opts.dataDetail;
    if (this.detail && this.detail[0] && this.detail[0].icon2) this.detail[0].image = "/assets/svg/" + this.detail[0].icon2 + "-black.svg";
  });
});
riot.tag2('detail-wateroutlook', '<virtual if="{detail}"> <div class="detailsection"> <div class="detail-flex detail-section detail-header-table margin-top "> <div> <div>Water consumption</div> </div> <div class="buttons"> <fav-button book="{getFavData()}"></fav-button> </div> </div> <div class="detail-section detail-data detail-flex"> <canvas-dial heading="Litres used" text="#|1000" current="{this.detail.consumption}" labels="{labels}" max="{260000}" limits="{limits}"></canvas-dial> <div id="wateroutlookgraph"></div> </div> <detail-item-news if="{this.detail.relatedNews}" data-item="{this.detail.relatedNews}"></detail-item-news> </div> <div class="detail-section controls noTopMargin"> <form class="filter"> <fieldset> <legend>you may also be interested in</legend> </fieldset> </form> </div> <pulse-box each="{detail.nodes}"></pulse-box> </virtual>', 'detail-wateroutlook detail-item-news,[data-is="detail-wateroutlook"] detail-item-news{ margin-top: 10px; }', 'class="pulse-page"', function (opts) {
  var _this109 = this;

  var self = this;
  var graybg = "#e6e7e8";
  var lowbg = "#cadb44";
  var highbg = "#ffd94f";
  var extremebg = "#e11156";
  this.max = 260000;
  this.limits = {
    low: [0, 140000],
    high: [140000, 200000],
    extreme: [200000, this.max]
  };
  this.labels = [[0, "0M"], [140000, "140M"], [200000, "200M"], [260000, "260M"]];
  this.showDesc = false;
  this.loaded = false;
  this.graphFilter = "year";
  var arrowImg = new Image();
  arrowImg.src = "/assets/publica/sets/Environment_Pin_Scale.svg";

  this.getFavData = function () {
    return {
      page: "environment",
      detail: "wateroutlook",
      data: [{
        title: "Litres yesterday",
        value: (this.detail.consumption * 1000).toLocaleString(),
        svgIcon: "HighTide"
      }],
      update_on: new Date(),
      expire_after: {
        when: "tomorrow"
      }
    };
  };

  this.on("mount", function () {
    app.alert.set({
      "title": "What does each zone mean?",
      collapsed: true,
      "msg": " <p class='margin-bottom'>\n                    <strong class=\"bold\" style=\"padding-left: 5px;border-left: 10px solid ".concat(lowbg, "\">Green zone (0\n                        to 140 million litres):</strong> We all need to work together to make sure our water use stays within the green zone. This zone represents an average day's water use. Lower water use means we can take more wells\n                    out of service, upgrade well heads faster and then stop chlorinating the water sooner.\n                </p>\n                <p class='margin-bottom'>\n                    <strong class=\"bold\" style=\"padding-left: 5px;border-left: 10px solid ").concat(highbg, "\">Yellow zone\n                        (140 to 200 million litres):</strong> If our water use gets into the yellow zone this could affect our ability to upgrade well heads. We can only upgrade well heads when water use is low and they\u2019re not being\n                    used.\n                </p>\n                <p class='margin-bottom'>\n                    <strong class=\"bold\" style=\"padding-left: 5px;border-left: 10px solid ").concat(extremebg, "\">Red zone\n                        (over 200 million litres):</strong> If our water use stays in this zone for a number of days we may need to impose water restrictions. It's not that we\u2019re going to run out of water, it's that when demand for\n                    water is high we can only supply so much through the network. The pumps, pipes and reservoirs can only deliver a certain amount of water at any one time. If people use too much there could be a pressure loss in the system, shortages\n                    or not enough to fight fires.\n                </p>")
    });

    _this109.update();
  });
  this.on("unmount", function () {});
  this.on("update", function () {
    this.detail = this.parent ? this.parent.detail : this.opts.dataDetail;
    if (this.detail && this.detail[0] && this.detail[0].icon2) this.detail[0].image = "/assets/svg/" + this.detail[0].icon2 + "-black.svg";
    this.on("updated", function () {
      if (this.loaded) return;
      this.loaded = true;
      var width = parseInt(getComputedStyle(document.querySelector(".detail-wateroutlook")).width) - 40;
      var plotDiv = document.getElementById("wateroutlookgraph");
      self.detail.history.mode = 'lines';
      self.detail.history.line = {
        color: "#cadb44",
        width: 1
      };
      self.detail.history.connectgaps = false;
      Plotly.plot("wateroutlookgraph", [self.detail.history], {
        margin: {
          t: 0,
          b: 30,
          l: 40,
          r: 0
        },
        width: width,
        height: 200,
        autosize: true,
        paper_bgcolor: "#fff",
        plot_bgcolor: "transparent",
        xaxis: {
          rangeselector: {
            visible: true,
            buttons: [{
              step: "day",
              count: 365,
              label: "year"
            }, {
              step: "day",
              count: 30,
              label: "30 days"
            }, {
              step: "day",
              count: 7,
              label: "7 days"
            }]
          }
        },
        yaxis: {},
        annotations: [{
          text: 'filter:',
          xref: "paper",
          yref: "paper",
          x: 0,
          y: 1,
          showarrow: false,
          xanchor: "left",
          yanchor: "top",
          xshift: -37,
          yshift: 23
        }]
      }, {
        scrollZoom: false,
        staticPlot: true,
        responsive: true,
        width: width,
        displayModeBar: false
      });
      document.querySelector(".rangeselector").setAttribute("transform", "translate(60,0)");
      plotDiv.on("plotly_relayout", function (e) {
        document.querySelector(".rangeselector").setAttribute("transform", "translate(60,0)");
        if (e.yaxis) return;
        window.plotDiv = plotDiv;
        var xmin = new Date(e["xaxis.range[0]"]);
        var xmax = new Date(e["xaxis.range[1]"]);
        var min = 9999999999,
            max = self.detail.history.y[0];

        for (var i = 0; i < self.detail.history.x.length; i++) {
          var c = new Date(self.detail.history.x[i]);

          if (c >= xmin && c <= xmax && self.detail.history.y[i] != null) {
            min = Math.min(self.detail.history.y[i], min);
            max = Math.max(max, self.detail.history.y[i]);
          }
        }

        var dif = max - min;
        min -= dif / 10;
        max += dif / 10;
        Plotly.relayout(plotDiv, {
          yaxis: {
            range: [min, max]
          }
        });
      });
    });
  });

  this.showDescGo = function (e) {
    var _this110 = this;

    if (!this.showDesc) {
      this.showDesc = true;
      setTimeout(function () {
        return window.addEventListener("click", _this110.hideDescGo);
      });
    }
  }.bind(this);

  this.hideDescGo = function (e) {
    if (this.showDesc) {
      this.showDesc = false;
      window.removeEventListener("click", this.hideDescGo);
      this.update();
    }
  }.bind(this);

  this.showDetail = function (e) {
    app.trigger("detail/click/" + this.parent.module, e.item);
  }.bind(this);
});
riot.tag2('detail-waterquality', '<virtual if="{detail}"> <pulse-box each="{detail.nodes}"></pulse-box> <div class="detailsection"> <virtual each="{list,name in detail.catchments}"> <div class="detail-flex detail-section detail-header-table margin-top "> <div> <div>{name}</div> </div> <div class="buttons"> <button class="location" click="{showSites}">Sites</button> </div> </div> <div class="detail-section detail-data detail-flex flex-left" ref="graph"> <graph graph-data="{getCatchmentGraphData(list)}"></graph> </div> <div class="detail-section detail-data detail-flex flex-left"> <table class="values"> <tr> <th each="{vals,year in list.years}">{year}</th> </tr> <tr> <td each="{vals,year in list.years}" riot-style="background-color:{indexColor(Math.round(vals.sum/vals.count))}"> {Math.round(vals.sum/vals.count)}</td> </tr> </table> </div> <div if="{list.showSites}" class="detail-section detail-data detail-flex flex-left"> <table style="margin-top:20px;width:100%" class="items {table-block:detail.options&&detail.options.vertical}" if="{detail.index}"> <tr> <th>Site</th> <th>Index</th> <th>&nbsp;</th> </tr> <tbody each="{item,name in list.sites}"> <tr> <td>{name}</td> <td riot-style="padding-left: 3px;background-color:{indexColor(item[item.length-1].index)}"> {item[item.length-1].category}</td> <td style="padding-left: 3px"> <div class="buttons"><button class="location" click="{showSiteData}">More</button> </div> </td> </tr> <tr if="{item.showDetail}"> <td colspan="3"> <table class="values"> <tr> <th each="{vals in item}">{vals.year}</th> </tr> <tr> <td each="{vals in item}" riot-style="background-color:{indexColor(vals.index)}"> {vals.index}</td> </tr> </table> <graph graph-data="{getSiteGraphData(item)}"></graph> </td> </tr> </tbody> </table> </div> </virtual> </div> </virtual>', 'detail-waterquality .values td,[data-is="detail-waterquality"] .values td,detail-waterquality .values th,[data-is="detail-waterquality"] .values th{ text-align: center; } detail-waterquality p,[data-is="detail-waterquality"] p{ flex-basis: 100%; } detail-waterquality .items,[data-is="detail-waterquality"] .items{ table-layout: auto; } detail-waterquality .items .buttons,[data-is="detail-waterquality"] .items .buttons{ margin-left: 0; }', 'class="pulse-page"', function (opts) {
  var _this111 = this;

  var self = this;
  var width = 0;
  var graphShapes = [{
    layer: 'below',
    xref: 'paper',
    yref: 'paper',
    x0: 0,
    x1: 1,
    y0: 0,
    y1: 0.4,
    type: 'rect',
    fillcolor: 'rgba(200, 82, 0, 0.2)',
    line: {
      width: 0
    }
  }, {
    layer: 'below',
    xref: 'paper',
    yref: 'paper',
    x0: 0,
    x1: 1,
    y0: 0.4,
    y1: 0.7,
    type: 'rect',
    fillcolor: 'rgba(252, 125, 11, 0.2)',
    line: {
      width: 0
    }
  }, {
    layer: 'below',
    xref: 'paper',
    yref: 'paper',
    x0: 0,
    x1: 1,
    y0: 0.7,
    y1: 0.8,
    type: 'rect',
    fillcolor: 'rgba(123, 132, 143, 0.2)',
    line: {
      width: 0
    }
  }, {
    layer: 'below',
    xref: 'paper',
    yref: 'paper',
    x0: 0,
    x1: 1,
    y0: 0.8,
    y1: 0.9,
    type: 'rect',
    fillcolor: 'rgba(95, 162, 206, 0.2)',
    line: {
      width: 0
    }
  }, {
    layer: 'below',
    xref: 'paper',
    yref: 'paper',
    x0: 0,
    x1: 1,
    y0: 0.9,
    y1: 1,
    type: 'rect',
    fillcolor: 'rgba(17, 112, 170, 0.2)',
    line: {
      width: 0
    }
  }];
  this.on("mount", function () {
    _this111.detail = _this111.parent ? _this111.parent.detail : _this111.opts.dataDetail;

    _this111.update();
  });

  this.showSiteData = function (e) {
    e.item.item.showDetail = e.item.item.showDetail ? false : true;
  }.bind(this);

  this.showSites = function (e) {
    e.item.list.showSites = e.item.list.showSites ? false : true;
  }.bind(this);

  this.indexColor = function (val) {
    if (val < 40) return "rgba(200, 82, 0, 0.5)";else if (val < 70) return "rgba(252, 125, 11, 0.5)";else if (val < 80) return "rgba(123, 132, 143, 0.5)";else if (val < 90) return "rgba(95, 162, 206, 0.5)";else return "rgba(17, 112, 170, 0.5)";
  };

  this.getCatchmentGraphData = function (catchment) {
    if (!width) {
      width = parseInt(getComputedStyle(this.parent.root).width) - 20;
    }

    return {
      ret: Object.keys(catchment.years).reduce(function (r, a) {
        var year = catchment.years[a];
        r.x.push(a);
        r.y.push(year.sum / year.count);
        return r;
      }, {
        x: [],
        y: []
      }),
      width: width,
      yaxis: {
        range: [0, 100]
      },
      shapes: graphShapes
    };
  };

  this.getSiteGraphData = function (item) {
    if (!width) {
      width = parseInt(getComputedStyle(this.parent.root).width) - 20;
    }

    return {
      ret: item.reduce(function (r, a) {
        r.x.push(a.year);
        r.y.push(a.index);
        return r;
      }, {
        x: [],
        y: []
      }),
      width: width,
      yaxis: {
        range: [0, 100]
      },
      shapes: graphShapes
    };
  };

  this.on("update", function () {
    if (this.detail && this.detail[0] && this.detail[0].icon2) this.detail[0].image = "/assets/svg/" + this.detail[0].icon2 + "-black.svg";
    if (!this.detail.catchments) this.detail.catchments = this.detail.index.reduce(function (r, a) {
      if (!r[a.catchment]) {
        r[a.catchment] = {
          sites: {},
          years: {}
        };
      }

      if (!r[a.catchment].sites[a.name]) {
        r[a.catchment].sites[a.name] = [];
      }

      if (!r[a.catchment].years[a.year]) {
        r[a.catchment].years[a.year] = {
          sum: 0,
          count: 0
        };
      }

      r[a.catchment].years[a.year].count++;
      r[a.catchment].years[a.year].sum += parseFloat(a.index);
      r[a.catchment].sites[a.name].push(a);
      return r;
    }, {});
    console.log(this.detail);
  });
});
riot.tag2('detail-weather', '<div class="wrapper" if="{detail}"> <div ref="list" class="detailsection" if="{detail.list}"> <div each="{item in detail.list}" hide="{item.hide||item.hideMain}" class="{item.class}"> <content-box params="{toParam(item)}" fav="{item.label==\'Today\' && getFavData(item)}"></content-box> </div> </div> </div>', 'detail-weather .detailsection,[data-is="detail-weather"] .detailsection{ width: 100%; } detail-weather .filter,[data-is="detail-weather"] .filter{ width: 100%; } detail-weather select:first-child,[data-is="detail-weather"] select:first-child{ margin-right: 10px; } detail-weather .flex,[data-is="detail-weather"] .flex{ flex-flow: row; }', '', function (opts) {
  var _this112 = this;

  this.showDesc = false;

  this.toParam = function (item) {
    var _data$details5;

    var data = {
      label: item.label,
      sub: item.data.summary,
      openDetails: item.label == "Today",
      details: []
    };

    if (item.label == "Today") {
      data.details.push({
        label: "currently",
        value: item.data.currently,
        unit: "&deg;C",
        svgIcon: "Temperature"
      });
    }

    (_data$details5 = data.details).push.apply(_data$details5, [{
      label: "high",
      value: item.data.max,
      unit: "&deg;C",
      svgIcon: "TemperatureHigh"
    }, {
      label: "low",
      value: item.data.min,
      unit: "&deg;C",
      svgIcon: "TemperatureLow"
    }, {
      label: "cloud cover",
      value: item.data.clouds,
      unit: "%"
    }, {
      label: "rain",
      value: item.data.rain,
      unit: "mm"
    }, {
      label: "wind",
      value: "".concat(item.data.wind.dir, " ").concat(item.data.wind.speed),
      unit: "m/s"
    }]);

    return data;
  };

  this.getFavData = function (item) {
    return {
      page: "environment",
      detail: "weather",
      data: [{
        title: "high",
        value: "".concat(item.data.max, "&deg;C"),
        svgIcon: "TemperatureHigh"
      }, {
        title: "low",
        value: "".concat(item.data.min, "&deg;C"),
        svgIcon: "Temperature"
      }, {
        title: "today",
        value: "".concat(item.data.summary),
        svgIcon: "Date"
      }],
      update_on: new Date(),
      expire_after: {
        val: 3,
        dim: "hours"
      }
    };
  };

  this.anyVisible = function () {
    return !_this112.detail.list.every(function (a) {
      return a.hide;
    });
  };

  this.on("mount", function () {
    return _this112.update();
  });
  this.on("update", function () {
    this.detail = this.parent ? this.parent.detail : this.opts.dataDetail;
    if (this.detail && this.detail[0] && this.detail[0].icon2) this.detail[0].image = "/assets/svg/" + this.detail[0].icon2 + "-black.svg";

    if (this.detail.desc) {
      this.detail.desc = this.detail.desc.trim();
      var x = this.detail.desc.split(".");

      if (x.length > 0 && x[0].length < 30) {
        this.detail.descHeader = x.shift();
      }

      this.detail.desc = x.join(".");
    }

    console.log("Detail", this);
  });

  this.showDetail = function (e) {
    console.log(e);

    if (e.item.item.showSubDetail) {
      e.item.item.showSubDetail = false;
    } else {
      e.item.item.showSubDetail = true;
    }
  }.bind(this);

  this.showDescGo = function (e) {
    var _this113 = this;

    if (!this.showDesc) {
      this.showDesc = true;
      setTimeout(function () {
        return window.addEventListener("click", _this113.hideDescGo);
      });
    }
  }.bind(this);

  this.hideDescGo = function (e) {
    if (this.showDesc) {
      this.showDesc = false;
      window.removeEventListener("click", this.hideDescGo);
      this.update();
    }
  }.bind(this);

  this.showMapLayer = function (e) {
    var data = {
      detail: this.detail.options.map_layer,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    route("map", data);
  }.bind(this);

  this.showMapFeature = function (e) {
    var data = {
      feature: this.detail.options.map_feature,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    if (this.detail.options.map_layer) {
      data.detail = this.detail.options.map_layer;
    }

    route("map", data);
  }.bind(this);

  this.showJourneyPlanner = function (e) {
    var _this114 = this;

    app.promise.google().then(function () {
      var data = {
        feature: _this114.detail.options.map_feature,
        title: _this114.detail.value,
        location: _maps.getCenter(_maps.GeoJSON(_this114.detail.options.map_feature.geometry, {}, true)).toJSON()
      };
      route("journey", data);
    });
  }.bind(this);

  this.mainFilterGo = function (e) {
    this.detail.list.forEach(function (b) {
      b.hideMain = !(e.target.value == "All" || e.target.value == b.label);
    });
  }.bind(this);

  this.doFilter = function (e) {
    e.item.checked = e.target.checked;

    if (e.item.checked) {
      this.detail.filterPanel.filter(function (a) {
        return a != e.item && (!a.options.radio || a.options.radio == e.item.options.radio);
      }).forEach(function (a) {
        a.checked = false;
      });
    }

    if (e.item.options.type == "value") {
      this.detail.list.forEach(function (b) {
        b.hide = false;
      });
      this.detail.filterPanel.filter(function (a) {
        return a.checked;
      }).forEach(function (a) {
        this.detail.list.forEach(function (b) {
          if (b.values.every(function (c) {
            return c != a.value;
          })) {
            b.hide = true;
          }
        });
      }.bind(this));
    }
  }.bind(this);
});
riot.tag2('detail-wind', '<div class="wrapper" if="{detail}"> <div ref="list" class="detailsection"> <div class="detail-flex detail-section detail-header-table margin-top {bottom-corners:!item.showSubDetail}"> <div> <div>Today\'s wind direction</div> <span>{detail.direction} - {detail.speed}m/s</span> </div> <div class="buttons"> <fav-button book="{getFavData()}"></fav-button> </div> </div> <div class="detail-section detail-data detail-flex flex-left"> <div id="compass"> <div id="pin" riot-style="transform: rotate({detail.angle-180+90}deg)"></div> <div id="winddirection"> <span>{detail.direction} - {detail.speed}m/s</span> </div> <div class="dirletter" each="{letter in directions}" riot-style="left: {letterLeft(letter)}px;top:{letterTop(letter)}px"> {letter[0]} </div> </div> </div> <detail-item-news if="{this.detail.relatedNews}" data-item="{this.detail.relatedNews}"></detail-item-news> </div> <div class="detail-section controls noTopMargin"> <form class="filter"> <fieldset> <legend>you may also be interested in</legend> </fieldset> </form> </div> <pulse-box each="{detail.nodes}"></pulse-box> </div>', 'detail-wind .dirletter,[data-is="detail-wind"] .dirletter{ position: absolute; font-size: 80% } detail-wind #winddirection,[data-is="detail-wind"] #winddirection{ position: absolute; left: 50%; transform: translateX(-50%); white-space: nowrap; text-align: center; bottom: 80px; } detail-wind #winddirection span,[data-is="detail-wind"] #winddirection span{ font-size: 80%; } detail-wind #pin,[data-is="detail-wind"] #pin{ width: 30px; height: 30px; position: absolute; top: 50%; left: 50%; margin-top: -15px; margin-left: -15px; background-image: url("/assets/publica/sets/Wind-Arrow.svg"); background-size: contain; background-position: center; } detail-wind #compass,[data-is="detail-wind"] #compass{ width: 250px; height: 250px; margin: auto; background-image: url("/assets/publica/sets/Environment_Compass.svg"); background-size: contain; background-position: center; position: relative; } detail-wind .detailsection,[data-is="detail-wind"] .detailsection{ width: 100%; } detail-wind .filter,[data-is="detail-wind"] .filter{ width: 100%; } detail-wind select:first-child,[data-is="detail-wind"] select:first-child{ margin-right: 10px; } detail-wind .flex,[data-is="detail-wind"] .flex{ flex-flow: row; }', '', function (opts) {
  var _this116 = this;

  this.directions = [['N', 93], ['NE', 135], ['E', 180], ['SE', 225], ['S', 267], ['SW', 315], ['W', 360], ['NW', 45]];
  this.showDesc = false;

  this.letterLeft = function (d) {
    var a = d[1] + 180;
    var x = Math.cos(a * Math.PI / 180) * 90 + 115;
    return x;
  };

  this.letterTop = function (d) {
    var a = d[1] + 180;
    var x = Math.sin(a * Math.PI / 180) * 90 + 115;
    return x;
  };

  this.filterDepArr = "arrival";
  this.filterIntDom = "domestic";

  this.setFilterDom = function (e) {
    this.filterIntDom = e.target.value;
  };

  this.setFilterDep = function (e) {
    this.filterDepArr = e.target.value;
  };

  this.getFavData = function () {
    return {
      page: "environment",
      detail: "wind",
      data: [{
        title: "today's wind ",
        value: "".concat(this.detail.direction - this.detail.speed, "m/s"),
        svgIcon: "Temperature"
      }],
      update_on: new Date(),
      expire_after: {
        val: 2,
        dim: "hours"
      }
    };
  };

  this.getList = function () {
    var _this115 = this;

    return this.detail.list.filter(function (a) {
      return _this115.filterDepArr == a.values[1] && _this115.filterIntDom == a.values[0];
    });
  };

  this.anyVisible = function () {
    return !_this116.detail.list.every(function (a) {
      return a.hide;
    });
  };

  this.on("mount", function () {
    return _this116.update();
  });
  this.on("update", function () {
    this.detail = this.parent ? this.parent.detail : this.opts.dataDetail;
    if (this.detail && this.detail[0] && this.detail[0].icon2) this.detail[0].image = "/assets/svg/" + this.detail[0].icon2 + "-black.svg";

    if (this.detail.desc) {
      this.detail.desc = this.detail.desc.trim();
      var x = this.detail.desc.split(".");

      if (x.length > 0 && x[0].length < 30) {
        this.detail.descHeader = x.shift();
      }

      this.detail.desc = x.join(".");
    }

    console.log("Detail", this);
  });

  this.showDetail = function (e) {
    console.log(e);

    if (e.item.item.showSubDetail) {
      e.item.item.showSubDetail = false;
    } else {
      e.item.item.showSubDetail = true;
    }
  }.bind(this);

  this.showDescGo = function (e) {
    var _this117 = this;

    if (!this.showDesc) {
      this.showDesc = true;
      setTimeout(function () {
        return window.addEventListener("click", _this117.hideDescGo);
      });
    }
  }.bind(this);

  this.hideDescGo = function (e) {
    if (this.showDesc) {
      this.showDesc = false;
      window.removeEventListener("click", this.hideDescGo);
      this.update();
    }
  }.bind(this);

  this.showMapLayer = function (e) {
    var data = {
      detail: this.detail.options.map_layer,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    route("map", data);
  }.bind(this);

  this.showMapFeature = function (e) {
    var data = {
      feature: this.detail.options.map_feature,
      clear: true
    };

    if (this.detail.options.zoom) {
      data.map = {
        zoom: this.detail.options.zoom
      };
    }

    if (this.detail.options.map_layer) {
      data.detail = this.detail.options.map_layer;
    }

    route("map", data);
  }.bind(this);

  this.showJourneyPlanner = function (e) {
    var _this118 = this;

    app.promise.google().then(function () {
      var data = {
        feature: _this118.detail.options.map_feature,
        title: _this118.detail.value,
        location: _maps.getCenter(_maps.GeoJSON(_this118.detail.options.map_feature.geometry, {}, true)).toJSON()
      };
      route("journey", data);
    });
  }.bind(this);

  this.mainFilterGo = function (e) {
    this.detail.list.forEach(function (b) {
      b.hideMain = !(e.target.value == "All" || e.target.value == b.label);
    });
  }.bind(this);

  this.doFilter = function (e) {
    e.item.checked = e.target.checked;

    if (e.item.checked) {
      this.detail.filterPanel.filter(function (a) {
        return a != e.item && (!a.options.radio || a.options.radio == e.item.options.radio);
      }).forEach(function (a) {
        a.checked = false;
      });
    }

    if (e.item.options.type == "value") {
      this.detail.list.forEach(function (b) {
        b.hide = false;
      });
      this.detail.filterPanel.filter(function (a) {
        return a.checked;
      }).forEach(function (a) {
        this.detail.list.forEach(function (b) {
          if (b.values.every(function (c) {
            return c != a.value;
          })) {
            b.hide = true;
          }
        });
      }.bind(this));
    }
  }.bind(this);
});
riot.tag2('detail-item-news', '<header if="{item}" class="article detail-section detail-header-table {bottom-corners:!item.showSubDetail} {padding50:item.data.image}"> <div class="image" if="{item.data.image}" riot-style="background-image:url(\'{item.data.image}\')"> </div> <div class="header"> <h3 class="clampMe"> <raw content="{item.label}"></raw> </h3> <div class="buttons"> <button class="{active:item.showSubDetail}" click="{showDetail}">About</button> <button if="{item.data.location}" click="{showMap}">Map</button> <a class="detail-button" href="{item.data.link}" target="_blank">{parent.detail.options.read_more_label||⁗View⁗}</a> </div> </div> </header> <div if="{item}" show="{item.showSubDetail}" style="background-color:white" class="content detail-section detail-data detail-flex"> <p> <raw content="{item.values[0]||\'No information\'}"></raw> </p> <span>{item.data.source}{item.data.source&&item.data.date?\',\':\'\'}{item.data.date}</span> </div>', 'detail-item-news p,[data-is="detail-item-news"] p{ flex-basis: 100%; } detail-item-news header,[data-is="detail-item-news"] header{ position: relative; box-sizing: border-box; } detail-item-news .header,[data-is="detail-item-news"] .header{ flex-grow: 1; flex-grow: 1; padding-left: 20px; box-sizing: border-box; } detail-item-news .padding50,[data-is="detail-item-news"] .padding50{ padding-left: 50% !important; } detail-item-news .image,[data-is="detail-item-news"] .image{ position: absolute; width: 50%; left: 0px; top: 0px; } detail-item-news .clampMe,[data-is="detail-item-news"] .clampMe{ display: -webkit-box; -webkit-line-clamp: 3; -webkit-box-orient: vertical; overflow: hidden; } detail-item-news .content,[data-is="detail-item-news"] .content{ box-sizing: border-box; } detail-item-news .content span,[data-is="detail-item-news"] .content span{ color: #888; font-size: 80%; padding-top: 10px; display: block; } detail-item-news,[data-is="detail-item-news"]{ margin-bottom: 10px; display: block; flex-basis: 100%; } detail-item-news header .image,[data-is="detail-item-news"] header .image{ align-self: center; padding: 0px; }', '', function (opts) {
  var _this119 = this;

  this.showMap = function (e) {
    var data = {
      clear: true,
      detail: this.parent.detail.options.map_layer,
      map: {
        center: e.item.item.data.location.coordinates,
        zoom: 19
      }
    };
    route("map/layers/" + data.detail, data);
  }.bind(this);

  this.gotourl = function (e) {
    window.location = this.item.data.link;
  }.bind(this);

  this.showDetail = function (e) {
    if (this.item.showSubDetail) {
      this.item.showSubDetail = false;
    } else {
      this.item.showSubDetail = true;
    }
  }.bind(this);

  this.on("mount", function () {
    if (!_this119.item && _this119.opts.dataItem) {
      _this119.item = _this119.opts.dataItem;

      _this119.update();
    }
  });
  this.on("update", function () {});
});
riot.tag2('list-webcams', '<div class="items" if="{detail}"> <webcam-item each="{detail.list}"></webcam-item> </div>', 'list-webcams.parent-filter,[data-is="list-webcams"].parent-filter{ padding: 0px; display: block; } list-webcams .items,[data-is="list-webcams"] .items{ display: flex; flex-wrap: wrap; } list-webcams .panel,[data-is="list-webcams"] .panel{ width: 100%; flex-basis: 100%; padding: 10px 0; }', '', function (opts) {
  var _this120 = this;

  var updateInterval;
  var self = this;
  this.on("unmount", function () {
    clearInterval(updateInterval);
  });

  function refresh() {
    self.detail && self.detail.list.forEach(function (a) {
      a.label = [a.label.split("?").shift(), Math.random()].join("?");
    });
    self.update();
  }

  this.on("mount", function () {
    updateInterval = setInterval(refresh, 1000 * 60 * 5);

    _this120.update();
  });
  this.on("update", function () {
    if (app.pages[app.page] && app.pages[app.page].nodes) {
      _this120.pulse = app.pages[app.page].nodes.filter(function (a) {
        return a.name == _this120.module;
      }).pop();
    }

    _this120.detail = _this120.parent ? _this120.parent.detail : _this120.opts.dataDetail;
    console.log(_this120);
  });
});
riot.tag2('webcam-item', '<div class="label"> <img class="webcampic" riot-src="{label}"> <div class="sidebuttons"> <button click="{fstoggle}" class="full-screen-button"></button> <button click="{showItemFeature}" class="location"></button> </div> </div>', 'webcam-item.full-screen,[data-is="webcam-item"].full-screen{ padding-bottom: 60px; padding-top: 0px; z-index: 99999999; } webcam-item .label,[data-is="webcam-item"] .label{ position: relative; } webcam-item .sidebuttons,[data-is="webcam-item"] .sidebuttons{ position: absolute; top: 0px; right: 0px; padding: 10px; } webcam-item .sidebuttons button,[data-is="webcam-item"] .sidebuttons button{ display: block; } webcam-item img,[data-is="webcam-item"] img{ width: 100%; display: block; } webcam-item { display: block; flex-basis: 100%; flex-shrink: 1; box-sizing: border-box; padding: 10px 0px 0px 0px; position: relative; }', 'riot-style="{style}" class="b-light {full-screen:fs}"', function (opts) {
  var _this121 = this;

  var fs = false;
  this.on("mount", function () {
    return _this121.update();
  });
  this.on("update", function () {});

  this.fstoggle = function (e) {
    this.fs = !this.fs;
  }.bind(this);

  this.showItemFeature = function (e) {
    var data = {
      clear: true,
      detail: "webcams",
      map: {
        center: JSON.parse(e.item.data.data.loc).coordinates
      }
    };
    route("map", data);
  }.bind(this);
});
riot.tag2('popup-bus', '<virtual if="{data}"> <div>Route: <b riot-style="{style}">{data.name}</b></div> <div>Destination: {data.destination}</div> <div if="{schedule.length && nextStop()}"> Next stop: {nextStop().showTime} {nextStop().platformname} </div> <loading if="{loading}"></loading> <div disabled="{loading}" class="{button:true, loading:loading}" click="{showSchedule}">{isSchedule?\'hide\':\'show\'} schedule</div> <div class="schedule-list" if="{isSchedule}"> <div each="{schedule}"> <span class="{classes}">{showTime} {platformname} ({routes})</span> </div> </div> </virtual>', '', '', function (opts) {
  var _this122 = this;

  this.isSchedule = false;
  this.loading = false;
  this.color = "black";
  this.schedule = [];
  this.style = {};
  moment.relativeTimeThreshold('ss', 10);
  moment.relativeTimeThreshold('s', 50);
  moment.relativeTimeThreshold('m', 120);
  moment.updateLocale('en', {
    relativeTime: {
      future: "in %s",
      past: "%s ago",
      s: 'a few seconds',
      ss: '%d seconds',
      m: "a min",
      mm: "%d min",
      h: "an hour",
      hh: "%d hours",
      d: "a day",
      dd: "%d days",
      M: "a month",
      MM: "%d months",
      y: "a year",
      yy: "%d years"
    }
  });
  this.on("mount", function () {
    _this122.update();
  });
  this.on("update", function () {
    if (_this122.opts && _this122.opts.dataContent) {
      if (_this122.data != _this122.opts.dataContent) {
        _this122.data = _this122.opts.dataContent;
        _this122.loading = false;
        _this122.isSchedule = false;
        _this122.schedule = [];

        _lib.ajax.$get("/app/router/bus_trip_schedule.php?trip_id=" + _this122.data.trip_id, function (data) {
          this.schedule = JSON.parse(data);
          this.update();
        }.bind(_this122));
      }
    }

    _this122.color = app.conf.bus_routes_colors.get(_this122.data.name);
    _this122.color = "rgba(" + _this122.color + ")";
    _this122.style = {
      color: _this122.color,
      display: "inline-block",
      padding: "3px",
      "border-radius": "1px",
      background: "white"
    };
    var lastPast = false;
    var moment_time;

    for (var i = 0; i < _this122.schedule.length; i++) {
      moment_time = moment(_this122.schedule[i].arrival_time, "h:m:s");
      _this122.schedule[i].classes = {
        next: moment_time.isSameOrAfter(moment()),
        highlight: lastPast && moment_time.isSameOrAfter(moment()),
        past: lastPast = moment_time.isBefore(moment())
      };
      _this122.schedule[i].showTime = moment_time.fromNow();
    }

    if (_this122.schedule.length > 0) {
      setTimeout(function () {
        return _this122.isMounted && _this122.update();
      }, 1000);
    }
  });

  this.nextStop = function () {
    return this.schedule.filter(function (a) {
      return a.classes.highlight;
    })[0];
  };

  this.showSchedule = function (e) {
    if (!this.isSchedule) {
      this.loading = true;

      _lib.ajax.$get("/app/router/bus_trip_schedule.php?trip_id=" + this.data.trip_id, function (data) {
        this.schedule = JSON.parse(data);
        this.isSchedule = true;
        this.loading = false;
        this.update();
      }.bind(this));
    } else {
      this.isSchedule = false;
      this.loading = false;
    }
  }.bind(this);
});
riot.tag2('popup-busstop', '<virtual if="{data}"> <div class="filter"> <button each="{filterButtons}" class="{active:!active}" click="{changeFilter}">{label}</button> </div> <div> <input change="{moveTab}" input="{moveTab}" type="range" style="width:100%" min="0" max="100" value="0"> </div> <div if="{loading}" class="loading"> <loading if="{loading}"></loading> </div> <div class="scrollabletab" ref="scrollabletab"> <div each="{getSchedule()}" class="schedule"> <div class="routeid">{route_id}</div> <div class="route" ref="route"> <div riot-style="background-color:{color}" each="{hour in getScheduleHours()}" class="hour"> <div each="{stopsByHour(stops, hour)}" class="stop {active:active}" click="{stopTrip}" riot-style="color:{active?color:\'black\'}"> {showTime}<sup>{showAm}</sup> </div> </div> </div> <div if="{tripSchedule}" class="tripschedule"> <div><button click="{hideSchedule}">Hide</button></div> <table class="tripschedule"> <tr> <th>Stop</th> <th>Time</th> <th>Schedule</th> <tr each="{tripSchedule}" hide="{!visible}"> <td>{platformname} <td>{filterButtons[0].active?moment_time.fromNow():moment.duration(moment_time.diff(startStop.momentTime)).humanize()} <td>{showTime}<sup>{showAm}</sup> </table> </div> </div> </div> <div class="help"> <p>{_lib.isMobile()?⁗Tap⁗:⁗Click⁗} on the time to view the trip\'s complete schedule.</p> </div> </virtual>', 'popup-busstop .help,[data-is="popup-busstop"] .help{ margin-top: 10px; font-size: 80%; } popup-busstop .help p,[data-is="popup-busstop"] .help p{ background-image: url("/assets/publica/sets/OnTheGo_Watch.svg"); background-size: contain; background-position: left center; padding-left: 16px; } popup-busstop .loading,[data-is="popup-busstop"] .loading{ position: absolute; top: 0px; bottom: 0px; left: 0px; right: 0px; background: rgba(0, 0, 0, 0.3); } popup-busstop .sk-folding-cube,[data-is="popup-busstop"] .sk-folding-cube{ top: 0px !important; } popup-busstop .filter button,[data-is="popup-busstop"] .filter button{ border: 1px solid var(--color-extra-fg); margin-right: 5px; font-size: 80%; } popup-busstop .filter button:nth-child(3),[data-is="popup-busstop"] .filter button:nth-child(3){ margin-right: calc(100% - 237px); } popup-busstop div.tripschedule,[data-is="popup-busstop"] div.tripschedule{ flex-basis: 100%; } popup-busstop div.tripschedule>div,[data-is="popup-busstop"] div.tripschedule>div{ text-align: right; } popup-busstop table.tripschedule,[data-is="popup-busstop"] table.tripschedule{ font-size: 80%; width: 100%; } popup-busstop table.tripschedule td:nth-child(3),[data-is="popup-busstop"] table.tripschedule td:nth-child(3){ text-align: right; } popup-busstop table.tripschedule th,[data-is="popup-busstop"] table.tripschedule th{ border-bottom: 1px solid #ccc; } popup-busstop table.tripschedule td,[data-is="popup-busstop"] table.tripschedule td{ border-bottom: 1px solid #eee; } popup-busstop .scrollabletab .schedule,[data-is="popup-busstop"] .scrollabletab .schedule{ display: flex; flex-wrap: wrap; } popup-busstop .scrollabletab .route,[data-is="popup-busstop"] .scrollabletab .route{ width: 100%; white-space: nowrap; overflow: hidden; flex-basis: calc(100% - 30px); } popup-busstop .scrollabletab .routeid,[data-is="popup-busstop"] .scrollabletab .routeid{ display: flex; font-weight: bold; width: 30px; flex-basis: 30px; justify-content: space-around; align-content: stretch; align-items: center; outline: 1px solid #ccc; } popup-busstop .scrollabletab .hour,[data-is="popup-busstop"] .scrollabletab .hour{ display: inline-block; background: #bee4dc; padding: 1px 5px; min-height: 10px; } popup-busstop .scrollabletab .stop,[data-is="popup-busstop"] .scrollabletab .stop{ display: inline-block; margin-right: 3px; background: rgba(255, 255, 255, 0.95); padding: 5px; cursor: default; } popup-busstop .scrollabletab .stop.active,[data-is="popup-busstop"] .scrollabletab .stop.active{ filter: invert(1); background-color: transparent; } popup-busstop sup,[data-is="popup-busstop"] sup{ font-size: 70%; }', '', function (opts) {
  var _this124 = this;

  this.isSchedule = false;
  this.loading = false;
  this.color = "black";
  this.schedule = [];
  this.style = {};
  this.filterButtons = [{
    label: "Next",
    callback: function callback(a) {
      return a.momentTime.diff(moment(), 'minutes') > -2 && a.daysA.some(function (b) {
        return b == moment().format("ddd");
      });
    },
    active: true
  }, {
    label: "Today",
    callback: function callback(a) {
      return a.daysA.some(function (b) {
        return b == moment().format("ddd");
      });
    }
  }, {
    label: "Tomorrow",
    callback: function callback(a) {
      return a.daysA.some(function (b) {
        return b == moment().add(1, 'days').format("ddd");
      });
    }
  }, {
    label: "Mon-Thu",
    callback: function callback(a) {
      return a.daysA.some(function (b) {
        return ["Mon", "Tue", "Wed", "Thu"].some(function (c) {
          return b == c;
        });
      });
    }
  }, {
    label: "Fri",
    callback: function callback(a) {
      return a.daysA.some(function (b) {
        return b == "Fri";
      });
    }
  }, {
    label: "Sat",
    callback: function callback(a) {
      return a.daysA.some(function (b) {
        return b == "Sat";
      });
    }
  }, {
    label: "Sun",
    callback: function callback(a) {
      return a.daysA.some(function (b) {
        return b == "Sun";
      });
    }
  }];
  this.currentFilter = this.filterButtons[0].callback;
  moment.relativeTimeThreshold('ss', 10);
  moment.relativeTimeThreshold('s', 50);
  moment.relativeTimeThreshold('m', 120);
  moment.updateLocale('en', {
    relativeTime: {
      future: "in %s",
      past: "%s ago",
      s: 'a few seconds',
      ss: '%d seconds',
      m: "a min",
      mm: "%d min",
      h: "an hour",
      hh: "%d hours",
      d: "a day",
      dd: "%d days",
      M: "a month",
      MM: "%d months",
      y: "a year",
      yy: "%d years"
    }
  });

  this.moveTab = function (e) {
    var routelist = this.refs.route;

    if (!(Symbol.iterator in Object(routelist))) {
      routelist = [routelist];
    }

    var max = routelist.reduce(function (b, a) {
      return Math.max(b, a.scrollWidth);
    }, 0);
    routelist.forEach(function (a) {
      return a.scrollLeft = e.target.value / 100 * max;
    });
  }.bind(this);

  this.changeFilter = function (e) {
    this.currentFilter = e.item.callback;
    this.filterButtons.forEach(function (a) {
      return a.active = false;
    });
    e.item.active = true;
  }.bind(this);

  this.hideSchedule = function (e) {
    e.item.stops.forEach(function (a) {
      return a.active = false;
    });
    e.item.tripSchedule = false;
  }.bind(this);

  this.getScheduleHours = function () {
    var x = this.getSchedule();
    var h = x.reduce(function (r, a) {
      return a.stops.filter(function (a) {
        return a.visible;
      }).reduce(function (rr, aa) {
        rr.add(aa.momentTime.hour());
        return rr;
      }, r);
    }, new Set());
    return _toConsumableArray(h);
  };

  this.stopsByHour = function (stops, hour) {
    return stops.filter(function (a) {
      return a.visible && a.momentTime.hour() == hour;
    });
  };

  this.getSchedule = function () {
    var _this123 = this;

    this.schedule.forEach(function (a) {
      a.stops.forEach(function (b) {
        return b.visible = false;
      });
      a.stops.filter(_this123.currentFilter).forEach(function (b) {
        return b.visible = true;
      });
    });
    return this.schedule;
  };

  this.on("mount", function () {
    _this124.update();
  });
  this.on("update", function () {
    var today = moment().format("YYYY-MM-DD");

    if (_this124.opts && _this124.opts.dataData) {
      if (!_this124.data || _this124.data.data.id != _this124.opts.dataData.data.id) {
        _this124.data = _this124.opts.dataData;
        _this124.loading = true;
        _this124.isSchedule = false;
        _this124.schedule = [];

        _lib.ajax.$get("/app/router/bus_stop.php?schedule=" + _this124.data.data.id, function (data) {
          var _this125 = this;

          var schedule = JSON.parse(data);
          this.schedule = [];
          schedule.forEach(function (a) {
            a.momentTime = moment(today + " " + a.arrival_time);
            a.showTime = a.momentTime.format("h:mm");
            a.showAm = a.momentTime.format("A");
            a.daysA = Object.values(a.days);

            if (!_this125.schedule.some(function (b) {
              return b.route_id == a.route_id;
            })) {
              _this125.schedule.push({
                route_id: a.route_id,
                trip_headsign: a.trip_headsign,
                color: "rgba(" + app.conf.bus_routes_colors.get(a.route_id) + ")",
                stops: []
              });
            }

            _this125.schedule.find(function (b) {
              return b.route_id == a.route_id;
            }).stops.push(a);
          });
          this.schedule.sort(function (a, b) {
            return a.route_id - b.route_id;
          });
          this.loading = false;
          this.update();
        }.bind(_this124), false, "busstopschedule");
      }
    }
  });

  this.nextStop = function () {
    return this.schedule.filter(function (a) {
      return a.classes.highlight;
    })[0];
  };

  this.stopTrip = function (e) {
    var today = moment().format("YYYY-MM-DD");

    if (e.item.active) {
      e.item.active = false;
      this.schedule.find(function (a) {
        return a.route_id == e.item.route_id;
      }).tripSchedule = false;
    } else {
      _lib.ajax.$get("/app/router/bus_trip_schedule.php?stop_trip=" + e.item.trip_id, function (data) {
        this.schedule.find(function (a) {
          return a.route_id == e.item.route_id;
        }).stops.forEach(function (a) {
          return a.active = false;
        });
        e.item.active = true;
        e.item.schedule = JSON.parse(data);
        e.item.schedule.forEach(function (a) {
          a.moment_time = moment(today + " " + a.arrival_time);
          a.showTime = a.moment_time.format("h:mm");
          a.showAm = a.moment_time.format("A");
          a.visible = a.stop_sequence >= e.item.stop_sequence;
          a.startStop = e.item;
        });
        this.schedule.find(function (a) {
          return a.route_id == e.item.route_id;
        }).tripSchedule = e.item.schedule;
        this.update();
      }.bind(this));
    }
  }.bind(this);
});
riot.tag2('popup-ecocounter', '<virtual if="{data}"> <fav-button style=" position: absolute; right: 10px; top: 10px;" alert="{alertText}" book="{getFavData()}"></fav-button> <div class="f-p3">{data.name}</div> <div ref="count" style="width:100%">Count for last 7 days : {data.count} </div> <div hide="{!showGraph && !graphLoading}" ref="count2" style="width:100%">Count for last 30 days : {data.count30} </div> <div>{data.direction}</div> <div if="{data.installedOn}">Counter installed on {data.installedOn}</div> <div hide="{!showGraph}" style="position:relative"> <button class="download" click="{download}"></button> <loading data-classes="td-margin" if="{graphLoading}"></loading> <div style="margin-top: 10px;height: 140px" id="ecocounterpopupgraph"></div> </div> </virtual>', '', '', function (opts) {
  var _this126 = this;

  this.graphLoading = true;
  this.showGraph = true;
  this.lastOid = 0;
  var lastAjax = false;
  var self = this;
  this.alertText = "Try to favourite a cycle counter<br> to see the count <br>on the home page";

  this.getFavData = function () {
    return {
      page: "travel",
      detail: "cycle_counters",
      id: this.data.oid,
      label: this.data.name,
      url: "map/layers/ecocounter/@" + this.data.location.lng() + "," + this.data.location.lat() + ",20",
      data: [{
        title: "Count last 7 days",
        value: this.data.count,
        svgIcon: "Flag"
      }],
      update_on: new Date(),
      expire_after: {
        when: "tomorrow"
      }
    };
  };

  this.on("mount", function () {
    return _this126.update();
  });

  this.download = function (e) {
    window.open("/app/router/ecocounter.php?csv&oid=" + this.data.oid + "&type=" + this.data.feature, "_blank");
  }.bind(this);

  this.makeGraph = function (ret) {
    if (typeof ret == "string") {
      ret = JSON.parse(ret);
      this.ret = ret;
    }

    var width = parseInt(getComputedStyle(self.refs.count).width);
    this.data.count30 = ret.y.reduce(function (a, r, i) {
      return parseInt(a) + (moment().subtract(31, "days").isSameOrBefore(ret.x[i]) ? parseInt(r) : 0);
    }, 0);
    var buttons = [{
      step: "all",
      label: "all"
    }, {
      step: "day",
      count: 31,
      label: "30 days",
      active: true
    }, {
      step: "day",
      count: 7,
      label: "7 days"
    }];
    if (this.data.oid == "total") buttons.shift();
    document.getElementById("ecocounterpopupgraph").style.width = width + "px";
    var layout = {
      margin: {
        t: 0,
        b: 30,
        l: 30,
        r: 20
      },
      width: width,
      height: 130,
      autosize: true,
      paper_bgcolor: "#fff",
      plot_bgcolor: "transparent",
      xaxis: {
        range: [moment().subtract(31, "days").format("YYYY-MM-DD"), moment().format("YYYY-MM-DD")],
        rangeselector: {
          visible: true,
          buttons: buttons
        }
      },
      yaxis: {
        autorange: true
      }
    };
    Plotly.newPlot(document.getElementById("ecocounterpopupgraph"), [ret], layout, {
      scrollZoom: false,
      staticPlot: true,
      responsive: true,
      width: width,
      displayModeBar: false
    }).then(function () {
      Plotly.relayout(myPlot, {
        'xaxis.range[0]': layout.xaxis.range[0],
        'xaxis.range[1]': layout.xaxis.range[1]
      });
    });
    var myPlot = document.getElementById("ecocounterpopupgraph");
    var data = ret;
    var isUnderRelayout = false;
    myPlot.on('plotly_relayout', function (relayoutData) {
      if (relayoutData['autosize'] === true) {} else if (relayoutData['xaxis.autorange'] === true) {
        var update = {
          'yaxis.autorange': true
        };

        if (!isUnderRelayout) {
          Plotly.relayout(myPlot, update).then(function () {
            isUnderRelayout = false;
          });
        }

        isUnderRelayout = true;
      } else {
        var flag = false;

        if (typeof relayoutData['xaxis.range[0]'] !== 'undefined' || typeof relayoutData['xaxis.range[1]'] !== 'undefined') {
          if (typeof relayoutData['xaxis.range[0]'] !== 'undefined') {
            var x0 = relayoutData['xaxis.range[0]'];
          } else {
            var x0 = layout.xaxis.range[0];
          }

          if (typeof relayoutData['xaxis.range[1]'] !== 'undefined') {
            var x1 = relayoutData['xaxis.range[1]'];
          } else {
            var x1 = layout.xaxis.range[1];
          }

          flag = true;
        } else if (typeof relayoutData['xaxis.range'] !== 'undefined') {
          var x0 = relayoutData['xaxis.range'][0];
          var x1 = relayoutData['xaxis.range'][1];
          flag = true;
        }

        if (flag === true) {
          var minValue, maxValue;
          var i = 0,
              j = 0;
          var data = [ret];

          for (i = 0; i < data.length; i++) {
            var aTrace = data[i];

            for (j = 0; j < aTrace.x.length; j++) {
              var x = aTrace.x[j];

              if (x >= x0 && x <= x1) {
                var aValue = Number(aTrace.y[j]);

                if (maxValue === undefined || aValue > maxValue) {
                  maxValue = aValue;
                }

                if (minValue === undefined || aValue < minValue) {
                  minValue = aValue;
                }
              }
            }
          }

          maxValue *= 1.1;
          minValue *= 0.9;

          if (layout.yaxis.type === 'linear') {
            var update = {
              'yaxis.range': [minValue, maxValue]
            };
          } else if (layout.yaxis.type === 'log') {
            var update = {
              'yaxis.range': [Math.log(minValue <= 0 ? 0.0000001 : minValue) / Math.log(10), Math.log(maxValue) / Math.log(10)]
            };
          }

          if (!isUnderRelayout) {
            Plotly.relayout(myPlot, update).then(function () {
              isUnderRelayout = false;
            });
          }

          isUnderRelayout = true;
        }
      }
    });
    self.graphLoading = false;
    self.update();
  };

  this.on("update", function () {
    if (_this126.opts && _this126.opts.dataContent) {
      if (_this126.data != _this126.opts.dataContent) {
        _this126.data = _this126.opts.dataContent;
      }
    }

    if (_this126.data && _this126.data.oid && _this126.lastOid != _this126.data.oid) {
      _this126.graphLoading = true;
      _this126.lastOid = _this126.data.oid;
    } else if (_this126.lastOid == _this126.data.oid && !_this126.data.count30) {
      _this126.makeGraph(_this126.ret);
    }

    if (_this126.data && _this126.data.oid && _this126.graphLoading) {
      if (lastAjax) lastAjax.abort();
      lastAjax = _lib.ajax.$get("/app/router/ecocounter.php?oid=" + _this126.data.oid + "&type=" + _this126.data.feature, _this126.makeGraph.bind(_this126));
    }
  });
});
riot.tag2('popup-traffic', '<virtual if="{data}"> <div class="f-p3">{data.title}</div> <div>{data.Starts} - {data.Ends} </div> <div>{data.Timeofday}</div> <p>{data.Description}</p> <div>{data.Notes}</div> </virtual>', '', '', function (opts) {
  var _this127 = this;

  this.on("mount", function () {
    return _this127.update();
  });
  this.on("update", function () {
    if (_this127.opts && _this127.opts.dataContent) {
      if (_this127.data != _this127.opts.dataContent) {
        _this127.data = _this127.opts.dataContent;
      }
    }
  });
});
riot.tag2('popup-waterlevel', '<virtual if="{data}"> <div ref="graph" style="position:relative"> <loading data-classes="td-margin" if="{graphLoading}"></loading> <div style="margin-top: 10px;height: 100px" id="waterlevelpopupgraph"></div> </div> <div> <p> Stage is height of the water in meters<br> Flow is amount of water flowing through (m3/s)<br> Graph shows changes in Stage in last 30 days </p> </div> </virtual>', '', '', function (opts) {
  var _this128 = this;

  this.graphLoading = true;
  this.showGraph = true;
  this.lastName = 0;
  var lastAjax = false;
  var self = this;
  this.on("mount", function () {
    return _this128.update();
  });
  this.on("update", function () {
    if (_this128.opts && _this128.opts.dataContent) {
      if (_this128.data != _this128.opts.dataContent) {
        _this128.data = _this128.opts.dataContent;
      }
    }

    if (_this128.data && _this128.data.name && _this128.lastName != _this128.data.name) {
      _this128.graphLoading = true;
      _this128.lastName = _this128.data.name;
    }

    if (_this128.data && _this128.data.name && _this128.graphLoading) {
      if (lastAjax) lastAjax.abort();
      lastAjax = _lib.ajax.$get("/app/router/waterlevel.php?name=" + _this128.data.name, function (ret) {
        ret = JSON.parse(ret);
        var width = parseInt(getComputedStyle(self.refs.graph).width);
        var buttons = [{
          step: "day",
          count: 31,
          label: "30 days",
          active: true
        }, {
          step: "day",
          count: 7,
          label: "7 days"
        }];
        if (_this128.data.name == "total") buttons.shift();
        document.getElementById("waterlevelpopupgraph").style.width = width + "px";
        Plotly.newPlot(document.getElementById("waterlevelpopupgraph"), [ret], {
          margin: {
            t: 0,
            b: 30,
            l: 30,
            r: 20
          },
          width: width,
          height: 100,
          autosize: true,
          paper_bgcolor: "#fff",
          plot_bgcolor: "transparent",
          xaxis: {
            range: [moment().subtract(31, "days").format("YYYY-MM-DD"), moment().format("YYYY-MM-DD")],
            rangeselector: {
              visible: true,
              buttons: buttons
            }
          },
          yaxis: {}
        }, {
          scrollZoom: false,
          staticPlot: true,
          responsive: true,
          width: width,
          displayModeBar: false
        });
        self.graphLoading = false;
        self.update();
      });
    }
  });
});
riot.tag2('timeline-map-lime', '<div class="f-h3" ref="date">{date}</div> <div class="controls"> <input min="0" max="{howmany}" riot-value="{val}" step="1" type="range" change="{rangeChange}" ref="range"> <button class="{play:!interval, pause:interval}" type="button" click="{playChange}"></button> </div>', 'timeline-map-lime,[data-is="timeline-map-lime"]{ position: absolute; z-index: 1000; left: 0px; bottom: 0px; background: rgba(255, 255, 255, 0.8); padding: 10px 20px; } timeline-map-lime .controls,[data-is="timeline-map-lime"] .controls{ display: inline-flex; align-items: center; padding: 0; } timeline-map-lime .controls button,[data-is="timeline-map-lime"] .controls button{ width: 20px; height: 20px; position: relative; border: 2px solid #098484; border-radius: 10px; margin-left: 5px; } timeline-map-lime .play,[data-is="timeline-map-lime"] .play{} timeline-map-lime .play:after,[data-is="timeline-map-lime"] .play:after{ content: " "; position: absolute; top: 2px; left: 5px; width: 0; height: 0; border-top: 6px solid transparent; border-bottom: 6px solid transparent; border-left: 9px solid #098484; } timeline-map-lime .pause:after,[data-is="timeline-map-lime"] .pause:after{ content: " "; position: absolute; top: 3px; left: 9px; width: 3px; height: 10px; background-color: #098484; } timeline-map-lime .pause:before,[data-is="timeline-map-lime"] .pause:before{ content: " "; position: absolute; top: 3px; left: 4px; width: 3px; height: 10px; background-color: #098484; }', '', function (opts) {
  var _this129 = this;

  this.interval = false;
  this.val = 0;
  this.howmany = 0;
  this.date = "";
  this.on("mount", function () {
    _this129.howmany = Object.keys(_this129.opts.data).length - 1;
    _this129.val = _this129.howmany;
    _this129.date = Object.keys(_this129.opts.data)[_this129.howmany];

    _this129.update();
  });
  this.on("update", function () {});

  this.changeMap = function (i) {
    var map = $mn.isMap();
    var mapdata = map.data;
    var key = Object.keys(this.opts.data)[i];
    this.date = moment(key).format("D MMMM YYYY");
    var day = this.opts.data[key];
    mapdata.forEach(function (a) {
      var x = a.getProperty("count");
      var y = day[a.getId()] || 0;

      if (x != y) {
        if (_lib.getLimeColor(x) != _lib.getLimeColor(y)) {
          a.setProperty("count", y);
        }
      }
    });
  };

  this.rangeChange = function (e) {
    clearInterval(this.interval);
    this.interval = false;
    this.val = e.target.value;
    this.changeMap(e.target.value);
  }.bind(this);

  this.playChange = function (e) {
    var _this130 = this;

    if (this.interval) {
      clearInterval(this.interval);
      this.interval = false;
    } else {
      this.val = this.val >= this.howmany ? 0 : this.val;
      this.interval = setInterval(function () {
        _this130.val++;

        _this130.changeMap(_this130.val);

        if (parseInt(_this130.val) >= parseInt(_this130.howmany)) {
          clearInterval(_this130.interval);
          _this130.interval = false;
        }

        _this130.update();
      }, 100);
    }
  }.bind(this);
});
riot.tag2('static-about', '<content-box params="{params}"> <div class="checks content b-light visible"> <p class="m20"> <a href="/privacy_policy.pdf" target="_blank">Privacy policy</a><br> <a href="/terms_of_use.pdf" target="_blank">Terms of use</a> </p> <p class="m20">SmartView pulls together real-time data from a range of public and private organisations, making information easy for locals and visitors to access.</p> <p class="m20">SmartView doesn’t replace dedicated apps or sites like Google Maps, Transport for Christchurch, or Metroinfo. Instead, it combines scattered data into one simple site. Because it’s a website, not an app, you can use it in any browser, on any device. </p> <p class="m20">SmartView was developed by <a href="https://ccc.govt.nz/the-council/future-projects/smart-cities-programme" target="_blank">Smart Cities Christchurch</a> programme from Christchurch City Council. Our projects introduce new technology and approaches to make people\'s lives better and easier. We use prototypes or beta releases to turn good ideas into reality quickly. </p> <h4 class="h20">Help us improve</h4> <p class="m20">Use the <a href="https://smartview.ccc.govt.nz/#feelme">Feedback</a> screen to report issues, make suggestions, or just tell us what you think about SmartView Christchurch. This is a beta release, so it\'s not complete, or fully tested, but we want to give people the benefit of what we have developed as early as possible.During a beta release, we rely on feedback from real users like you, so we can make decisions about what data and functionality we should provide next.</p> </div> </content-box>', '', '', function (opts) {
  this.params = {
    label: "Welcome to SmartView",
    sub: "Powered by Christchurch City Council",
    "yield": true
  };
  this.sources = [];

  var showSources = function showSources(list) {
    app.alert.set({
      title: "Data sources",
      list: list.reduce(function (r, a) {
        r.push({
          title: a.src_name,
          link: a.src_web
        });
        return r;
      }, []),
      collapsed: true
    });
  };

  this.on("mount", function () {
    var _this131 = this;

    this.sources = app.session.get("sources") || [];

    if (this.sources.length == 0) {
      _lib.ajax.$get("/app/router/static.php?sources", function (a) {
        _this131.sources = JSON.parse(a);
        app.session.set("sources", _this131.sources);
        showSources(_this131.sources);
      });
    } else {
      showSources(this.sources);
    }
  });
});
riot.tag2('accsnap', '<form id="snapform" submit="{parent.sendData}" data-is="content-box" params="{params}" method="post" action="/app/router/accsnap.php"> <label for="category" class="title">Experience?</label> <select id="category" name="category" class="category"> <option each="{n,v in parent.categories2}" riot-value="{v}">{n}</option> </select> <label for="content" class="title">Details</label> <textarea id="content" placeholder="" keyup="{parent.reRows}" rows="{parent.rows}" class="content" name="content"></textarea><br> <fieldset class="uploads"> <legend>Photos</legend> <div class="imagelist"> <snap-image each="{f,i in parent.files}" i="{i}" f="{f}"></snap-image> </div> </fieldset> <fieldset class="snaplocation"> <legend>Location</legend> <div class="map" ref="map"> </div> </fieldset> <input class="button" type="submit" click="{parent.sendData}"> </form>', 'accsnap .pleasechoose,[data-is="accsnap"] .pleasechoose{ font-size: 80%; color: red; } accsnap .radios,[data-is="accsnap"] .radios{ margin-top: 10px; } accsnap .imagelist,[data-is="accsnap"] .imagelist{ display: flex; flex-wrap: wrap; } accsnap #email,[data-is="accsnap"] #email,accsnap #name,[data-is="accsnap"] #name{ width: calc(100% - 10px); margin-top: 5px; } accsnap label.title,[data-is="accsnap"] label.title{ text-transform: uppercase; } accsnap fieldset,[data-is="accsnap"] fieldset{ border: 1px solid var(--color-extra-fg); padding: 5px; } accsnap .content,[data-is="accsnap"] .content{ width: 100%; padding: 5px; box-sizing: border-box; } accsnap .category,[data-is="accsnap"] .category{ width: 100%; padding: 10px } accsnap .maincat,[data-is="accsnap"] .maincat{ display: block; padding: 5px; background-color: yellow; margin: 1px 20px 1px 1px; } accsnap .map,[data-is="accsnap"] .map{ height: 200px; width: 100%; } accsnap .uploads,[data-is="accsnap"] .uploads{ display: flex; justify-content: flex-end; flex-direction: row-reverse; } accsnap input[type=file],[data-is="accsnap"] input[type=file],accsnap .inputhide,[data-is="accsnap"] .inputhide{ width: 0.1px; height: 0.1px; opacity: 0; overflow: hidden; position: absolute; z-index: -1; } accsnap input[type=file]+label,[data-is="accsnap"] input[type=file]+label{ display: inline-block; } accsnap input[type=file]:focus+label,[data-is="accsnap"] input[type=file]:focus+label,accsnap input[type=file]+label:hover,[data-is="accsnap"] input[type=file]+label:hover{ } accsnap label.title,[data-is="accsnap"] label.title{ display: block; margin-top: 5px; } accsnap input[type=email],[data-is="accsnap"] input[type=email],accsnap #name,[data-is="accsnap"] #name{ padding: 3px; }', '', function (opts) {
  this.files = [false];
  var map;
  var marker;
  var self = this;
  this.rows = 3;
  this.pleaseChoose = false;
  this.params = {
    label: "Report how accessible a place is",
    sub: "Share your experience",
    "yield": true
  };
  this.categories2 = {
    bad: "Not accessible",
    good: "Accessible",
    dark: "Obstacle"
  };
  this.currentCategory = false;

  this.updateChecked = function (e) {
    this.categories.forEach(function (a) {
      return a.checked = false;
    });
    e.item.cat.checked = e.target.checked;
    this.update();
  }.bind(this);

  this.sendData = function (e) {
    var form = document.getElementById("snapform");

    if (form.elements.subcategory && form.elements.subcategory.value == "") {
      this.pleaseChoose = true;
      return;
    } else {
      this.pleaseChoose = false;
    }

    var formData = new FormData(form);
    formData.append("latlng", JSON.stringify(map.getCenter()));
    var http = new XMLHttpRequest();
    http.open("POST", form.action);

    http.onreadystatechange = function () {
      if (http.status === 200 && http.readyState === 4) {
        document.getElementById("category").selectedIndex = 0;
        document.getElementById("content").value = "";
        self.files = [false];
        self.update();
        app.alert.set({
          title: "Report saved",
          msg: "Thanks for letting us know, once we have enough data, we can build a safety map.",
          hideonhide: true
        });
      }
    };

    http.send(formData);
    e.preventDefault();
  }.bind(this);

  this.reRows = function (e) {
    this.rows = Math.max(3, e.target.value.split("\n").length);
  }.bind(this);

  this.on("mount", function () {
    app.promise.google().then(function () {
      map = $mn.newInit(self.root.querySelector(".map"), {
        center: app.location.current.point,
        zoomControl: false
      });

      function HTMLMarker(pos) {
        this.lat = pos.lat;
        this.lng = pos.lng;
        this.div = null;
        this.pos = new google.maps.LatLng(pos);
        return this;
      }

      HTMLMarker.prototype = new google.maps.OverlayView();

      HTMLMarker.prototype.onRemove = function () {};

      HTMLMarker.prototype.setPosition = function (pos) {
        this.lat = isNaN(pos.lat) ? pos.lat() : pos.lat;
        this.lng = isNaN(pos.lng) ? pos.lng() : pos.lng;
        this.pos = new google.maps.LatLng(this);
        this.draw();
      };

      HTMLMarker.prototype.onAdd = function () {
        this.div = document.createElement('DIV');
        this.div.className = "current_location";
        this.div.innerHTML = "<div class=current_location_core></div><div class=current_location_pulse></div>";
        this.div.style.position = "absolute";
        var panes = this.getPanes();
        panes.floatPane.appendChild(this.div);
      };

      HTMLMarker.prototype.draw = function () {
        var _this132 = this;

        var overlayProjection = this.getProjection();

        if (overlayProjection) {
          var position = overlayProjection.fromLatLngToDivPixel(this.pos);
          this.div.style.left = position.x + 'px';
          this.div.style.top = position.y + 'px';
        } else {
          google.maps.event.addListenerOnce(this.map, "projection_changed", function () {
            overlayProjection = _this132.getProjection();

            if (overlayProjection) {
              var position = overlayProjection.fromLatLngToDivPixel(_this132.pos);
              _this132.div.style.left = position.x + 'px';
              _this132.div.style.top = position.y + 'px';
            } else {
              console.log("overlayProjection failed?");
            }
          });
        }
      };

      marker = new HTMLMarker(app.location.current.point);
      marker.setMap(map);
      map.addListener('center_changed', function () {
        marker.setPosition(map.getCenter());
      });
      app.on("geolocation/search", function () {
        map.setCenter(app.location.current.point);
      });
    });
  });

  this.removeMe = function (e) {
    this.files.splice(e.item.i, 1);
    this.update();
  }.bind(this);
});
riot.tag2('progress-bar', '<div class="progress" hide="{!loading}"> <div class="progress-bar"> Loading data... </div> </div>', '@keyframes progress-bar-stripes { from { background-position: 40px 0; } to { background-position: 0 0; } } progress-bar .progress,[data-is="progress-bar"] .progress{ position: fixed; bottom: 0px; right: 0px; left: 0px; height: 34px; overflow: hidden; background-color: #f5f5f5; } progress-bar .progress-bar,[data-is="progress-bar"] .progress-bar{ float: left; width: 100%; height: 100%; font-size: 17px; font-weight: bold; text-shadow: 0px 0px 4px white; line-height: 33px; background-repeat: repeat; color: #10042d; text-align: center; animation: 2000ms linear 3.44633ms infinite normal none running progress-bar-stripes; background-image: linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent); background-size: 40px 40px; background-color: #d94355; box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .15); transition: width .6s ease; }', '', function (opts) {
  var _this133 = this;

  this.loading = false;
  var self = this;
  this.on("mount", function () {
    app.on("progress/start", function () {
      _this133.update({
        loading: true
      });
    });
    app.on("progress/stop", function () {
      _this133.update({
        loading: false
      });
    });
  });
});
riot.tag2('safetysnap', '<form id="snapform" submit="{parent.sendData}" data-is="content-box" params="{params}" method="post" action="/app/router/safetysnap.php"> <div class="ifelt"> <span>I felt</span> <label class="safebutton notsafe {active:parent.notsafe}" for="notsafe"> unsafe <input name="safenot" type="radio" change="{parent.changeSafeNot}" ref="notsafe" id="notsafe"> </label> <label class="safebutton yessafe {active:parent.yessafe}" for="yessafe"> safe <input name="safenot" type="radio" change="{parent.changeSafeYes}" ref="yessafe" id="yessafe"> </label> </div> <label for="category" class="title">Experience?</label> <select id="category" name="category" class="category"> <option each="{n,v in parent.categories[parent.goodorbadcat]}" riot-value="{v}">{n}</option> </select> <div class="discrimination" if="{parent.notsafe}"> <div>Was discrimination related to the experience?</div> <label class="button"><input type="checkbox">Racial</label> <label class="button"><input type="checkbox">Sexual</label> <label class="button"><input type="checkbox">Disability</label> </div> <label for="content" class="title">Details</label> <textarea id="content" placeholder="" keyup="{parent.reRows}" rows="{parent.rows}" class="content" name="content"></textarea><br> <fieldset class="uploads"> <legend>Photos</legend> <div class="imagelist"> <snap-image each="{f,i in parent.files}" i="{i}" f="{f}"></snap-image> </div> </fieldset> <fieldset class="snaplocation"> <legend>Location</legend> <div class="map" ref="map"> </div> </fieldset> <input class="button" type="submit" click="{parent.sendData}"> </form>', 'safetysnap input[type=submit].button,[data-is="safetysnap"] input[type=submit].button{ width: 100%; font-size: 100%; margin-top: 10px; } safetysnap .discrimination,[data-is="safetysnap"] .discrimination{ margin-top: 10px; margin-bottom: 10px; } safetysnap .discrimination .button,[data-is="safetysnap"] .discrimination .button{ color: black; background-color: white; padding: 3px 11px 3px 25px; position: relative; } safetysnap .discrimination input[type="checkbox"]:checked:after,[data-is="safetysnap"] .discrimination input[type="checkbox"]:checked:after{ border-bottom: 2px solid var(--color-extra-fg); border-left: 2Px solid var(--color-extra-fg); } safetysnap .discrimination input[type="checkbox"]:before,[data-is="safetysnap"] .discrimination input[type="checkbox"]:before{ border: var(--color-extra-fg) 1px solid; } safetysnap .ifelt,[data-is="safetysnap"] .ifelt{ display: flex; align-items: center; align-content: center; flex-direction: row; justify-content: flex-start; } safetysnap .ifelt span,[data-is="safetysnap"] .ifelt span{ font-size: 130%; text-transform: uppercase; padding-left: 40px; } safetysnap .ifelt input,[data-is="safetysnap"] .ifelt input{ position: absolute; visibility: hidden; } safetysnap label.safebutton,[data-is="safetysnap"] label.safebutton{ height: 59px; width: 40px; background-size: contain; display: inline-block; padding-top: 39px; box-sizing: border-box; text-align: center; margin-left: 50px; } safetysnap label.safebutton.yessafe,[data-is="safetysnap"] label.safebutton.yessafe{ background-image: url(assets/publica/sets/Feedback_Like_Off.svg); } safetysnap label.safebutton.notsafe,[data-is="safetysnap"] label.safebutton.notsafe{ background-image: url(assets/publica/sets/Feedback_Disklike_Off.svg); } safetysnap label.safebutton.yessafe.active,[data-is="safetysnap"] label.safebutton.yessafe.active{ background-image: url(assets/publica/sets/Feedback_Like_On.svg); } safetysnap label.safebutton.notsafe.active,[data-is="safetysnap"] label.safebutton.notsafe.active{ background-image: url(assets/publica/sets/Feedback_Dislike_On.svg); } safetysnap .pleasechoose,[data-is="safetysnap"] .pleasechoose{ font-size: 80%; color: red; } safetysnap .radios,[data-is="safetysnap"] .radios{ margin-top: 10px; } safetysnap .imagelist,[data-is="safetysnap"] .imagelist{ display: flex; flex-wrap: wrap; } safetysnap #email,[data-is="safetysnap"] #email,safetysnap #name,[data-is="safetysnap"] #name{ width: calc(100% - 10px); margin-top: 5px; } safetysnap label.title,[data-is="safetysnap"] label.title{ text-transform: uppercase; } safetysnap fieldset,[data-is="safetysnap"] fieldset{ border: 1px solid var(--color-extra-fg); padding: 5px; } safetysnap .content,[data-is="safetysnap"] .content{ width: 100%; padding: 5px; box-sizing: border-box; } safetysnap .category,[data-is="safetysnap"] .category{ width: 100%; padding: 10px } safetysnap .maincat,[data-is="safetysnap"] .maincat{ display: block; padding: 5px; background-color: yellow; margin: 1px 20px 1px 1px; } safetysnap .map,[data-is="safetysnap"] .map{ height: 200px; width: 100%; } safetysnap .uploads,[data-is="safetysnap"] .uploads{ display: flex; justify-content: flex-end; flex-direction: row-reverse; } safetysnap input[type=file],[data-is="safetysnap"] input[type=file],safetysnap .inputhide,[data-is="safetysnap"] .inputhide{ width: 0.1px; height: 0.1px; opacity: 0; overflow: hidden; position: absolute; z-index: -1; } safetysnap input[type=file]+label,[data-is="safetysnap"] input[type=file]+label{ display: inline-block; } safetysnap input[type=file]:focus+label,[data-is="safetysnap"] input[type=file]:focus+label,safetysnap input[type=file]+label:hover,[data-is="safetysnap"] input[type=file]+label:hover{ } safetysnap label.title,[data-is="safetysnap"] label.title{ display: block; margin-top: 5px; } safetysnap input[type=email],[data-is="safetysnap"] input[type=email],safetysnap #name,[data-is="safetysnap"] #name{ padding: 3px; }', '', function (opts) {
  this.files = [false];
  var map;
  var marker;
  var self = this;
  this.yessafe = false;
  this.notsafe = false;
  this.rows = 3;
  this.pleaseChoose = false;
  this.goodorbadcat = "bad";
  this.params = {
    label: "Report how safe a place is",
    sub: "Share your experience",
    "yield": true
  };
  this.categories = {
    "bad": {
      bad: "Unsafe",
      bad1: "Intoxicated people",
      bad2: "Intimidating behaviour",
      bad3: "Homeless people",
      bad4: "Poor lighting",
      bad5: "No people around",
      bad6: "Over-crowded",
      bad7: "Hard to see what/who is ahead",
      bad8: "I feel trapped here",
      bad9: "It feels uncared for",
      bad10: "It’s hard to find my way around",
      bad11: "Harassment",
      bad12: "Assault"
    },
    "good": {
      good: "Safe",
      good1: "Lighting is good",
      good2: "Area is accessible",
      good3: "Can see ahead",
      good4: "Clear exits/entrances",
      good5: "Easy to find my way around",
      good6: "Space seems well-maintained",
      good7: "Not too crowded",
      good8: "Buzzing/good vibe"
    }
  };
  this.currentCategory = false;

  this.changeSafeYes = function (e) {
    this.yessafe = e.target.checked;
    this.notsafe = !this.yessafe;
    this.goodorbadcat = this.notsafe ? "bad" : "good";
  }.bind(this);

  this.changeSafeNot = function (e) {
    this.notsafe = e.target.checked;
    this.yessafe = !this.notsafe;
    this.goodorbadcat = this.notsafe ? "bad" : "good";
  }.bind(this);

  this.updateChecked = function (e) {
    this.categories.forEach(function (a) {
      return a.checked = false;
    });
    e.item.cat.checked = e.target.checked;
    this.update();
  }.bind(this);

  this.sendData = function (e) {
    e.preventDefault();
    var form = document.getElementById("snapform");

    if (form.elements.subcategory && form.elements.subcategory.value == "") {
      this.pleaseChoose = true;
      return;
    } else {
      this.pleaseChoose = false;
    }

    var formData = new FormData(form);
    formData.append("latlng", JSON.stringify(map.getCenter()));
    var http = new XMLHttpRequest();
    http.open("POST", form.action);

    http.onreadystatechange = function () {
      if (http.status === 200 && http.readyState === 4) {
        document.getElementById("category").selectedIndex = 0;
        document.getElementById("content").value = "";
        self.files = [false];
        self.update();
        app.alert.set({
          title: "Report saved",
          msg: "Thanks for letting us know, once we have enough data, we can build a safety map.",
          hideonhide: true
        });
      }
    };

    http.send(formData);
    return false;
  }.bind(this);

  this.reRows = function (e) {
    this.rows = Math.max(3, e.target.value.split("\n").length);
  }.bind(this);

  this.on("mount", function () {
    app.promise.google().then(function () {
      map = $mn.newInit(self.root.querySelector(".map"), {
        center: app.location.current.point,
        zoomControl: false
      });

      function HTMLMarker(pos) {
        this.lat = pos.lat;
        this.lng = pos.lng;
        this.div = null;
        this.pos = new google.maps.LatLng(pos);
        return this;
      }

      HTMLMarker.prototype = new google.maps.OverlayView();

      HTMLMarker.prototype.onRemove = function () {};

      HTMLMarker.prototype.setPosition = function (pos) {
        this.lat = isNaN(pos.lat) ? pos.lat() : pos.lat;
        this.lng = isNaN(pos.lng) ? pos.lng() : pos.lng;
        this.pos = new google.maps.LatLng(this);
        this.draw();
      };

      HTMLMarker.prototype.onAdd = function () {
        this.div = document.createElement('DIV');
        this.div.className = "current_location";
        this.div.innerHTML = "<div class=current_location_core></div><div class=current_location_pulse></div>";
        this.div.style.position = "absolute";
        var panes = this.getPanes();
        panes.floatPane.appendChild(this.div);
      };

      HTMLMarker.prototype.draw = function () {
        var _this134 = this;

        var overlayProjection = this.getProjection();

        if (overlayProjection) {
          var position = overlayProjection.fromLatLngToDivPixel(this.pos);
          this.div.style.left = position.x + 'px';
          this.div.style.top = position.y + 'px';
        } else {
          google.maps.event.addListenerOnce(this.map, "projection_changed", function () {
            overlayProjection = _this134.getProjection();

            if (overlayProjection) {
              var position = overlayProjection.fromLatLngToDivPixel(_this134.pos);
              _this134.div.style.left = position.x + 'px';
              _this134.div.style.top = position.y + 'px';
            } else {
              console.log("overlayProjection failed?");
            }
          });
        }
      };

      marker = new HTMLMarker(app.location.current.point);
      marker.setMap(map);
      map.addListener('center_changed', function () {
        marker.setPosition(map.getCenter());
      });
      app.on("geolocation/search", function () {
        map.setCenter(app.location.current.point);
      });
    });
  });

  this.removeMe = function (e) {
    this.files.splice(e.item.i, 1);
    this.update();
  }.bind(this);
});
riot.tag2('static-settings', '<content-box params="{paramsBg}"> <div class="flex" style="justify-content: space-between;"> <div each="{item in backgrounds}" data-is="background-picker"></div> <div class="background-item" style="background-color: transparent"></div> </div> </content-box> <content-box params="{paramNotifications}"> <div> <button click="{parent.notificationsOff}">Turn off all notifications</button> </div> </content-box> <content-box params="{paramFavourites}"> <div each="{fav in parent.favs}"> <div class="settings-fav-title"> {fav.label || fav.pulse.label} <fav-button book="{parent.parent.getFavData(fav)}" onoff="On" icon="{parent.parent.icons[fav.pulse.color]}"></fav-button> </div> </div> </content-box> <content-box params="{paramColorScheme}"> <div> <div><button class="{active:parent.colorScheme==⁗default⁗}" click="{parent.colorDefault}">Default colors</button></div> <div><button class="{active:parent.colorScheme==⁗contrast⁗}" click="{parent.colorContrast}">High contrast colors</button></div> <div> <h4>Color test</h4> <div class="pulseboxes"> <pulse-box each="{parent.getNode(\'play\')}"></pulse-box> <pulse-box each="{parent.getNode(\'travel\')}"></pulse-box> <pulse-box each="{parent.getNode(\'environment\')}"></pulse-box> <pulse-box each="{parent.getNode(\'now\')}"></pulse-box> <pulse-box each="{parent.getNode(\'community\')}"></pulse-box> </div> <table style="width:100%"> <tr> <th>Page</th> <th>Main</th> <th>Sub</th> </tr> <tr> <td>Environment <td><input input="{parent.colorChange}" name="--color-environment-bg" riot-value="{parent.getColor(⁗--color-environment-bg⁗)}" type="{\'color\'}"><span></span> <td><input input="{parent.colorChange}" name="--color-environment-fg" riot-value="{parent.getColor(⁗--color-environment-fg⁗)}" type="{\'color\'}"><span></span> <tr> <td>Find <td><input input="{parent.colorChange}" name="--color-play-bg" riot-value="{parent.getColor(⁗--color-play-bg⁗)}" type="{\'color\'}"><span></span> <td><input input="{parent.colorChange}" name="--color-play-fg" riot-value="{parent.getColor(⁗--color-play-fg⁗)}" type="{\'color\'}"><span></span> <tr> <td>Travel <td><input input="{parent.colorChange}" name="--color-travel-bg" riot-value="{parent.getColor(⁗--color-travel-bg⁗)}" type="{\'color\'}"><span></span> <td><input input="{parent.colorChange}" name="--color-travel-fg" riot-value="{parent.getColor(⁗--color-travel-fg⁗)}" type="{\'color\'}"><span></span> <tr> <td>Now <td><input input="{parent.colorChange}" name="--color-now-bg" riot-value="{parent.getColor(⁗--color-now-bg⁗)}" type="{\'color\'}"><span></span> <td><input input="{parent.colorChange}" name="--color-now-fg" riot-value="{parent.getColor(⁗--color-now-fg⁗)}" type="{\'color\'}"><span></span> <tr> <td>Community <td><input input="{parent.colorChange}" name="--color-community-bg" riot-value="{parent.getColor(⁗--color-community-bg⁗)}" type="{\'color\'}"><span></span> <td><input input="{parent.colorChange}" name="--color-community-fg" riot-value="{parent.getColor(⁗--color-community-fg⁗)}" type="{\'color\'}"><span></span> </table> </div> </div> </content-box>', 'static-settings table,[data-is="static-settings"] table{ margin: 10px 0px; } static-settings th,[data-is="static-settings"] th{ font-weight: bold } static-settings content-box .image,[data-is="static-settings"] content-box .image{ flex-basis: 50%; align-self: center; overflow: hidden; background-size: auto 64%; background-position: center; border-top-left-radius: 6px; height: 100%; } static-settings content-box .image,[data-is="static-settings"] content-box .image{ position: static; width: inherit; left: inherit; top: inherit; } static-settings .detail-data button.active,[data-is="static-settings"] .detail-data button.active{ border: 1px solid var(--color-settings-bg); } static-settings pulse-box,[data-is="static-settings"] pulse-box{ flex-basis: calc(79% / 3 - (10px * 2) / 3); } static-settings .pulseboxes,[data-is="static-settings"] .pulseboxes{ display: flex; font-size: 80%; flex-wrap: wrap; } static-settings .pulseboxes,[data-is="static-settings"] .pulseboxes{ display: flex; font-size: 80%; } static-settings pulse-box,[data-is="static-settings"] pulse-box{ flex-basis: calc(99% / 4 - (10px * 2) / 4); flex-basis: 115px; } static-settings article.roundcorner,[data-is="static-settings"] article.roundcorner{ position: relative; }', '', function (opts) {
  var _this135 = this;

  this.favs = [];
  this.icons = {
    "#f68b1f": "OnTheGo",
    "#cadb44": "Environment",
    "#f05b72": "News",
    "#7cccbf": "Connect",
    "#61a2d8": "Find"
  };
  this.colorScheme = "default";
  this.paramColorScheme = {
    label: "Color Scheme",
    sub: "Change the color scheme of the dashboard",
    "yield": true,
    expandable: true
  };
  this.paramFavourites = {
    label: "Favourites",
    sub: "Manage your favourites",
    "yield": true,
    expandable: true
  };
  this.paramsBg = {
    label: "Wallpaper",
    sub: "Select the wallpaper for your dashboard",
    "yield": true,
    expandable: true
  };
  this.paramNotifications = {
    label: "Notifications",
    sub: "Manage your notifications",
    "yield": true,
    expandable: true
  };

  function luminance(r, g, b) {
    var a = [r, g, b].map(function (v) {
      v /= 255;
      return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
    });
    return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;
  }

  function contrast(rgb1, rgb2) {
    var lum1 = luminance(rgb1[0], rgb1[1], rgb1[2]);
    var lum2 = luminance(rgb2[0], rgb2[1], rgb2[2]);
    var brightest = Math.max(lum1, lum2);
    var darkest = Math.min(lum1, lum2);
    return (brightest + 0.05) / (darkest + 0.05);
  }

  this.getColor = function (a) {
    return getComputedStyle(document.body).getPropertyValue(a).trim();
  };

  this.getNode = function (page) {
    return app.pages[page].nodes.filter(function (r, i) {
      return i == 0;
    });
  };

  this.getFavData = function (d) {
    return d;
  };

  this.on("mount", function () {
    app.favs.getAll(function (favs) {
      _this135.favs = favs;

      _this135.favs.forEach(function (d) {
        d.pulse = app.pages[d.page].nodes.filter(function (b) {
          return b.name == d.detail;
        }).pop();
      });

      _this135.update();
    });
  });
  this.on("update", function () {
    _this135.colorScheme = document.querySelector("html").classList.contains("contrast") ? "contrast" : "default";
    console.log(_this135.colorScheme);
  });

  this.notificationsOff = function () {
    OneSignal.setSubscription(false);
    document.cookie = "signal_cookie_id=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
    alert("Notifications are turned off");
  }.bind(this);

  this.colorDefault = function () {
    document.querySelector("html").classList.remove("contrast");
    document.querySelector("html").classList.add("default");
    this.colorScheme = "default";
    localStorage.setItem("color-scheme", this.colorScheme);
  }.bind(this);

  this.colorContrast = function () {
    document.querySelector("html").classList.add("contrast");
    document.querySelector("html").classList.remove("default");
    this.colorScheme = "contrast";
    localStorage.setItem("color-scheme", this.colorScheme);
  }.bind(this);

  this.colorChange = function (e) {
    var bs = document.body.style;
    bs.setProperty(e.target.name, e.target.value);

    var col = _lib.hexToRgb(e.target.value);

    var arc = [col.red, col.green, col.blue];
    var con = contrast(arc, [255, 255, 255]);
    e.target.nextSibling.innerHTML = Math.round(con * 10) / 10;
  }.bind(this);
});
riot.tag2('background-picker', '<img riot-src="{item.url}"> <button click="{setBg}" class="centered_absolute">{item.set?⁗unset⁗:⁗set⁗}</button>', '', 'class="background-item"', function (opts) {
  this.setBg = function (e) {
    if (e.item.item.set) {
      e.item.item.set = false;
    } else {
      e.item.item.set = true;
    }

    localStorage.setItem("backgrounds", JSON.stringify(backgrounds));
  }.bind(this);
});
riot.tag2('snapsendsolve', '<form id="snapform" submit="{parent.sendData}" data-is="content-box" params="{params}" method="post" action="/app/router/snap.php"> <label for="category" class="title">How can we help?</label> <select change="{parent.updateSubs}" id="category" name="category" class="category"> <option each="{n,v in parent.categories2}" riot-value="{v}">{n}</option> </select> <div class="radios" if="{parent.getSub()}"> <span each="{n,v in parent.getSub()}"> <input change="{parent.parent.subChosen}" id="subcategory{v}" required riot-value="{v}" name="subcategory" type="radio"> <label for="subcategory{v}">{n}</label> </span> <span class="pleasechoose" if="{parent.pleaseChoose}">Please choose an option</span> </div> <label for="content" class="title">Details</label> <textarea id="content" placeholder="" keyup="{parent.reRows}" rows="{parent.rows}" class="content" name="content"></textarea><br> <fieldset class="uploads"> <legend>Photos</legend> <div class="imagelist"> <snap-image each="{f,i in parent.files}" i="{i}" f="{f}"></snap-image> </div> </fieldset> <fieldset class="snaplocation"> <legend>Location</legend> <div class="map" ref="map"> </div> </fieldset> <label for="email" class="title">Would you like us to keep you up to date?</label> <input id="name" type="text" name="name" placeholder="Name"><br> <input id="email" name="email" placeholder="Email" type="email"><br> <input class="button" type="submit" click="{parent.sendData}"> </form>', 'snapsendsolve .pleasechoose,[data-is="snapsendsolve"] .pleasechoose{ font-size: 80%; color: red; } snapsendsolve .radios,[data-is="snapsendsolve"] .radios{ margin-top: 10px; } snapsendsolve .imagelist,[data-is="snapsendsolve"] .imagelist{ display: flex; flex-wrap: wrap; } snapsendsolve #email,[data-is="snapsendsolve"] #email,snapsendsolve #name,[data-is="snapsendsolve"] #name{ width: calc(100% - 10px); margin-top: 5px; } snapsendsolve label.title,[data-is="snapsendsolve"] label.title{ text-transform: uppercase; } snapsendsolve fieldset,[data-is="snapsendsolve"] fieldset{ border: 1px solid var(--color-extra-fg); padding: 5px; } snapsendsolve .content,[data-is="snapsendsolve"] .content{ width: 100%; padding: 5px; box-sizing: border-box; } snapsendsolve .category,[data-is="snapsendsolve"] .category{ width: 100%; padding: 10px } snapsendsolve .maincat,[data-is="snapsendsolve"] .maincat{ display: block; padding: 5px; background-color: yellow; margin: 1px 20px 1px 1px; } snapsendsolve .map,[data-is="snapsendsolve"] .map{ height: 200px; width: 100%; } snapsendsolve .uploads,[data-is="snapsendsolve"] .uploads{ display: flex; justify-content: flex-end; flex-direction: row-reverse; } snapsendsolve input[type=file],[data-is="snapsendsolve"] input[type=file],snapsendsolve .inputhide,[data-is="snapsendsolve"] .inputhide{ width: 0.1px; height: 0.1px; opacity: 0; overflow: hidden; position: absolute; z-index: -1; } snapsendsolve input[type=file]+label,[data-is="snapsendsolve"] input[type=file]+label{ display: inline-block; } snapsendsolve input[type=file]:focus+label,[data-is="snapsendsolve"] input[type=file]:focus+label,snapsendsolve input[type=file]+label:hover,[data-is="snapsendsolve"] input[type=file]+label:hover{ } snapsendsolve label.title,[data-is="snapsendsolve"] label.title{ display: block; margin-top: 5px; } snapsendsolve input[type=email],[data-is="snapsendsolve"] input[type=email],snapsendsolve #name,[data-is="snapsendsolve"] #name{ padding: 3px; }', '', function (opts) {
  this.files = [false];
  var map;
  var marker;
  var self = this;
  this.rows = 3;
  this.pleaseChoose = false;
  this.params = {
    label: "Report a problem or Request a service",
    sub: "Tell us how we can help",
    "yield": true
  };
  this.categories = [{
    title: "Water",
    subs: ["Blocked drain, pipe or water", "Flooding", "Irrigation", "Leaks or burst pipes", "Water supply issue", "Meter box", "Pollution of a water way", "Raw sewage", "Spillage (e.g. fuel or chemicals)"]
  }, {
    title: "Barking Dog"
  }, {
    title: "Graffiti"
  }, {
    title: "Litter",
    subs: ["In a park", "On the road"]
  }, {
    title: "Potholes"
  }, {
    title: "Wheelie Bin",
    subs: ["Damaged Bin", "Bin Not Collected", "Missing Bin"]
  }, {
    title: "Parks",
    subs: ["Trees", "Garden", "Grass", "General Maintenance"]
  }, {
    title: "Road hazard",
    subs: ["Road Asset (eg footpath, or furniture)", "Signs "]
  }, {
    title: "General problem"
  }];
  this.categories2 = {
    leak: "Leak (Water Supply)",
    bins: "Bin (damaged,missing,not collected)",
    libraries: "Libraries",
    service: "Service (Enhanced, new)",
    graffiti: "Graffiti (private property, utility box, other)",
    barking: "Barking Dog",
    litter: "Litter (road, park)",
    transport: "Transport & Roads",
    roadasset: "Road Asset (footpath,road,furniture)",
    watersupply: "Council Water Supply Issues",
    tree: "Tree (road,park)",
    signs: "Signs",
    vehicle: "Vehicle",
    pothole: "Pothole",
    garden: "Garden (road,park)",
    grass: "Grass",
    parkmaintenance: "Parks General Maintenance"
  };
  this.subcategory = {
    tree: {
      treeroad: "Road",
      treepark: "Park"
    },
    bins: {
      damagedbin: "Damaged Bin",
      missingbin: "Missing Bin",
      binnotcollected: "Bin Not Collected"
    },
    graffiti: {
      graffitiprivate: "Private property",
      graffitibox: "Utility box",
      graffitiother: "Other"
    },
    litter: {
      litterpark: "Litter park",
      litterroad: "Litter road"
    },
    garden: {
      gardenpark: "Garden park",
      gardenroad: "Garden road"
    },
    service: {
      enhancedservice: "Enhanced Service",
      newservice: "New Service"
    }
  };
  this.currentCategory = false;

  this.getSub = function () {
    if (this.currentCategory && this.subcategory[this.currentCategory]) {
      return this.subcategory[this.currentCategory];
    } else {
      return false;
    }
  };

  this.updateSubs = function (e) {
    this.currentCategory = e.target.value;
    var form = document.getElementById("snapform");

    if (form.elements.subcategory) {
      form.elements.subcategory.forEach(function (a) {
        return a.checked = false;
      });
    }
  }.bind(this);

  this.updateChecked = function (e) {
    this.categories.forEach(function (a) {
      return a.checked = false;
    });
    e.item.cat.checked = e.target.checked;
    this.update();
  }.bind(this);

  this.subChosen = function (e) {
    this.pleaseChoose = false;
  }.bind(this);

  this.sendData = function (e) {
    var form = document.getElementById("snapform");

    if (form.elements.subcategory && form.elements.subcategory.value == "") {
      this.pleaseChoose = true;
      return;
    } else {
      this.pleaseChoose = false;
    }

    var formData = new FormData(form);
    formData.append("latlng", JSON.stringify(map.getCenter()));
    var http = new XMLHttpRequest();
    http.open("POST", form.action);

    http.onreadystatechange = function () {
      if (http.status === 200 && http.readyState === 4) {
        document.getElementById("category").selectedIndex = 0;
        document.getElementById("content").value = "";
        self.files = [false];
        self.update();
        app.alert.set({
          title: "Report sent",
          msg: "Thanks for sending us the information, we will get onto it as soon as possible.",
          hideonhide: true
        });
      }
    };

    http.send(formData);
    e.preventDefault();
  }.bind(this);

  this.reRows = function (e) {
    this.rows = Math.max(3, e.target.value.split("\n").length);
  }.bind(this);

  this.on("mount", function () {
    app.promise.google().then(function () {
      map = $mn.newInit(self.root.querySelector(".map"), {
        center: app.location.current.point,
        zoomControl: false
      });

      function HTMLMarker(pos) {
        this.lat = pos.lat;
        this.lng = pos.lng;
        this.div = null;
        this.pos = new google.maps.LatLng(pos);
        return this;
      }

      HTMLMarker.prototype = new google.maps.OverlayView();

      HTMLMarker.prototype.onRemove = function () {};

      HTMLMarker.prototype.setPosition = function (pos) {
        this.lat = isNaN(pos.lat) ? pos.lat() : pos.lat;
        this.lng = isNaN(pos.lng) ? pos.lng() : pos.lng;
        this.pos = new google.maps.LatLng(this);
        this.draw();
      };

      HTMLMarker.prototype.onAdd = function () {
        this.div = document.createElement('DIV');
        this.div.className = "current_location";
        this.div.innerHTML = "<div class=current_location_core></div><div class=current_location_pulse></div>";
        this.div.style.position = "absolute";
        var panes = this.getPanes();
        panes.floatPane.appendChild(this.div);
      };

      HTMLMarker.prototype.draw = function () {
        var _this136 = this;

        var overlayProjection = this.getProjection();

        if (overlayProjection) {
          var position = overlayProjection.fromLatLngToDivPixel(this.pos);
          this.div.style.left = position.x + 'px';
          this.div.style.top = position.y + 'px';
        } else {
          google.maps.event.addListenerOnce(this.map, "projection_changed", function () {
            overlayProjection = _this136.getProjection();

            if (overlayProjection) {
              var position = overlayProjection.fromLatLngToDivPixel(_this136.pos);
              _this136.div.style.left = position.x + 'px';
              _this136.div.style.top = position.y + 'px';
            } else {
              console.log("overlayProjection failed?");
            }
          });
        }
      };

      marker = new HTMLMarker(app.location.current.point);
      marker.setMap(map);
      map.addListener('center_changed', function () {
        marker.setPosition(map.getCenter());
      });
      app.on("geolocation/search", function () {
        map.setCenter(app.location.current.point);
      });
    });
  });

  this.removeMe = function (e) {
    this.files.splice(e.item.i, 1);
    this.update();
  }.bind(this);
});
riot.tag2('snap-image', '<input id="{\'file\'+opts.i}" change="{addImage}" name="attachment[]" type="file" accept="image/*" capture> <label hide="{file}" class="button" for="{\'file\'+opts.i}">Add photo</label> <div hide="{!file}" class="imagewrapper"> <img riot-src="{getSrc()}"> <div click="{parent.parent.removeMe}" class="button">Remove</div> </div>', 'snap-image,[data-is="snap-image"]{ margin-right: 5px; } snap-image .imagewrapper,[data-is="snap-image"] .imagewrapper{ position: relative; width: 76px; overflow: hidden; } snap-image .imagewrapper .button,[data-is="snap-image"] .imagewrapper .button{ position: absolute; left: 0px; top: 0px; opacity: 0.9; font-size: 80%; } snap-image img,[data-is="snap-image"] img{ min-width: 76px; max-height: 60px; opacity: 0.6; }', '', function (opts) {
  this.file = false;

  this.getSrc = function () {
    if (this.file) return URL.createObjectURL(this.file);
  };

  this.addImage = function (e) {
    this.file = e.target.files[0];
    this.parent.parent.files[this.opts.i] = this.file;
    this.parent.parent.files.push(false);
    this.parent.parent.update();
  }.bind(this);
});
riot.tag2('sources-static', '<loading if="{loading}"></loading> <div each="{s in sources}" class="sources"> <h4>{s[0].name}</h4> <div each="{s}"> <div class="source"><span>{src_name}</span><span class="type">\\{{src_data}\\}</span></div> <a target="new" class="detail-button hyperlink" href="{src_web}">View website</a> </div> </div>', 'sources-static,[data-is="sources-static"]{ padding: 20px; display: block; } sources-static h4,[data-is="sources-static"] h4{ margin: 0px 0px 10px 0px; font-weight: bold; } sources-static .sources,[data-is="sources-static"] .sources{ border-bottom: 2px solid black; padding-bottom: 10px; margin-bottom: 10px; } sources-static .source,[data-is="sources-static"] .source{ border-top: 1px solid white; border-bottom: 1px solid white; padding: 5px 0px; margin-bottom: 10px; margin-top: 10px; display: inline-flex; width: 100%; } sources-static .source span,[data-is="sources-static"] .source span{ flex-grow: 1; } sources-static .source .type,[data-is="sources-static"] .source .type{ justify-self: right; text-align: right; } sources-static .detail-button,[data-is="sources-static"] .detail-button{ margin-top: 0; }', '', function (opts) {
  var _this137 = this;

  this.loading = true;
  this.sources = [];

  var groupSources = function groupSources(a) {
    var x = a.reduce(function (r, b) {
      if (!r[b.name]) {
        r[b.name] = [];
      }

      r[b.name].push(b);
      return r;
    }, {});
    return x;
  };

  this.on("mount", function () {
    _this137.sources = app.session.get("sources") || [];

    if (_this137.sources.length == 0) {
      _lib.ajax.$get("/app/router/static.php?sources", function (a) {
        _this137.sources = groupSources(JSON.parse(a));
        app.session.set("sources", _this137.sources);
        _this137.loading = false;

        _this137.update();
      });
    } else {
      _this137.loading = false;
    }

    _this137.update();
  });
  this.on("update", function () {});
});
riot.tag2('voice-recognition', '<button click="{start}">{running?⁗Stop⁗:⁗Start⁗}</button> <div>{recognized}</div>', '', '', function (opts) {
  this.recognized = "Ask me about your bins... (try when is my yellow bin collected)";
  this.running = false;
  var self = this;
  var SpeechRecognition = SpeechRecognition || webkitSpeechRecognition;
  var recognition = new SpeechRecognition();
  recognition.continuous = true;
  recognition.lang = 'en-US';
  recognition.interimResults = true;
  recognition.maxAlternatives = 3;

  this.start = function () {
    self.running = !self.running;

    if (self.running) {
      recognition.start();
      console.log("Started");
    } else {
      recognition.stop();
      console.log("Stopped");
    }

    self.update();
  }.bind(this);

  var getCollection = function getCollection(latlng, cb) {
    var url = "/app/router/rubish.php?";
    url += "lat=" + latlng.lat;
    url += "&lng=" + latlng.lng;
    if (self.lastAjax == url) return;
    self.lastAjax = url;

    _lib.ajax.$get(url, function (data) {
      cb(JSON.parse(data));
    });
  };

  recognition.onresult = function (event) {
    if (self.running) for (var i = 0; i < event.results.length; i++) {
      a = event.results[i];

      for (var j = 0; j < a.length; j++) {
        b = a[j].transcript;
        b.split(" ").forEach(function (c) {
          if (c.toLowerCase() == "yellow" || c.toLowerCase() == "recycle" || c.toLowerCase() == "recycling") {
            self.recognized = "Querying your recycling bin collection days...";
            self.running = false;
            recognition.stop();
            self.update();
            getCollection(app.lastPosition, function (data) {
              data.filter(function (a) {
                return a.type == "recycling";
              }).forEach(function (a) {
                self.recognized = a.next.weekday + " " + (a.next.day < 7 ? "this" : "next") + " week";
                self.update();
              });
            });
          }

          if (c.toLowerCase() == "red" || c.toLowerCase() == "rubbish" || c.toLowerCase() == "refuse") {
            self.recognized = "Querying your refuse bin collection days...";
            self.running = false;
            recognition.stop();
            self.update();
            getCollection(app.lastPosition, function (data) {
              data.filter(function (a) {
                return a.type == "refuse";
              }).forEach(function (a) {
                self.recognized = a.next.weekday + " " + (a.next.day < 7 ? "this" : "next") + " week";
                self.update();
              });
            });
          }

          if (c.toLowerCase() == "green" || c.toLowerCase() == "organic") {
            self.recognized = "Querying your organic bin collection days...";
            self.running = false;
            recognition.stop();
            self.update();
            getCollection(app.lastPosition, function (data) {
              data.filter(function (a) {
                return a.type == "organic";
              }).forEach(function (a) {
                self.recognized = a.next.weekday + " " + (a.next.day < 7 ? "this" : "next") + " week";
                self.update();
              });
            });
          }
        });
      }
    }
    console.log(event);
  };

  recognition.onspeechend = function () {
    self.running = false;
    recognition.stop();
    console.log("Stopped");
    self.update();
  };

  recognition.onerror = function (event) {
    console.log(event);
    self.recognized = 'Error occurred in recognition: ' + event.error;
    self.update();
  };

  this.sendData = function (e) {
    var form = document.getElementById("snapform");

    if (form.elements.subcategory && form.elements.subcategory.value == "") {
      this.pleaseChoose = true;
      return;
    } else {
      this.pleaseChoose = false;
    }

    var formData = new FormData(form);
    formData.append("latlng", JSON.stringify(map.getCenter()));
    var http = new XMLHttpRequest();
    http.open("POST", form.action);

    http.onreadystatechange = function () {
      if (http.status === 200 && http.readyState === 4) {
        document.getElementById("category").selectedIndex = 0;
        document.getElementById("content").value = "";
        self.files = [false];
        self.update();
        app.alert.set({
          title: "Report saved",
          msg: "Thanks for letting us know, once we have enough data, we can build a safety map.",
          hideonhide: true
        });
      }
    };

    http.send(formData);
    e.preventDefault();
  }.bind(this);
});
riot.tag2('alert', '<div class="overlay {collapsed:app.alert.collapsed}" click="{hide}"> <div ref="scrollwrapper" click="{donthide}" class="{shown:app.alert.is()} {pushask: app.tags.pushask, overflow:app.tags.pushask&&app.tags.pushask.textVisible}"> <push-ask ref="pushask"></push-ask> <div click="{hide}" if="{app.alert.message==\'reload\'}"> SmartView code has been updated, for the best experience please reload the page.<br> <button class="button" click="{reload}">Reload</button> </div> <div class="alert-content" if="{app.alert.message!=\'reload\'}"> <header click="{hide}"> <h4 if="{app.alert.title}">{app.alert.title}</h4> <button if="{app.alert.message.trim()||app.alert.list}">{app.alert.collapsed?\'Show\':\'Hide\'}</button> </header> <raw if="{app.alert.message}" content="{app.alert.message}"></raw> <table if="{app.alert.list}"> <tr each="{row in app.alert.list}" class="oddeven"> <td class="titles">{row.title||⁗N/A⁗}</td> <td if="{row.extra}" each="{extra in row.extra}" class="extra">{extra}</td> <td class="buttons"> <button if="{row.feat}" click="{showMapFeature}">View</button> <a class="detail-button" if="{row.link}" href="{row.link}" target="_blank">View website</a> </td> </tr> </table> </div> </div> </div>', 'alert .extra,[data-is="alert"] .extra{ font-size: 80%; } alert .oddeven:nth-child(2n),[data-is="alert"] .oddeven:nth-child(2n){ background: #ccc; } alert .overflow,[data-is="alert"] .overflow{ overflow: visible !important; } alert table,[data-is="alert"] table{ margin: auto; } alert td.titles,[data-is="alert"] td.titles{ margin-right: 20px; } alert td.buttons,[data-is="alert"] td.buttons{ text-align: right; } alert header,[data-is="alert"] header{ display: flex; align-items: flex-start; margin-bottom: 10px; } alert header button,[data-is="alert"] header button{ flex-grow: 0; color: var(--color-extra-fg); background-color: white; padding: 0; } alert header h4,[data-is="alert"] header h4{ flex-grow: 1; margin: 0; font-weight: bold; } alert .pushask h4,[data-is="alert"] .pushask h4{ padding-left: 30px; } alert .overlay,[data-is="alert"] .overlay{ position: fixed; left: 0; right: 0; z-index: 1000; top: 0; bottom: 0; background: rgba(0, 0, 0, 0.3); } alert .overlay.collapsed,[data-is="alert"] .overlay.collapsed{ top: auto; } alert .overlay .shown,[data-is="alert"] .overlay .shown{ bottom: 0px; transform: translateY(0); max-height: 50%; overflow: auto; } alert .overlay.collapsed .shown,[data-is="alert"] .overlay.collapsed .shown{ transform: translateY(calc(100% - 39px)) } alert b,[data-is="alert"] b{ font-weight: bold; }', '', function (opts) {
  this.on("update", function () {});

  this.reload = function (e) {
    window.location.reload(true);
  }.bind(this);

  this.hide = function (e) {
    app.alert.collapsed = !app.alert.collapsed;

    if (app.alert.collapsed) {
      this.refs.scrollwrapper.scrollTop = 0;
    }

    if (app.alert.hideonhide) {
      app.alert.set(false);
    }

    e.stopPropagation();
  }.bind(this);

  this.donthide = function (e) {
    e.stopPropagation();
  }.bind(this);

  this.showMapFeature = function (e) {
    app.trigger("map/setcenter", _maps.getCenter(e.item.row.feat.getGeometry()));
    app.trigger("map/recenter");
    this.hide(e);
    $mn.triggerIcon(e.item.row.feat);
  }.bind(this);
});
riot.tag2('close', '<div></div>', 'close div,[data-is="close"] div{ position: absolute; top: 15px; right: 15px; height: 20px; width: 20px; line-height: 20px; text-align: center; background-image: url("/assets/publica/my/cross.svg"); background-size: contain; }', '', function (opts) {});
riot.tag2('content-box', '<div class="detail-flex detail-section detail-header-table margin-top {bottom-corners:!showSubDetail}"> <div class="detail-image-wrapper" if="{opts.params.image}"> <img alt="{opts.params.label}" riot-src="{opts.params.image}"> </div> <div class="{\'header-no-image\':!opts.params.image,\'header\':opts.params.image}"> <div> <div>{opts.params.label}</div> <span>{opts.params.sub}</span> </div> <div class="buttons"> <fav-button if="{opts.params.fav}" alert="{opts.params.fav.alertText||false}" book="{opts.params.fav}"> </fav-button> <button if="{!opts.params.noAbout && (opts.params.details || opts.params.tag || opts.params.content || opts.params.expandable)}" class="{active:showSubDetail}" click="{showDetail}">About</button> <button if="{opts.params.graph && !opts.params.useAboutButton2Graph}" class="{active:showSubGraph}" click="{showGraph}">Graph</button> <button each="{button in opts.params.buttons}" class="{active:button.active}" click="{button.action}">{button.label}</button> </div> </div> </div> <div if="{(showSubDetail || opts.params.preloadDetail) || (opts.params.yield&&!opts.params.expandable)}" hide="{!showSubDetail}" class="detail-section detail-data detail-flex flex-left"> <h3 if="{opts.params.detailTitle}" class="detail-title">{opts.params.detailTitle}</h3> <content-box-item if="{opts.params.details}" each="{item in opts.params.details}"></content-box-item> <div if="{opts.params.content}"> <raw content="{opts.params.content}"></raw> </div> <div style="width:100%" if="{opts.params.yield}"> <yield></yield> </div> <div style="width:100%" if="{opts.params.tag}" data-is="{opts.params.tag}" data-data="{opts.params}"> </div> </div> <div if="{showSubGraph}" class="detail-section detail-data detail-flex flex-left"> <div style="width:100%" if="{opts.params.graph}"> <graph ref="graph"></graph> </div> </div>', 'content-box .header-no-image,[data-is="content-box"] .header-no-image{ flex-grow: 1; display: flex; box-sizing: border-box; align-content: stretch; justify-content: space-between; align-items: center; } content-box .detail-header-table,[data-is="content-box"] .detail-header-table{ position: relative; overflow: hidden; } content-box .detail-image-wrapper,[data-is="content-box"] .detail-image-wrapper{ flex-basis: 50%; max-height: 120px; object-position: center; } content-box .detail-image-wrapper img,[data-is="content-box"] .detail-image-wrapper img{ max-height: calc(120px + 20px); width: 100%; object-fit: cover; object-position: center; position: absolute; top: 0px; left: 0px; max-width: 50%; height: 100%; } content-box .detail-title,[data-is="content-box"] .detail-title{ margin-top: 5px; margin-bottom: 5px; font-weight: bold; width: 100%; flex-basis: 100%; text-align: center; flex-shrink: 0; } content-box .detail-name-val.svgIcon,[data-is="content-box"] .detail-name-val.svgIcon{ display: grid; grid-template-columns: 20px 1fr; grid-template-rows: 15px 1fr; align-items: self-end; } content-box .svgWrapper,[data-is="content-box"] .svgWrapper{ grid-row: span 2; height: 100%; padding-bottom: 2px; display: flex; align-items: flex-end; } content-box .svgIcon svg,[data-is="content-box"] .svgIcon svg{ height: 17px; width: 17px; } content-box .notopmargin,[data-is="content-box"] .notopmargin{ margin-top: 0; } content-box .flex100,[data-is="content-box"] .flex100{ flex-basis: 100%; } content-box header,[data-is="content-box"] header{ position: relative; box-sizing: border-box; } content-box .header,[data-is="content-box"] .header{ flex-grow: 1; padding-left: 20px; box-sizing: border-box; } content-box .padding50,[data-is="content-box"] .padding50{ padding-left: 50% !important; } content-box .image,[data-is="content-box"] .image{ position: absolute; width: 50%; left: 0px; top: 0px; } content-box .clampMe,[data-is="content-box"] .clampMe{ display: -webkit-box; -webkit-line-clamp: 3; -webkit-box-orient: vertical; overflow: hidden; } content-box .content,[data-is="content-box"] .content{ box-sizing: border-box; } content-box .content span,[data-is="content-box"] .content span{ color: #888; font-size: 80%; padding-top: 10px; display: block; } content-box,[data-is="content-box"]{ margin-bottom: 10px; display: block; flex-basis: 100%; } content-box header .image,[data-is="content-box"] header .image{ align-self: center; padding: 0px; } content-box .header,[data-is="content-box"] .header{ flex-basis: 50%; padding-bottom: 20px; } content-box header,[data-is="content-box"] header{ flex-basis: 100%; display: flex; } content-box .header span,[data-is="content-box"] .header span{ font-size: 80%; display: block; } content-box .header h3,[data-is="content-box"] .header h3{ margin-top: 20px; } content-box .image,[data-is="content-box"] .image{ flex-basis: 50%; align-self: center; overflow: hidden; background-size: cover; background-position: center; border-top-left-radius: 6px; height: 100%; }', '', function (opts) {
  this.showSubGraph = false;
  this.showSubDetail = false;
  this.firstOpts = true;
  this.opts.params = {};
  this.on("mount", function () {
    if (this.opts.label) {
      this.opts.params.label = this.opts.label;
      this.update();
    }

    if (this.opts.fav) {
      this.opts.params.fav = this.opts.fav;
      this.update();
    }

    if (this.opts.params.openDetails || this.opts.params["yield"] && !this.opts.params.expandable) {
      this.showSubDetail = true;
      this.update();
    }

    if (this.opts.params.callback) {
      this.opts.params.callback(this);
    }
  });
  this.on("update", function () {
    if (this.opts.params && !this.opts.params.fav && this.opts.fav) {
      this.opts.params.fav = this.opts.fav;
    }

    if (this.firstOpts && this.opts.params.openDetails || this.opts.params["yield"] && !this.opts.params.expandable) {
      this.showSubDetail = true;
    }

    this.firstOpts = false;

    if (this.showSubGraph && this.opts.params.graph) {
      if (this.refs.graph) {
        this.refs.graph.update(this.opts.params.graph);
      }
    } else {
      this.showSubGraph = false;
    }
  });

  this.showGraph = function (e) {
    this.showSubGraph = this.showSubGraph ? false : true;
    e.preventUpdate = true;
    this.update();

    if (this.showSubGraph) {
      this.refs.graph.update(this.opts.params.graph);
    }
  }.bind(this);

  this.showDetail = function (e) {
    var _this138 = this;

    if (this.showSubDetail) {
      this.showSubDetail = false;
    } else {
      if (this.opts.params.detailCallback) {
        this.opts.params.detailCallback(this.opts.params, function () {
          _this138.update({
            showSubDetail: true
          });
        }, this);
      } else {
        this.showSubDetail = true;
      }
    }

    if (this.opts.params.useAboutButton2Graph) {
      this.showGraph(e);
    }
  }.bind(this);
});
riot.tag2('content-box-item', '<div if="{!item.hideEmpty||item.value}" riot-style="background-image:url(\'{item.image}\')" class="detail-name-val {svgIcon:item.svgIcon,icon:!item.link&&!item.noicon,notopmargin:item.notopmargin,flex100:item.flex100}"> <div if="{item.svgIcon}" class="svgWrapper"><svg alt=""> <use href="/assets/symbols/src/details/_sprite.svg#{item.svgIcon}"></use> </svg> </div> <strong>{item.label}</strong> <span if="{!item.html&&!item.link&&!item.audio}">{item.value || ⁗N/A⁗} <raw if="{item.unit && item.value}" content="{item.unit}"></raw></span> <span if="{!item.html&&item.link}"><a class="detail-button" href="{item.link}" target="_blank">{item.value ||                 ⁗N/A⁗}</a></span> <span if="{item.html}"> <raw content="{item.html}"></raw> </span> <span if="{item.audio}"> <audio style="max-width: 100%;" controls riot-src="{item.audio}" play="{playLog}"> Your browser does not support the <code>audio</code> element. <a href="{item.audio}">Story audio file</a> </audio> </span> </div>', 'content-box-item,[data-is="content-box-item"]{ margin-right: auto; } content-box-item span,[data-is="content-box-item"] span{ align-self: stretch; }', '', function (opts) {
  this.playLog = function (e) {
    app.trigger("ga", "audiostory/" + this.opts.params.label);
  }.bind(this);
});
riot.tag2('desktop-bubble', '<div class="bubble {iphone:o} {hiding:hiding}" if="{showOrNot()}"> <close click="{close}"></close> <div if="{!o}"><strong>To install SmartView to your desktop</strong> <br> Go to the browser settings <span class="custombox">&vellip;</span> <br> Use the <span class="custombox2">Add to Home screen</span> option</div> <div if="{o && !chromeiphone}"><strong>To install SmartView to your desktop</strong> <br> Go to the browser settings <span class="custombox"><img width="15" src="/assets/publica/my/IPhone_Menu.svg"></span> <br> Use the <span class="custombox2">Add to Home screen</span> option</div> <div if="{chromeiphone}"> <strong>To install SmartView to your desktop</strong> <br>Use Safari or Shortcuts app. Apple doesn\'t allow<br> Chrome to create Home screen links. </div> </div>', 'desktop-bubble close div,[data-is="desktop-bubble"] close div{ background-color: transparent !important; top: 7px; right: 10px; zoom: 0.8; } desktop-bubble strong,[data-is="desktop-bubble"] strong{ font-weight: bold; } desktop-bubble .custombox,[data-is="desktop-bubble"] .custombox{ font-size: 120%; background-color: white; color: black; display: inline-block; padding: 3px; } desktop-bubble .custombox2,[data-is="desktop-bubble"] .custombox2{ background-color: white; color: black; display: inline-block; padding: 3px; } desktop-bubble .bubble,[data-is="desktop-bubble"] .bubble{ position: fixed; right: 5px; left: 5px; top: 12px; background: #d11b6a; color: white; padding: 20px; z-index: 9999999999; min-width: 150px; border-radius: 10px; white-space: nowrap; transition: 0.5s; } desktop-bubble .bubble.hiding,[data-is="desktop-bubble"] .bubble.hiding{ transform: translate(0px, calc(-100% - 20px)); } desktop-bubble .bubble.iphone.hiding,[data-is="desktop-bubble"] .bubble.iphone.hiding{ transform: translate(0px, calc(100% + 20px)); } desktop-bubble .bubble.iphone,[data-is="desktop-bubble"] .bubble.iphone{ bottom: 12px; top: auto; } desktop-bubble .bubble::after,[data-is="desktop-bubble"] .bubble::after{ content: ""; top: auto; position: absolute; bottom: 100%; right: 7px; margin-bottom: -1px; border-width: 10px; border-style: solid; border-color: transparent transparent #d11b6a transparent; } desktop-bubble .bubble.iphone::after,[data-is="desktop-bubble"] .bubble.iphone::after{ border-color: #d11b6a transparent transparent transparent; margin-top: -1px; margin-bottom: 0px; top: 100%; right: calc(50% - 5px); }', '', function (opts) {
  var _this139 = this;

  var t = window.navigator.userAgent.toLowerCase();
  this.o = /iphone|ipod|ipad/.test(t);
  this.chromeiphone = /crios/.test(t) && this.o;
  this.shown = true;
  this.hiding = true;

  this.showOrNot = function () {
    return !localStorage.getItem("save-to-desktop-asked") && this.shown && _lib.isMobile() && !(window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone);
  };

  this.close = function (e) {
    this.shown = false;
    localStorage.setItem("save-to-desktop-asked", "yes");
  }.bind(this);

  this.on("mount", function () {
    setTimeout(function () {
      _this139.hiding = false;

      _this139.update();

      setTimeout(function () {
        _this139.hiding = true;

        _this139.update();

        setTimeout(function () {
          _this139.shown = false;

          _this139.update();
        }, 500);
      }, 7000);
    }, 3000);
  });
});
riot.tag2('canvas-dial', '<canvas ref="gauge" width="250" height="250"></canvas>', 'canvas-dial,[data-is="canvas-dial"]{ width: 100%; display: flex; } canvas-dial canvas,[data-is="canvas-dial"] canvas{ margin: auto; max-width: calc(800px - 160px - 20px); width: calc(100vw - 20vw - 20px); max-height: calc(800px - 160px - 20px); height: calc(100vw - 20vw - 20px); }', '', function (opts) {
  var self = this;
  var arrowImg = new Image();
  arrowImg.src = "/assets/publica/sets/Environment_Pin_Scale.svg";
  this.colors = {
    none: "#e6e7e8",
    low: "#cadb44",
    moderate: "#61a2d8",
    high: "#ffd94f",
    veryhigh: "#f68b1f",
    lowextreme: "#ef4123",
    extreme: "#e11156"
  };
  this.on("mount", function (opts) {
    this.drawGauge();
  });

  this.drawGauge = function () {
    var canvas = self.refs.gauge;
    var ctx = canvas.getContext("2d");
    var W = canvas.width;
    var H = canvas.height;
    var degrees = 0;
    degrees = Math.round(45 + 270 * self.opts.current / self.opts.max);
    var color = "#cadb44";
    var bgcolor = "rgb(226, 15, 85)";
    var text = 0,
        text_width;
    var arrowAngle = -45;
    var maxArrowAngle = Math.round(-90 + degrees);
    var arrowInterval;
    var arrowCount;
    var arrowAdd = 1;

    function drawArc(start, degrees, color, width, radius) {
      start = start + 180;
      degrees = degrees + 180;
      var radians = degrees * Math.PI / 180;
      var radstart = start * Math.PI / 180;
      ctx.beginPath();
      ctx.strokeStyle = color;
      ctx.lineWidth = width;
      ctx.arc(W / 2, H / 2, radius, radstart - 90 * Math.PI / 180, radians - 90 * Math.PI / 180, false);
      ctx.stroke();
    }

    function drawArrow(arrowAngle) {
      ctx.save();
      ctx.translate(W / 2, H / 2);
      ctx.rotate((arrowAngle - 180) * Math.PI / 180);
      ctx.drawImage(arrowImg, -arrowImg.height / 2, -arrowImg.height / 2, arrowImg.width * 0.8, arrowImg.height * 0.8);
      ctx.restore();
      ctx.setTransform(1, 0, 0, 1, 0, 0);
    }

    function init() {
      ctx.clearRect(0, 0, W, H);
      Object.keys(self.opts.limits).forEach(function (a) {
        var x = self.opts.limits[a];
        var l = x[0];
        var h = x[1];
        drawArc(45 + 270 * l / self.opts.max + 1, 45 + 270 * h / self.opts.max, self.colors.none, 20, 100);
      });
      Object.keys(self.opts.limits).forEach(function (a) {
        var x = self.opts.limits[a];
        var l = x[0];
        var h = x[1];

        if (arrowAngle + 90 > 45 + 270 * l / self.opts.max) {
          drawArc(45 + 270 * l / self.opts.max + 1, Math.min(arrowAngle + 90, 45 + 270 * h / self.opts.max), self.colors[a], 20, 100);
        }
      });
      drawArrow(arrowAngle);
      ctx.fillStyle = "black";
      ctx.font = "24px SourceSansPro";
      text = self.opts.heading;
      text_width = ctx.measureText(text).width;
      ctx.fillText(text, W / 2 - text_width / 2, H / 2 + 90);
      ctx.font = "16px SourceSansPro";
      var t = "";

      if (self.opts.text.indexOf("|") > 0) {
        var _a = self.opts.text.split("|");

        var _b = _a[1].split(" ");

        var mult = _b.shift();

        _a[1] = _b.join(" ");
        t = _a.join(" ");
        t = t.replace("#", Math.round(mult * self.opts.current / (maxArrowAngle + 45) * (arrowAngle + 45)).toLocaleString());
      } else {
        t = self.opts.text.replace("#", Math.round(self.opts.current / (maxArrowAngle + 45) * (arrowAngle + 45)).toLocaleString());
      }

      text = t;
      text_width = ctx.measureText(text).width;
      ctx.fillText(text, W / 2 - text_width / 2, H / 2 + 110);
      ctx.font = "14px SourceSansPro";
      self.opts.labels.forEach(function (f) {
        var v = f[0];
        var t = f[1];
        var d = Math.round(45 + 270 * v / self.opts.max);
        var a = Math.round(-90 + d);
        var ar = a * Math.PI / 180;
        var x, y;
        var tw = ctx.measureText(t).width;
        var th = 15;

        if (a <= -45) {
          x = Math.sin(ar) * 85;
          y = Math.cos(ar) * 85;
        } else if (a < 180 && a > -45) {
          y = Math.sin(ar) * -85;
          x = Math.cos(ar) * -85;
        } else if (a > 180) {
          y = Math.sin(ar) * -85;
          x = Math.cos(ar) * -85;
        } else {
          y = Math.sin(ar) * 85;
          x = Math.cos(ar) * -85;
        }

        if (x > 0) {
          x -= tw * x / 75;
        }

        if (y < 0) {
          y -= th * y / 75;
        }

        ctx.fillText(t, W / 2 + x, H / 2 + y);
      });
      ctx.lineWidth = 1;
      ctx.translate(W / 2 - 10, H - 110);
      var smileColor = self.colors.low;
      var smileSVG = new Path2D('M9.5 17c-3.584 0-6.5-2.916-6.5-6.5 0-0.276 0.224-0.5 0.5-0.5s0.5 0.224 0.5 0.5c0 3.033 2.467 5.5 5.5 5.5s5.5-2.467 5.5-5.5c0-0.276 0.224-0.5 0.5-0.5s0.5 0.224 0.5 0.5c0 3.584-2.916 6.5-6.5 6.5z');
      Object.keys(self.opts.limits).forEach(function (a, i) {
        var x = self.opts.limits[a];
        var l = x[0];
        var h = x[1];

        if (i <= 2 && self.opts.current <= h && self.opts.current >= l) {
          smileColor = self.colors.low;
          smileSVG = new Path2D('M9.5 17c-3.584 0-6.5-2.916-6.5-6.5 0-0.276 0.224-0.5 0.5-0.5s0.5 0.224 0.5 0.5c0 3.033 2.467 5.5 5.5 5.5s5.5-2.467 5.5-5.5c0-0.276 0.224-0.5 0.5-0.5s0.5 0.224 0.5 0.5c0 3.584-2.916 6.5-6.5 6.5z');
        } else if (i <= 5 && self.opts.current <= h && self.opts.current >= l) {
          smileColor = self.colors.high;
          smileSVG = new Path2D('M13.5 13h-8c-0.276 0-0.5-0.224-0.5-0.5s0.224-0.5 0.5-0.5h8c0.276 0 0.5 0.224 0.5 0.5s-0.224 0.5-0.5 0.5z');
        } else if (self.opts.current <= h && self.opts.current >= l) {
          smileColor = self.colors.extreme;
          smileSVG = new Path2D('M5.499 15c-0.105 0-0.21-0.033-0.3-0.1-0.221-0.166-0.265-0.479-0.099-0.7 0.502-0.668 1.159-1.221 1.901-1.6 0.778-0.398 1.619-0.599 2.499-0.599s1.721 0.202 2.499 0.599c0.742 0.379 1.399 0.932 1.901 1.6 0.166 0.221 0.121 0.534-0.099 0.7s-0.534 0.121-0.7-0.099c-0.859-1.144-2.172-1.8-3.601-1.8s-2.741 0.656-3.601 1.8c-0.098 0.131-0.248 0.2-0.4 0.2z');
        }
      });
      ctx.strokeStyle = smileColor;
      ctx.stroke(smileSVG);
      ctx.stroke(new Path2D('M9.5 20c-2.538 0-4.923-0.988-6.718-2.782s-2.782-4.18-2.782-6.717c0-2.538 0.988-4.923 2.782-6.718s4.18-2.783 6.718-2.783c2.538 0 4.923 0.988 6.718 2.783s2.782 4.18 2.782 6.718-0.988 4.923-2.782 6.717c-1.794 1.794-4.18 2.782-6.718 2.782zM9.5 2c-4.687 0-8.5 3.813-8.5 8.5s3.813 8.5 8.5 8.5 8.5-3.813 8.5-8.5-3.813-8.5-8.5-8.5z'));
      ctx.stroke(new Path2D('M6.5 8c-0.827 0-1.5-0.673-1.5-1.5s0.673-1.5 1.5-1.5 1.5 0.673 1.5 1.5-0.673 1.5-1.5 1.5zM6.5 6c-0.276 0-0.5 0.224-0.5 0.5s0.224 0.5 0.5 0.5 0.5-0.224 0.5-0.5-0.224-0.5-0.5-0.5z'));
      ctx.stroke(new Path2D('M12.5 8c-0.827 0-1.5-0.673-1.5-1.5s0.673-1.5 1.5-1.5 1.5 0.673 1.5 1.5-0.673 1.5-1.5 1.5zM12.5 6c-0.276 0-0.5 0.224-0.5 0.5s0.224 0.5 0.5 0.5 0.5-0.224 0.5-0.5-0.224-0.5-0.5-0.5z'));
      ctx.setTransform(1, 0, 0, 1, 0, 0);
    }

    init();
    clearInterval(arrowInterval);
    arrowInterval = setInterval(function () {
      arrowAngle++;
      init();

      if (arrowAngle >= maxArrowAngle) {
        clearInterval(arrowInterval);
        arrowCount = 6;
        arrowInterval = setInterval(function () {
          arrowAngle += arrowAdd;

          if (arrowAngle > maxArrowAngle + 1 || arrowAngle < maxArrowAngle - 1) {
            arrowAdd *= -1;
            arrowCount--;
          }

          if (arrowCount <= 0 && arrowAngle == maxArrowAngle) {
            clearInterval(arrowInterval);
          }

          init();
        }, 5);
      }
    }, 3);
  };
});
riot.tag2('wg-expandable', '<div class="expandable b-gray"> <h3 click="{toggle}" class="{opts.icon} {icons:opts.icon}">{opts.label} <span if="{opts.filtered}" class="filtered"></span><span if="{opts.filtered}">({opts.count})</span></h3> <div class="checks content b-light"> <yield></yield> </div> </div>', '', '', function (opts) {
  this.on("update", function () {});

  this.toggle = function (e) {
    e.target.parentNode.querySelector(".content").classList.toggle("visible");
    e.target.classList.toggle("expanded");
  }.bind(this);
});
riot.tag2('fav-button', '<div click="{doFav}" class="favourite-star" riot-style="background-image: url(\'/assets/publica/favs/Favourite_{onoff}_{opts.icon||\'White\'}.svg\');"></div> <feature-alert if="{shouldAlert()}" data-text="{opts.alert}" data-target="{this.root}"></feature-alert>', 'fav-button .favourite-star,[data-is="fav-button"] .favourite-star{ background-image: url("/assets/publica/favs/Favourite_On_Environment.svg"); height: 13px; width: 13px; background-size: contain; background-position: center; margin-right: 5px; }', '', function (opts) {
  var _this140 = this;

  var self = this;
  this.icons = {
    "#f68b1f": "OnTheGo",
    "#cadb44": "Environment",
    "#f05b72": "News",
    "#7cccbf": "Connect",
    "#61a2d8": "Find"
  };
  this.onoff = "Off";
  this.loading = true;
  this.storageCounted = false;

  this.shouldAlert = function () {
    if (!this.opts.book) return false;
    var should = this.opts.alert && this.onoff == 'Off' && !this.loading;

    if (this.onoff == "On") {
      localStorage.setItem("favourite-alert-" + this.opts.book.detail, true);
    }

    if (should) {
      should = !localStorage.getItem("favourite-alert-" + this.opts.book.detail);
    }

    var c = parseInt(localStorage.getItem("favourite-alert-count-" + this.opts.book.detail) || 0);

    if (!this.storageCounted) {
      if (should) {
        c += 1;
        localStorage.setItem("favourite-alert-count-" + this.opts.book.detail, c);
      }
    }

    if (should) {
      should = c <= 3;
    }

    return should;
  };

  this.on("mount", function () {
    _this140.onoff = _this140.opts.onoff || "Off";
    _this140.loading = true;

    if (_this140.onoff != "On") {
      app.favs.get(_this140.opts.book, function (x) {
        self.loading = false;

        if (x.length > 0) {
          self.update({
            onoff: "On"
          });
        } else {
          self.update();
        }
      });
    }

    ;

    _this140.update();
  });

  this.doFav = function (e) {
    if (this.onoff && this.onoff == "On") {
      this.onoff = "Off";
      app.favs.remove(this.opts.book);
    } else {
      this.onoff = "On";
      app.favs.add(this.opts.book);
    }
  }.bind(this);
});
riot.tag2('feature-alert', '<div class="arrow" riot-style="{style}" click="{disappear}"> <raw content="{opts.dataText||text}"></raw> <div class="arrow-icon"></div> </div>', '@keyframes arrow-pulse { 0% { transform: rotate(225deg); } 25% { transform: translate(5px, 5px) rotate(225deg); } 75% { transform: translate(-5px, -5px) rotate(225deg); ; } 100% { transform: rotate(225deg); } } feature-alert .arrow-icon,[data-is="feature-alert"] .arrow-icon{ background-image: url("/assets/publica/my/arrow.svg"); transform: rotate(225deg); height: 20px; width: 20px; position: absolute; left: calc(100% - 15px); top: calc(100% - 11px); animation: arrow-pulse 1s infinite linear; pointer-events: none; } feature-alert .arrow,[data-is="feature-alert"] .arrow{ position: fixed; background-color: #d11b6ae0; color: white; border-radius: 6px; padding: 6px; white-space: nowrap; transition: 1s; }', '', function (opts) {
  var _this142 = this;

  this.text = "Try to favourite this data<br> to see a summary on the home page";
  this.position = {
    x: 0,
    y: 0
  };
  this.style = {};

  this.disappear = function () {
    var _this141 = this;

    this.style.opacity = 0;
    this.update();
    setTimeout(function () {
      _this141.unmount();
    }, 1000);
  };

  this.on("mount", function () {
    _this142.position = _lib.getPosition(_this142.opts.dataTarget);
    _this142.style.bottom = "calc(100vh + 10px - ".concat(_this142.position.y, "px)");
    _this142.style.right = "calc(100% - ".concat(_this142.position.x, "px)");

    _this142.update();

    setTimeout(_this142.disappear.bind(_this142), 5000);
  });
  this.on("update", function () {});
});
riot.tag2('featured-buttons', '<div class="pulseboxes"> <pulse-box each="{static}" class="featured-new"></pulse-box> <pulse-box each="{nodes}" class="{parent.classes[meta.featured]}"></pulse-box> </div>', 'featured-buttons .pulseboxes,[data-is="featured-buttons"] .pulseboxes{ display: flex; font-size: 80%; } featured-buttons article.roundcorner:before,[data-is="featured-buttons"] article.roundcorner:before{ content: " "; position: absolute; background-size: 50px; background-image: url(/assets/publica/my/ribbon.svg); background-position: top right; height: 100%; width: 100%; background-repeat: no-repeat; right: -3px; top: -3px; } featured-buttons article.roundcorner:after,[data-is="featured-buttons"] article.roundcorner:after{ content: "New"; position: absolute; background-repeat: no-repeat; right: 5px; top: 8px; transform: rotate(45deg); font-size: 80%; color: white; text-transform: uppercase; } featured-buttons pulse-box .image,[data-is="featured-buttons"] pulse-box .image,featured-buttons [data-is="pulse-box"] .image,[data-is="featured-buttons"] [data-is="pulse-box"] .image{ min-height: 37px; background-size: contain !important; } featured-buttons pulse-box,[data-is="featured-buttons"] pulse-box{ flex-basis: calc(99% / 4 - (10px * 2) / 4); flex-basis: 115px; } featured-buttons .featured-new article.roundcorner:before,[data-is="featured-buttons"] .featured-new article.roundcorner:before{ background-image: url(/assets/publica/my/ribbon.svg); } featured-buttons .featured-hot article.roundcorner:before,[data-is="featured-buttons"] .featured-hot article.roundcorner:before{ background-image: url(/assets/publica/my/ribbon_hot.svg); } featured-buttons .featured-new article.roundcorner:after,[data-is="featured-buttons"] .featured-new article.roundcorner:after{ content: "New"; } featured-buttons .featured-hot article.roundcorner:after,[data-is="featured-buttons"] .featured-hot article.roundcorner:after{ content: "Hot"; } featured-buttons article.roundcorner,[data-is="featured-buttons"] article.roundcorner{ position: relative; }', '', function (opts) {
  var _this143 = this;

  this.classes = ["", "featured-new", "featured-hot"];
  this["static"] = [];
  this.on("mount", function () {
    return _this143.update();
  });
  this.on("update", function () {
    this["static"] = app.featured.getStatic();
    this.nodes = app.featured.getNodes();
  });
});
riot.tag2('graph', '<div style="position:relative"> <loading data-classes="td-margin" if="{graphLoading}"></loading> <div riot-style="margin-top: 10px;height: {height}px" ref="graphid"></div> </div>', '', '', function (opts) {
  var _this144 = this;

  this.graphLoading = true;
  var lastAjax = false;
  var self = this;
  var lastUrl = "";
  this.data = false;
  this.height = 100;
  this.on("mount", function () {
    _this144.update();
  });
  this.on("update", function (data) {
    if (data) {
      _this144.data = data;
    } else if (_this144.opts.graphData && _this144.graphLoading) {
      _this144.data = _this144.opts.graphData;
    }

    if (_this144.data && !_this144.data.wrapperTag) {
      _this144.data.wrapperTag = _this144.parent.root;
    }

    if (_this144.data && _this144.data.url && _this144.data.url != lastUrl) {
      _this144.graphLoading = true;

      _this144.graphLoad();
    }

    if (_this144.data && _this144.data.ret && _this144.graphLoading) {
      _this144.graphGen(_this144.data.ret);
    }
  });

  this.graphLoad = function () {
    var _this145 = this;

    if (this.data && this.data.url && this.graphLoading) {
      if (lastAjax) lastAjax.abort();
      lastUrl = this.data.url;
      lastAjax = _lib.ajax.$get(this.data.url, function (ret) {
        _this145.data.ret = JSON.parse(ret);

        if (_this145.data.callback) {
          _this145.data.callback(_this145.data.ret);
        }

        _this145.graphGen(_this145.data.ret);
      });
    }
  };

  this.graphGen = function (ret) {
    if (this.data.width) {
      var width = this.data.width;
    } else {
      var width = parseInt(getComputedStyle(this.data.wrapperTag).width);
    }

    if (this.data.height) {
      var height = this.height = this.data.height;
    } else {
      var height = 100;
    }

    var buttons = [{
      step: "all",
      label: "all"
    }, {
      step: "day",
      count: 31,
      label: "30 days",
      active: true
    }, {
      step: "day",
      count: 7,
      label: "7 days"
    }];
    this.refs.graphid.style.width = width + "px";
    var layout = {
      margin: {
        t: 10,
        b: 30,
        l: 30,
        r: 20
      },
      width: width,
      height: height,
      autosize: true,
      paper_bgcolor: "#fff",
      plot_bgcolor: "transparent",
      xaxis: this.data.xaxis ? this.data.xaxis : {
        range: [moment().subtract(31, "days").format("YYYY-MM-DD"), moment().format("YYYY-MM-DD")],
        rangeselector: {
          visible: true,
          buttons: buttons
        }
      },
      yaxis: this.data.yaxis ? this.data.yaxis : {
        autorange: true
      },
      shapes: this.data.shapes ? this.data.shapes : []
    };

    if (this.data.images) {
      layout.images = this.data.images;
    }

    if (this.data.margin) {
      layout.margin = this.data.margin;
    }

    if (this.data.barmode) {
      layout.barmode = this.data.barmode;
    }

    if (this.data.legend) {
      layout.legend = this.data.legend;
    }

    var newPlot = Plotly.newPlot(this.refs.graphid, Array.isArray(ret) ? ret : [ret], layout, {
      scrollZoom: false,
      staticPlot: true,
      responsive: true,
      width: width,
      displayModeBar: false
    }).then(function () {
      if (layout.xaxis.range) {
        Plotly.relayout(myPlot, {
          'xaxis.range[0]': layout.xaxis.range[0],
          'xaxis.range[1]': layout.xaxis.range[1]
        });
      }
    });
    console.log(newPlot, ret, layout);
    var myPlot = this.refs.graphid;
    var data = ret;
    var isUnderRelayout = false;

    if (ret.type != "indicator" && ret.type != "pie") {
      this.data.yaxis || myPlot.on('plotly_relayout', function (relayoutData) {
        if (relayoutData['autosize'] === true) {} else if (relayoutData['xaxis.autorange'] === true) {
          var update = {
            'yaxis.autorange': true
          };

          if (!isUnderRelayout) {
            Plotly.relayout(myPlot, update).then(function () {
              isUnderRelayout = false;
            });
          }

          isUnderRelayout = true;
        } else {
          var flag = false;

          if (typeof relayoutData['xaxis.range[0]'] !== 'undefined' || typeof relayoutData['xaxis.range[1]'] !== 'undefined') {
            if (typeof relayoutData['xaxis.range[0]'] !== 'undefined') {
              var x0 = relayoutData['xaxis.range[0]'];
            } else {
              var x0 = layout.xaxis.range[0];
            }

            if (typeof relayoutData['xaxis.range[1]'] !== 'undefined') {
              var x1 = relayoutData['xaxis.range[1]'];
            } else {
              var x1 = layout.xaxis.range[1];
            }

            flag = true;
          } else if (typeof relayoutData['xaxis.range'] !== 'undefined') {
            var x0 = relayoutData['xaxis.range'][0];
            var x1 = relayoutData['xaxis.range'][1];
            flag = true;
          }

          if (flag === true) {
            var minValue, maxValue;
            var i = 0,
                j = 0;
            var data = [ret];

            for (i = 0; i < data.length; i++) {
              var aTrace = data[i];
              if (aTrace.x) for (j = 0; j < aTrace.x.length; j++) {
                var x = aTrace.x[j];

                if (x >= x0 && x <= x1) {
                  var aValue = Number(aTrace.y[j]);

                  if (maxValue === undefined || aValue > maxValue) {
                    maxValue = aValue;
                  }

                  if (minValue === undefined || aValue < minValue) {
                    minValue = aValue;
                  }
                }
              }
            }

            maxValue += (maxValue - minValue) / 10;
            minValue -= (maxValue - minValue) / 10;

            if (layout.yaxis.type === 'linear') {
              var update = {
                'yaxis.range': [minValue, maxValue]
              };
            } else if (layout.yaxis.type === 'log') {
              var update = {
                'yaxis.range': [Math.log(minValue <= 0 ? 0.0000001 : minValue) / Math.log(10), Math.log(maxValue) / Math.log(10)]
              };
            }

            if (!isUnderRelayout) {
              Plotly.relayout(myPlot, update).then(function () {
                isUnderRelayout = false;
              });
            }

            isUnderRelayout = true;
          }
        }
      });
    }

    self.graphLoading = false;
    self.update();
  };
});
riot.tag2('push-ask', '<div if="{askVisible}" class="onesignal-bell-launcher-button"> <div class="text" if="{askSupported && textVisible}"> <div>{getPopupText()}</div> <button click="{goSubscribe}">Yes</button> <button click="{goUnsubscribe}">No</button> </div> <div class="text" if="{!askSupported && textVisible}"> <div><i>iPhones and older browsers don\'t support web notifications. Until it is fixed, we offer in-app notifications.</i> {getPopupText()}</div> <button class="yes" click="{goSubscribeCookie}">Yes</button> <button class="no" click="{goUnsubscribeCookie}">No</button> </div> <div class="text transition {hideAnimation:hideAnimationThanks}" hidden="{!thanksVisible}" click="{hideThanks}"> Notifications enabled. </div> <div click="{toggleText}" class="onesignal-bell-svg"></div> </div>', 'push-ask .background,[data-is="push-ask"] .background{ fill: rgb(242, 92, 117); } push-ask .transition,[data-is="push-ask"] .transition{ opacity: 1; transition: 2s all 2s; } @keyframes hideAnimation { from { opacity: 1; display: block } to { opacity: 0; display: none } } push-ask .hideAnimation,[data-is="push-ask"] .hideAnimation{ animation: hideAnimation 2s 2s; animation-fill-mode: forwards; } push-ask .text,[data-is="push-ask"] .text{ position: absolute; left: 0px; bottom: calc(100% + 20px); background: white; color: black; padding: 20px; min-width: 150px; border-radius: 10px; } push-ask .text::after,[data-is="push-ask"] .text::after{ content: ""; position: absolute; top: 100%; left: 7px; margin-top: -1px; border-width: 10px; border-style: solid; border-color: white transparent transparent transparent; } push-ask .text button,[data-is="push-ask"] .text button{ background: #BEE4DC; border: white; margin-right: 5px; } push-ask .text div,[data-is="push-ask"] .text div{ margin-bottom: 10px; } push-ask .foreground,[data-is="push-ask"] .foreground{ fill: #BEE4DC; } push-ask .stroke,[data-is="push-ask"] .stroke{ fill: none; stroke: #BEE4DC; stroke-width: 3px; stroke-miterlimit: 10; } push-ask .onesignal-bell-svg,[data-is="push-ask"] .onesignal-bell-svg{ position: absolute; left: 0; right: 0; width: 100%; height: 100%; background-image: url("/assets/publica/sets/Find_Notification_On.svg") } push-ask .onesignal-bell-launcher-button,[data-is="push-ask"] .onesignal-bell-launcher-button{ height: 32px; width: 32px; position: absolute; z-index: 99999999; top: 10px; left: calc(5vw - 16px); } push-ask .text button.yes,[data-is="push-ask"] .text button.yes{ background-color: #a3cf62; } push-ask .text button.no,[data-is="push-ask"] .text button.no{ background-color: #d11b6a; } @media all and (min-width: 600px) { push-ask .onesignal-bell-launcher-button,[data-is="push-ask"] .onesignal-bell-launcher-button{ right: calc(50vw - 300px); } }', '', function (opts) {
  var _this146 = this;

  this.thanksVisible = false;
  this.textVisible = false;
  this.askVisible = false;
  this.askSupported = false;
  this.alreadyAgreed = -1;
  this.hideAnimationThanks = false;
  this.inAppInterval = 0;
  var self = this;

  this.hideThanks = function () {
    this.thanksVisible = false;
  };

  this.getPopupText = function () {
    if (this.popupModule) {
      return app.modules.get(this.popupModule).getPopupText();
    } else if (typeof this.popupText == "string") {
      return this.popupText;
    } else {
      return this.popupText();
    }
  };

  this.setCookiePulse = function (isSub) {
    _lib.ajax.$get("/app/router/onesignal.php?cookie&pulse=" + self.askName + "&state=" + (isSub ? "1" : "0"), function () {
      self.update({
        thanksVisible: isSub
      });
    });
  };

  this.setUserPushPulse = function (isSub) {
    OneSignal.getUserId().then(function (userId) {
      if (!userId) {
        app.storage.set({
          OneSignalNotShow: true
        });
      } else {
        console.log(userId, isSub, self.askName);

        if (self.popupModule) {
          _lib.ajax.$json("/app/router/onesignal.php?user=" + userId + "&pulse=" + self.askName + "&state=" + (isSub ? "1" : "0"), app.modules.get(self.popupModule).getSignalData(), function () {
            self.update({
              thanksVisible: isSub
            });
          });
        } else {
          _lib.ajax.$get("/app/router/onesignal.php?user=" + userId + "&pulse=" + self.askName + "&state=" + (isSub ? "1" : "0"), function () {
            self.update({
              thanksVisible: isSub
            });
          });
        }
      }
    });
  };

  this.on("mount", function () {
    var self = _this146;
    OneSignal.push(function () {
      OneSignal.on("subscriptionChange", function (isSubscribed) {
        self.setUserPushPulse(isSubscribed);
      });
      OneSignal.isPushNotificationsEnabled().then(function (isEnabled) {
        self.alreadyAgreed = isEnabled;
      });
      self.askSupported = OneSignal.isPushNotificationsSupported();
      self.update();
    });
  });

  this.getInAppNotifications = function () {
    _lib.ajax.$get("/app/router/onesignal.php?getcookie", function (a) {
      if (a != "") app.alert.set(a);
    });
  };

  this.on("update", function (a) {
    if (!a || !a.thanksVisible) {
      _this146.thanksVisible = false;
      _this146.hideAnimationThanks = false;
    } else {
      _this146.hideAnimationThanks = true;
    }

    if (a && a.askVisible) {
      if (!_this146.askSupported) {
        if (_this146.inAppInterval == 0) {
          _this146.getInAppNotifications();

          _this146.inAppInterval = setInterval(function () {
            _this146.getInAppNotifications();
          }, 120000);
        }
      }

      OneSignal.push(function () {
        if (!app.storage.get("OneSignalNotShow")) {
          OneSignal.getUserId().then(function (userId) {
            if (!userId) {
              self.textVisible = true;
              self.update();
              setTimeout(function () {
                self.textVisible = true;
                self.update();
              }, 10000);
            } else {
              _lib.ajax.$get("/app/router/onesignal.php?user=" + userId + "&pulse=" + self.askName + "&getstate", function (ret) {
                if (ret == "null") {
                  self.textVisible = true;
                  self.update();
                  setTimeout(function () {
                    self.textVisible = true;
                    self.update();
                  }, 10000);
                } else {
                  self.textVisible = false;
                  self.update();
                }
              });
            }
          });
        }
      });
    }
  });

  this.toggleText = function (e) {
    this.textVisible = !this.textVisible;
  }.bind(this);

  this.goSubscribe = function (e) {
    this.textVisible = false;
    OneSignal.isPushNotificationsEnabled().then(function (isEnabled) {
      self.alreadyAgreed = isEnabled;

      if (isEnabled) {
        self.setUserPushPulse(true);
      } else {
        OneSignal.registerForPushNotifications();
      }
    });
  }.bind(this);

  this.goUnsubscribe = function (e) {
    this.textVisible = false;
    this.setUserPushPulse(false);
  }.bind(this);

  this.goSubscribeCookie = function (e) {
    this.textVisible = false;
    this.setCookiePulse(true);
  }.bind(this);

  this.goUnsubscribeCookie = function (e) {
    this.textVisible = false;
    this.setCookiePulse(false);
  }.bind(this);
});
riot.tag2('refresh-timer', '<div class="progress-circle"> <div class="before"></div> <div class="after" riot-style="{progressGradient}"></div> </div>', 'refresh-timer,[data-is="refresh-timer"]{ height: 20px; display: block; width: 20px; right: 20px; position: absolute; z-index: 9; bottom: 25px; cursor: pointer; } .max-view refresh-timer,.max-view [data-is="refresh-timer"]{ bottom: 10px; } refresh-timer .progress-circle,[data-is="refresh-timer"] .progress-circle{ height: 100%; position: relative; width: 100%; } refresh-timer .progress-circle .before,[data-is="refresh-timer"] .progress-circle .before{ background-color: #098484; border-radius: 50%; display: flex; position: absolute; left: 4px; right: 4px; top: 4px; bottom: 4px; transition: -webkit-transform 0.2s ease; transition: transform 0.2s ease; transition: transform 0.2s ease, -webkit-transform 0.2s ease; } refresh-timer .progress-circle .after,[data-is="refresh-timer"] .progress-circle .after{ } refresh-timer .progress-circle .after,[data-is="refresh-timer"] .progress-circle .after{ background-color: #0083ff; border-radius: 50%; content: \'\'; display: inline-block; height: 100%; width: 100%; box-sizing: border-box; }', 'click="{refreshping}"', function (opts) {
  var _this147 = this;

  var b, bb;
  b = bb = "#ddd";
  var f, ff;
  f = ff = "#7DC4C3";
  this.percent = 0;
  this.firstG = 90;
  this.secondG = 90;
  var pingterval = 1000 * 60 * 2;

  this.refreshping = function (e) {
    for (var i = localStorage.length - 1; i >= 0; i--) {
      var key = localStorage.key(i).split("/")[0];

      if (key == "map" || key == "list") {
        localStorage.removeItem(localStorage.key(i));
      }
    }

    app.trigger("resetping");
    route.exec();
  }.bind(this);

  this.progressGradient = {
    "background-image": "linear-gradient(90deg, #ddd 50%, transparent 50%, transparent), linear-gradient(90deg, #a4dad2 50%, #ddd 50%, #ddd)"
  };
  this.progressGradient["background-image"] = "linear-gradient(".concat(this.firstG, "deg, ").concat(b, " 50%, transparent 50%, transparent), linear-gradient(").concat(this.secondG, "deg, ").concat(ff, " 50%, #ddd 50%, ").concat(bb, ")");

  var recalc = function recalc() {
    _this147.percent++;
    _this147.percent %= 100;

    if (_this147.percent < 50) {
      _this147.firstG = 90;
      _this147.secondG = 360 / 30 * _this147.percent + 90;
      b = bb;
      f = ff;
    } else {
      _this147.firstG = 360 / 30 * (_this147.percent - 50) - 90;
      _this147.secondG = 270;
      b = ff;
      f = bb;
    }

    _this147.progressGradient["background-image"] = "linear-gradient(".concat(_this147.firstG, "deg, ").concat(b, " 50%, transparent 50%, transparent), linear-gradient(").concat(_this147.secondG, "deg, ").concat(ff, " 50%, #ddd 50%, ").concat(bb, ")");

    _this147.update();
  };

  app.on("pingpong", function (a) {
    _this147.percent = 0;
  });
  this.on("mount", function () {
    setInterval(recalc, pingterval / 30);
  });
});
riot.tag2('rg-date', '<div class="container"> <div class="pickfields"> <span class="fieldlabel" if="{opts.date.label}">{opts.date.label}</span> <label class="pickfield day"> <input ref="day" onchange="{changeSelected}" type="text" riot-value="{opts.date.date.format(\'DD\')}"> </label> <label class="pickfield month"> <input ref="month" onchange="{changeSelected}" type="text" riot-value="{opts.date.date.format(\'MM\')}"> </label> <label class="pickfield year"> <input ref="year" onchange="{changeSelected}" type="text" riot-value="{opts.date.date.format(\'YYYY\')}"> </label> <div class="buttons"> <button onclick="{toggle}" class="calendar"></button> </div> </div> <input type="text" class="field" riot-value="{opts.date.date.format(format)}" readonly> <div class="calendar calendar--high b-dark" if="{opts.date.isvisible}"> <div class="calendar__header">{opts.date.date.format(monthFormat)} {opts.date.date.format(yearFormat)}</div> <div class="calendar__day">M</div> <div class="calendar__day">T</div> <div class="calendar__day">W</div> <div class="calendar__day">T</div> <div class="calendar__day">F</div> <div class="calendar__day">S</div> <div class="calendar__day">S</div> <button class="calendar__date {\'calendar__date--selected\': day.selected, \'calendar__date--today\': day.today}" disabled="{day.disabled}" each="{day in startBuffer}" onclick="{select}" data-day="{day.date.format(dayFormat)}">{day.date.format(dayFormat)}</button> <button class="calendar__date calendar__date--in-month {\'calendar__date--selected\': day.selected, \'calendar__date--today\': day.today}" disabled="{day.disabled}" each="{day in days}" onclick="{select}" data-day="{day.date.format(dayFormat)}">{day.date.format(dayFormat)}</button> <button class="calendar__date {\'calendar__date--selected\': day.selected, \'calendar__date--today\': day.today}" disabled="{day.disabled}" each="{day in endBuffer}" onclick="{select}" data-day="{day.date.format(dayFormat)}">{day.date.format(dayFormat)}</button> <button class="calendar__control calendar_prev" disabled="{opts.date.min.isSame(opts.date.date, \'month\')}" onclick="{prevMonth}"></button> <button class="calendar__control calendar_next" disabled="{opts.date.max.isSame(opts.date.date, \'month\')}" onclick="{nextMonth}"></button> <div class="calendar_bottom_line"></div> </div> </div>', 'rg-date .container,[data-is="rg-date"] .container{ display: inline-block; cursor: pointer; } rg-date span.fieldlabel,[data-is="rg-date"] span.fieldlabel{ display: inline-block; width: 43px; } rg-date .pickfields,[data-is="rg-date"] .pickfields{ } rg-date div.calendar,[data-is="rg-date"] div.calendar{ position: relative; min-width: 300px; margin-top: .5em; left: -46px; } rg-date .buttons,[data-is="rg-date"] .buttons{ display: inline-block; float: none; vertical-align: middle; } rg-date .pickfield,[data-is="rg-date"] .pickfield{ text-align: center; position: relative; line-height: 32px; margin-bottom: 5px; width: auto; } rg-date .pickfield input,[data-is="rg-date"] .pickfield input{ width: 3.5em; background-color: transparent; border: 1px solid black; outline: none; padding: 3px; text-align: center; } rg-date .pickfield.day,[data-is="rg-date"] .pickfield.day,rg-date .pickfield.month,[data-is="rg-date"] .pickfield.month{ margin-right: 5px; }', '', function (opts) {
  var _this148 = this;

  var toMoment = function toMoment(d) {
    if (!moment.isMoment(d)) d = moment(d);
    if (d.isValid()) return d;
    return moment();
  };

  var handleClickOutside = function handleClickOutside(e) {
    if (!_this148.root.contains(e.target)) _this148.close();

    _this148.update();
  };

  var dayObj = function dayObj(dayDate) {
    var dateObj = dayDate || moment();
    return {
      date: dateObj,
      selected: opts.date.date.isSame(dayDate, 'day'),
      today: moment().isSame(dayDate, 'day'),
      disabled: opts.date.min && opts.date.min.isAfter(dayDate) || opts.date.max && opts.date.max.isBefore(dayDate)
    };
  };

  var buildCalendar = function buildCalendar() {
    _this148.format = 'LL';
    _this148.yearFormat = 'YYYY';
    _this148.monthFormat = 'MMMM';
    _this148.dayFormat = 'DD';
    _this148.days = [];
    _this148.startBuffer = [];
    _this148.endBuffer = [];
    var begin = moment(opts.date.date).startOf('month');
    var daysInMonth = moment(opts.date.date).daysInMonth();
    var end = moment(opts.date.date).endOf('month');

    for (var i = begin.isoWeekday() - 1; i > 0; i -= 1) {
      var d = moment(begin).subtract(i, 'days');

      _this148.startBuffer.push(dayObj(d));
    }

    for (var _i = 0; _i < daysInMonth; _i++) {
      var current = moment(begin).add(_i, 'days');

      _this148.days.push(dayObj(current));
    }

    for (var _i2 = end.isoWeekday() + 1; _i2 <= 7; _i2++) {
      var _d = moment(end).add(_i2 - end.isoWeekday(), 'days');

      _this148.endBuffer.push(dayObj(_d));
    }
  };

  this.changeSelected = function () {
    this.opts.date.date.set({
      'date': parseInt(this.refs.day.value),
      'month': parseInt(this.refs.month.value),
      'year': parseInt(this.refs.year.value)
    });
  }.bind(this);

  this.on('mount', function () {
    if (!opts.date) opts.date = {
      date: moment()
    };
    if (!opts.date.date) opts.date.date = moment();
    opts.date.date = toMoment(opts.date.date);

    if (opts.date.min) {
      opts.date.min = toMoment(opts.date.min);

      if (opts.date.min.isAfter(moment(), 'day')) {
        opts.date.date = moment(opts.date.min);
      }
    }

    if (opts.date.max) {
      opts.date.max = toMoment(opts.date.max);

      if (opts.date.max.isBefore(moment(), 'day')) {
        opts.date.date = moment(opts.date.max);
      }
    }

    _this148.on('update', function () {
      opts.date.date = toMoment(opts.date.date);
      buildCalendar();
    });

    _this148.update();
  });
  this.on('unmount', function () {});
  this.on("open", function () {
    _lib.animateScroll(document.querySelector("page-content"), "vertical", 250, 50);
  });

  this.open = function () {
    opts.date.isvisible = true;

    _this148.trigger('open');
  };

  this.close = function () {
    if (opts.date.isvisible) {
      opts.date.isvisible = false;

      _this148.trigger('close');
    }
  };

  this.toggle = function () {
    opts.date.isvisible = !opts.date.isvisible;

    _this148.trigger(opts.date.isvisible ? 'open' : 'close');
  };

  this.select = function (e) {
    opts.date.date = e.item.day.date;

    _this148.trigger('select', opts.date.date);
  };

  this.setToday = function () {
    opts.date.date = moment();

    _this148.trigger('select', opts.date.date);
  };

  this.prevYear = function () {
    opts.date.date = opts.date.date.subtract(1, 'year');
  };

  this.nextYear = function () {
    opts.date.date = opts.date.date.add(1, 'year');
  };

  this.prevMonth = function () {
    opts.date.date = opts.date.date.subtract(1, 'month');
  };

  this.nextMonth = function () {
    opts.date.date = opts.date.date.add(1, 'month');
  };

  function getWindowDimensions() {
    var w = window,
        d = document,
        e = d.documentElement,
        g = d.getElementsByTagName('body')[0],
        x = w.innerWidth || e.clientWidth || g.clientWidth,
        y = w.innerHeight || e.clientHeight || g.clientHeight;
    return {
      width: x,
      height: y
    };
  }

  var positionDropdown = function positionDropdown() {
    var w = getWindowDimensions();

    var m = _this148.root.querySelector('.calendar');

    if (!m) return;

    if (!opts.date.isvisible) {
      m.style.marginTop = '';
      m.style.marginLeft = '';
      return;
    }

    var pos = m.getBoundingClientRect();

    if (w.width < pos.left + pos.width) {
      m.style.marginLeft = w.width - (pos.left + pos.width) - 20 + 'px';
    }

    if (pos.left < 0) {
      m.style.marginLeft = '20px';
    }

    if (w.height < pos.top + pos.height) {
      m.style.marginTop = w.height - (pos.top + pos.height) - 20 + 'px';
    }
  };
});
riot.tag2('update-bar', '<div ref="topalert" id="topalert" riot-style="{topStyle}"> <div if="{mainUpdate}"> <b>SmartView updated</b> <button click="{hide}" class="close">Hide</button> <div> <span>{mainUpdate.title}</span> <button if="{mainUpdate.link}" click="{goLink}">view</button> <button click="{doShowAll}" if="{!showAll && updates.length}">+{updates.length} more</button> </div> <div if="{showAll}" each="{updates}"> <span>{title}</span> <button if="{link}" click="{goLink}">view</button> </div> </div> </div> <div class="lightbox" if="{showAll}" click="{hide}"></div>', 'update-bar .lightbox,[data-is="update-bar"] .lightbox{ position: absolute; top: 0; bottom: 0; right: 0; left: 0; background-color: rgba(0, 0, 0, 0.8); z-index: 2; } update-bar .close,[data-is="update-bar"] .close{ position: absolute; right: 5px; top: 5px; } update-bar #topalert,[data-is="update-bar"] #topalert{ position: fixed; top: 0px; left: 0px; right: 0px; background-color: rgba(255, 255, 255, 0.95); z-index: 10; font-size: 80%; padding: 10px; transition: all 1s; } update-bar #topalert button,[data-is="update-bar"] #topalert button{ padding: 1px 6px; margin-left: 5px; } update-bar #topalert button,[data-is="update-bar"] #topalert button{ padding: 1px 6px; margin-left: 5px; } update-bar b,[data-is="update-bar"] b{ font-weight: 600; }', '', function (opts) {
  var _this149 = this;

  this.updates = [];
  this.mainUpdate;
  this.showAll = false;
  this.hideTimeout;
  this.topStyle = {};

  this.doShowAll = function () {
    this.showAll = !this.showAll;
  }.bind(this);

  this.hide = function () {
    app.updates.hide();
  }.bind(this);

  this.goLink = function (e) {
    app.updates.hide();

    if (e.item) {
      route(e.item.link);
    } else {
      route(this.mainUpdate.link);
    }
  }.bind(this);

  this.on("mount", function () {
    _this149.update();
  });
  this.on("update", function () {
    _this149.updates = app.updates.getList();

    if (_this149.updates.length > 0) {
      _this149.mainUpdate = _this149.updates.shift();
    }

    clearTimeout(_this149.hideTimeout);

    if (!_this149.showAll) {
      _this149.hideTimeout = setTimeout(function () {
        _this149.topStyle.top = -1 * _this149.refs.topalert.clientHeight + "px";

        _this149.update();
      }, 7000);
    }
  });
});